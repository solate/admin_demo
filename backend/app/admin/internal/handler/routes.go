// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.2

package handler

import (
	"net/http"

	auth "admin_backend/app/admin/internal/handler/auth"
	dict "admin_backend/app/admin/internal/handler/dict"
	factory "admin_backend/app/admin/internal/handler/factory"
	inventory "admin_backend/app/admin/internal/handler/inventory"
	menu "admin_backend/app/admin/internal/handler/menu"
	permission "admin_backend/app/admin/internal/handler/permission"
	product "admin_backend/app/admin/internal/handler/product"
	role "admin_backend/app/admin/internal/handler/role"
	statistics "admin_backend/app/admin/internal/handler/statistics"
	sys_user "admin_backend/app/admin/internal/handler/sys_user"
	tenant "admin_backend/app/admin/internal/handler/tenant"
	"admin_backend/app/admin/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				// 获取验证码
				Method:  http.MethodGet,
				Path:    "/captcha",
				Handler: auth.GetCaptchaHandler(serverCtx),
			},
			{
				// 用户登录
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: auth.LoginHandler(serverCtx),
			},
			{
				// 刷新访问令牌
				Method:  http.MethodPost,
				Path:    "/refresh-token",
				Handler: auth.RefreshTokenHandler(serverCtx),
			},
			{
				// 用户注册
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: auth.RegisterHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/admin/v1/auth"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					// 修改密码
					Method:  http.MethodPost,
					Path:    "/change-password",
					Handler: auth.ChangePasswordHandler(serverCtx),
				},
				{
					// 用户登出（当前设备）
					Method:  http.MethodPost,
					Path:    "/logout",
					Handler: auth.LogoutHandler(serverCtx),
				},
				{
					// 用户登出（所有设备）
					Method:  http.MethodPost,
					Path:    "/logout-all",
					Handler: auth.LogoutAllHandler(serverCtx),
				},
				{
					// 重置密码
					Method:  http.MethodPost,
					Path:    "/reset-password",
					Handler: auth.ResetPasswordHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/admin/v1/auth"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					// 创建字典类型
					Method:  http.MethodPost,
					Path:    "/dict-types",
					Handler: dict.CreateDictTypeHandler(serverCtx),
				},
				{
					// 获取字典类型列表
					Method:  http.MethodGet,
					Path:    "/dict-types",
					Handler: dict.ListDictTypeHandler(serverCtx),
				},
				{
					// 创建字典数据
					Method:  http.MethodPost,
					Path:    "/dict-types/:type_code/items",
					Handler: dict.CreateDictItemHandler(serverCtx),
				},
				{
					// 获取字典数据列表
					Method:  http.MethodGet,
					Path:    "/dict-types/:type_code/items",
					Handler: dict.ListDictItemHandler(serverCtx),
				},
				{
					// 更新字典数据
					Method:  http.MethodPut,
					Path:    "/dict-types/:type_code/items/:item_id",
					Handler: dict.UpdateDictItemHandler(serverCtx),
				},
				{
					// 删除字典数据
					Method:  http.MethodDelete,
					Path:    "/dict-types/:type_code/items/:item_id",
					Handler: dict.DeleteDictItemHandler(serverCtx),
				},
				{
					// 获取字典数据详情
					Method:  http.MethodGet,
					Path:    "/dict-types/:type_code/items/:item_id",
					Handler: dict.GetDictItemHandler(serverCtx),
				},
				{
					// 更新字典类型
					Method:  http.MethodPut,
					Path:    "/dict-types/:type_id",
					Handler: dict.UpdateDictTypeHandler(serverCtx),
				},
				{
					// 删除字典类型
					Method:  http.MethodDelete,
					Path:    "/dict-types/:type_id",
					Handler: dict.DeleteDictTypeHandler(serverCtx),
				},
				{
					// 获取字典类型详情
					Method:  http.MethodGet,
					Path:    "/dict-types/:type_id",
					Handler: dict.GetDictTypeHandler(serverCtx),
				},
				{
					// 获取字典项选项列表
					Method:  http.MethodGet,
					Path:    "/items/all",
					Handler: dict.GetDictItemAllHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/admin/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					// 创建工厂
					Method:  http.MethodPost,
					Path:    "/factories",
					Handler: factory.CreateFactoryHandler(serverCtx),
				},
				{
					// 获取工厂列表
					Method:  http.MethodGet,
					Path:    "/factories",
					Handler: factory.ListFactoryHandler(serverCtx),
				},
				{
					// 更新工厂
					Method:  http.MethodPut,
					Path:    "/factories/:factory_id",
					Handler: factory.UpdateFactoryHandler(serverCtx),
				},
				{
					// 删除工厂
					Method:  http.MethodDelete,
					Path:    "/factories/:factory_id",
					Handler: factory.DeleteFactoryHandler(serverCtx),
				},
				{
					// 获取工厂详情
					Method:  http.MethodGet,
					Path:    "/factories/:factory_id",
					Handler: factory.GetFactoryHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/business/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					// 获取库存操作历史
					Method:  http.MethodGet,
					Path:    "/inventory/history",
					Handler: inventory.GetInventoryHistoryHandler(serverCtx),
				},
				{
					// 商品入库
					Method:  http.MethodPost,
					Path:    "/inventory/in",
					Handler: inventory.ProductInHandler(serverCtx),
				},
				{
					// 获取库存记录列表
					Method:  http.MethodGet,
					Path:    "/inventory/list",
					Handler: inventory.ListInventoryHandler(serverCtx),
				},
				{
					// 商品出库
					Method:  http.MethodPost,
					Path:    "/inventory/out",
					Handler: inventory.ProductOutHandler(serverCtx),
				},
				{
					// 获取商品库存信息
					Method:  http.MethodGet,
					Path:    "/inventory/stock",
					Handler: inventory.GetProductStockHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/business/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					// 创建菜单
					Method:  http.MethodPost,
					Path:    "/menus",
					Handler: menu.CreateMenuHandler(serverCtx),
				},
				{
					// 获取菜单列表
					Method:  http.MethodGet,
					Path:    "/menus",
					Handler: menu.ListMenuHandler(serverCtx),
				},
				{
					// 更新菜单
					Method:  http.MethodPut,
					Path:    "/menus/:menu_id",
					Handler: menu.UpdateMenuHandler(serverCtx),
				},
				{
					// 删除菜单
					Method:  http.MethodDelete,
					Path:    "/menus/:menu_id",
					Handler: menu.DeleteMenuHandler(serverCtx),
				},
				{
					// 获取菜单详情
					Method:  http.MethodGet,
					Path:    "/menus/:menu_id",
					Handler: menu.GetMenuHandler(serverCtx),
				},
				{
					// 获取所有菜单
					Method:  http.MethodGet,
					Path:    "/menus/all",
					Handler: menu.GetAllMenuHandler(serverCtx),
				},
				{
					// 获取菜单树
					Method:  http.MethodGet,
					Path:    "/menus/tree",
					Handler: menu.GetMenuTreeHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/admin/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					// 设置角色权限
					Method:  http.MethodPost,
					Path:    "/roles/:role_code/permissions",
					Handler: permission.SetRolePermissionsHandler(serverCtx),
				},
				{
					// 获取角色权限列表
					Method:  http.MethodGet,
					Path:    "/roles/:role_code/permissions",
					Handler: permission.GetRolePermissionsHandler(serverCtx),
				},
				{
					// 获取资源类型列表
					Method:  http.MethodGet,
					Path:    "/rules/resource-types",
					Handler: permission.GetResourceTypesHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/admin/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					// 创建商品
					Method:  http.MethodPost,
					Path:    "/products",
					Handler: product.CreateProductHandler(serverCtx),
				},
				{
					// 获取商品列表
					Method:  http.MethodGet,
					Path:    "/products",
					Handler: product.ListProductHandler(serverCtx),
				},
				{
					// 更新商品
					Method:  http.MethodPut,
					Path:    "/products/:product_id",
					Handler: product.UpdateProductHandler(serverCtx),
				},
				{
					// 删除商品
					Method:  http.MethodDelete,
					Path:    "/products/:product_id",
					Handler: product.DeleteProductHandler(serverCtx),
				},
				{
					// 获取商品详情
					Method:  http.MethodGet,
					Path:    "/products/:product_id",
					Handler: product.GetProductHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/business/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					// 创建角色
					Method:  http.MethodPost,
					Path:    "/roles",
					Handler: role.CreateRoleHandler(serverCtx),
				},
				{
					// 获取角色列表
					Method:  http.MethodGet,
					Path:    "/roles",
					Handler: role.ListRoleHandler(serverCtx),
				},
				{
					// 更新角色
					Method:  http.MethodPut,
					Path:    "/roles/:role_id",
					Handler: role.UpdateRoleHandler(serverCtx),
				},
				{
					// 删除角色
					Method:  http.MethodDelete,
					Path:    "/roles/:role_id",
					Handler: role.DeleteRoleHandler(serverCtx),
				},
				{
					// 获取角色详情
					Method:  http.MethodGet,
					Path:    "/roles/:role_id",
					Handler: role.GetRoleHandler(serverCtx),
				},
				{
					// 获取所有角色列表
					Method:  http.MethodGet,
					Path:    "/roles/all",
					Handler: role.GetAllRolesHandler(serverCtx),
				},
				{
					// 设置用户角色
					Method:  http.MethodPost,
					Path:    "/users/:user_id/roles",
					Handler: role.SetUserRolesHandler(serverCtx),
				},
				{
					// 获取用户角色列表
					Method:  http.MethodGet,
					Path:    "/users/:user_id/roles",
					Handler: role.GetUserRolesHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/admin/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					// 获取实时统计
					Method:  http.MethodGet,
					Path:    "/statistics",
					Handler: statistics.GetStatisticsHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/business/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					// 查询登录记录
					Method:  http.MethodGet,
					Path:    "/login-logs",
					Handler: sys_user.ListLoginLogHandler(serverCtx),
				},
				{
					// 创建用户
					Method:  http.MethodPost,
					Path:    "/users",
					Handler: sys_user.CreateUserHandler(serverCtx),
				},
				{
					// 获取用户列表
					Method:  http.MethodGet,
					Path:    "/users",
					Handler: sys_user.ListUserHandler(serverCtx),
				},
				{
					// 更新用户
					Method:  http.MethodPut,
					Path:    "/users/:user_id",
					Handler: sys_user.UpdateUserHandler(serverCtx),
				},
				{
					// 删除用户
					Method:  http.MethodDelete,
					Path:    "/users/:user_id",
					Handler: sys_user.DeleteUserHandler(serverCtx),
				},
				{
					// 获取用户详情
					Method:  http.MethodGet,
					Path:    "/users/:user_id",
					Handler: sys_user.GetUserHandler(serverCtx),
				},
				{
					// 获取当前用户信息
					Method:  http.MethodGet,
					Path:    "/users/me",
					Handler: sys_user.GetCurrentUserHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/admin/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					// 创建租户
					Method:  http.MethodPost,
					Path:    "/tenants",
					Handler: tenant.CreateTenantHandler(serverCtx),
				},
				{
					// 获取租户列表
					Method:  http.MethodGet,
					Path:    "/tenants",
					Handler: tenant.ListTenantHandler(serverCtx),
				},
				{
					// 更新租户
					Method:  http.MethodPut,
					Path:    "/tenants/:tenant_id",
					Handler: tenant.UpdateTenantHandler(serverCtx),
				},
				{
					// 获取租户详情
					Method:  http.MethodGet,
					Path:    "/tenants/:tenant_id",
					Handler: tenant.GetTenantHandler(serverCtx),
				},
				{
					// 删除租户
					Method:  http.MethodDelete,
					Path:    "/tenants/:tenant_id",
					Handler: tenant.DeleteTenantHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/admin/v1"),
	)
}
