// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.2

package handler

import (
	"net/http"

	auth "admin_backend/app/admin/internal/handler/auth"
	dict "admin_backend/app/admin/internal/handler/dict"
	menu "admin_backend/app/admin/internal/handler/menu"
	organization "admin_backend/app/admin/internal/handler/organization"
	permission "admin_backend/app/admin/internal/handler/permission"
	role "admin_backend/app/admin/internal/handler/role"
	task "admin_backend/app/admin/internal/handler/task"
	tenant "admin_backend/app/admin/internal/handler/tenant"
	user "admin_backend/app/admin/internal/handler/user"
	"admin_backend/app/admin/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				// 获取验证码
				Method:  http.MethodGet,
				Path:    "/captcha",
				Handler: auth.GetCaptchaHandler(serverCtx),
			},
			{
				// 用户登录
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: auth.LoginHandler(serverCtx),
			},
			{
				// 刷新访问令牌
				Method:  http.MethodPost,
				Path:    "/refresh-token",
				Handler: auth.RefreshTokenHandler(serverCtx),
			},
			{
				// 用户注册
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: auth.RegisterHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/admin/v1/auth"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					// 修改密码
					Method:  http.MethodPost,
					Path:    "/change-password",
					Handler: auth.ChangePasswordHandler(serverCtx),
				},
				{
					// 获取当前用户活跃设备数量
					Method:  http.MethodGet,
					Path:    "/devices/active",
					Handler: auth.GetActiveDevicesHandler(serverCtx),
				},
				{
					// 用户登出（当前设备）
					Method:  http.MethodPost,
					Path:    "/logout",
					Handler: auth.LogoutHandler(serverCtx),
				},
				{
					// 用户登出（所有设备）
					Method:  http.MethodPost,
					Path:    "/logout-all",
					Handler: auth.LogoutAllHandler(serverCtx),
				},
				{
					// 重置密码
					Method:  http.MethodPost,
					Path:    "/reset-password",
					Handler: auth.ResetPasswordHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/admin/v1/auth"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					// 创建字典类型
					Method:  http.MethodPost,
					Path:    "/dict-types",
					Handler: dict.CreateDictTypeHandler(serverCtx),
				},
				{
					// 获取字典类型列表
					Method:  http.MethodGet,
					Path:    "/dict-types",
					Handler: dict.ListDictTypeHandler(serverCtx),
				},
				{
					// 创建字典数据
					Method:  http.MethodPost,
					Path:    "/dict-types/:type_code/items",
					Handler: dict.CreateDictItemHandler(serverCtx),
				},
				{
					// 获取字典数据列表
					Method:  http.MethodGet,
					Path:    "/dict-types/:type_code/items",
					Handler: dict.ListDictItemHandler(serverCtx),
				},
				{
					// 更新字典数据
					Method:  http.MethodPut,
					Path:    "/dict-types/:type_code/items/:item_id",
					Handler: dict.UpdateDictItemHandler(serverCtx),
				},
				{
					// 删除字典数据
					Method:  http.MethodDelete,
					Path:    "/dict-types/:type_code/items/:item_id",
					Handler: dict.DeleteDictItemHandler(serverCtx),
				},
				{
					// 获取字典数据详情
					Method:  http.MethodGet,
					Path:    "/dict-types/:type_code/items/:item_id",
					Handler: dict.GetDictItemHandler(serverCtx),
				},
				{
					// 更新字典类型
					Method:  http.MethodPut,
					Path:    "/dict-types/:type_id",
					Handler: dict.UpdateDictTypeHandler(serverCtx),
				},
				{
					// 删除字典类型
					Method:  http.MethodDelete,
					Path:    "/dict-types/:type_id",
					Handler: dict.DeleteDictTypeHandler(serverCtx),
				},
				{
					// 获取字典类型详情
					Method:  http.MethodGet,
					Path:    "/dict-types/:type_id",
					Handler: dict.GetDictTypeHandler(serverCtx),
				},
				{
					// 获取字典项选项列表
					Method:  http.MethodGet,
					Path:    "/items/all",
					Handler: dict.GetDictItemAllHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/admin/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					// 创建菜单
					Method:  http.MethodPost,
					Path:    "/menus",
					Handler: menu.CreateMenuHandler(serverCtx),
				},
				{
					// 获取菜单列表
					Method:  http.MethodGet,
					Path:    "/menus",
					Handler: menu.ListMenuHandler(serverCtx),
				},
				{
					// 更新菜单
					Method:  http.MethodPut,
					Path:    "/menus/:menu_id",
					Handler: menu.UpdateMenuHandler(serverCtx),
				},
				{
					// 删除菜单
					Method:  http.MethodDelete,
					Path:    "/menus/:menu_id",
					Handler: menu.DeleteMenuHandler(serverCtx),
				},
				{
					// 获取菜单详情
					Method:  http.MethodGet,
					Path:    "/menus/:menu_id",
					Handler: menu.GetMenuHandler(serverCtx),
				},
				{
					// 获取所有菜单
					Method:  http.MethodGet,
					Path:    "/menus/all",
					Handler: menu.GetAllMenuHandler(serverCtx),
				},
				{
					// 获取菜单树
					Method:  http.MethodGet,
					Path:    "/menus/tree",
					Handler: menu.GetMenuTreeHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/admin/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					// 创建部门
					Method:  http.MethodPost,
					Path:    "/departments",
					Handler: organization.CreateDepartmentHandler(serverCtx),
				},
				{
					// 获取部门列表
					Method:  http.MethodGet,
					Path:    "/departments",
					Handler: organization.ListDepartmentHandler(serverCtx),
				},
				{
					// 更新部门
					Method:  http.MethodPut,
					Path:    "/departments/:department_id",
					Handler: organization.UpdateDepartmentHandler(serverCtx),
				},
				{
					// 删除部门
					Method:  http.MethodDelete,
					Path:    "/departments/:department_id",
					Handler: organization.DeleteDepartmentHandler(serverCtx),
				},
				{
					// 获取部门详情
					Method:  http.MethodGet,
					Path:    "/departments/:department_id",
					Handler: organization.GetDepartmentHandler(serverCtx),
				},
				{
					// 获取组织架构树
					Method:  http.MethodGet,
					Path:    "/org-tree",
					Handler: organization.GetOrgTreeHandler(serverCtx),
				},
				{
					// 创建岗位
					Method:  http.MethodPost,
					Path:    "/positions",
					Handler: organization.CreatePositionHandler(serverCtx),
				},
				{
					// 获取岗位列表
					Method:  http.MethodGet,
					Path:    "/positions",
					Handler: organization.ListPositionHandler(serverCtx),
				},
				{
					// 更新岗位
					Method:  http.MethodPut,
					Path:    "/positions/:position_id",
					Handler: organization.UpdatePositionHandler(serverCtx),
				},
				{
					// 删除岗位
					Method:  http.MethodDelete,
					Path:    "/positions/:position_id",
					Handler: organization.DeletePositionHandler(serverCtx),
				},
				{
					// 获取岗位详情
					Method:  http.MethodGet,
					Path:    "/positions/:position_id",
					Handler: organization.GetPositionHandler(serverCtx),
				},
				{
					// 获取岗位下的用户列表
					Method:  http.MethodGet,
					Path:    "/positions/:position_id/users",
					Handler: organization.GetPositionUsersHandler(serverCtx),
				},
				{
					// 分配用户岗位
					Method:  http.MethodPost,
					Path:    "/user-positions",
					Handler: organization.AssignUserPositionHandler(serverCtx),
				},
				{
					// 移除用户岗位
					Method:  http.MethodDelete,
					Path:    "/user-positions",
					Handler: organization.RemoveUserPositionHandler(serverCtx),
				},
				{
					// 获取用户的岗位列表
					Method:  http.MethodGet,
					Path:    "/users/:user_id/positions",
					Handler: organization.GetUserPositionsHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/admin/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					// 设置角色权限
					Method:  http.MethodPost,
					Path:    "/roles/:role_code/permissions",
					Handler: permission.SetRolePermissionsHandler(serverCtx),
				},
				{
					// 获取角色权限列表
					Method:  http.MethodGet,
					Path:    "/roles/:role_code/permissions",
					Handler: permission.GetRolePermissionsHandler(serverCtx),
				},
				{
					// 获取资源类型列表
					Method:  http.MethodGet,
					Path:    "/rules/resource-types",
					Handler: permission.GetResourceTypesHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/admin/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					// 创建角色
					Method:  http.MethodPost,
					Path:    "/roles",
					Handler: role.CreateRoleHandler(serverCtx),
				},
				{
					// 获取角色列表
					Method:  http.MethodGet,
					Path:    "/roles",
					Handler: role.ListRoleHandler(serverCtx),
				},
				{
					// 更新角色
					Method:  http.MethodPut,
					Path:    "/roles/:role_id",
					Handler: role.UpdateRoleHandler(serverCtx),
				},
				{
					// 删除角色
					Method:  http.MethodDelete,
					Path:    "/roles/:role_id",
					Handler: role.DeleteRoleHandler(serverCtx),
				},
				{
					// 获取角色详情
					Method:  http.MethodGet,
					Path:    "/roles/:role_id",
					Handler: role.GetRoleHandler(serverCtx),
				},
				{
					// 获取所有角色列表
					Method:  http.MethodGet,
					Path:    "/roles/all",
					Handler: role.GetAllRolesHandler(serverCtx),
				},
				{
					// 设置用户角色
					Method:  http.MethodPost,
					Path:    "/users/:user_id/roles",
					Handler: role.SetUserRolesHandler(serverCtx),
				},
				{
					// 获取用户角色列表
					Method:  http.MethodGet,
					Path:    "/users/:user_id/roles",
					Handler: role.GetUserRolesHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/admin/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					// 创建计划
					Method:  http.MethodPost,
					Path:    "/plans",
					Handler: task.CreatePlanHandler(serverCtx),
				},
				{
					// 获取计划列表
					Method:  http.MethodGet,
					Path:    "/plans",
					Handler: task.ListPlanHandler(serverCtx),
				},
				{
					// 更新计划
					Method:  http.MethodPut,
					Path:    "/plans/:plan_id",
					Handler: task.UpdatePlanHandler(serverCtx),
				},
				{
					// 删除计划
					Method:  http.MethodDelete,
					Path:    "/plans/:plan_id",
					Handler: task.DeletePlanHandler(serverCtx),
				},
				{
					// 获取计划详情
					Method:  http.MethodGet,
					Path:    "/plans/:plan_id",
					Handler: task.GetPlanHandler(serverCtx),
				},
				{
					// 获取任务列表
					Method:  http.MethodGet,
					Path:    "/tasks",
					Handler: task.ListTaskHandler(serverCtx),
				},
				{
					// 删除任务
					Method:  http.MethodDelete,
					Path:    "/tasks/:task_id",
					Handler: task.DeleteTaskHandler(serverCtx),
				},
				{
					// 停止任务
					Method:  http.MethodPost,
					Path:    "/tasks/:task_id/stop",
					Handler: task.StopTaskHandler(serverCtx),
				},
				{
					// 手动触发任务
					Method:  http.MethodPost,
					Path:    "/tasks/trigger",
					Handler: task.TriggerTaskHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/admin/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					// 创建租户
					Method:  http.MethodPost,
					Path:    "/tenants",
					Handler: tenant.CreateTenantHandler(serverCtx),
				},
				{
					// 获取租户列表
					Method:  http.MethodGet,
					Path:    "/tenants",
					Handler: tenant.ListTenantHandler(serverCtx),
				},
				{
					// 更新租户
					Method:  http.MethodPut,
					Path:    "/tenants/:tenant_id",
					Handler: tenant.UpdateTenantHandler(serverCtx),
				},
				{
					// 获取租户详情
					Method:  http.MethodGet,
					Path:    "/tenants/:tenant_id",
					Handler: tenant.GetTenantHandler(serverCtx),
				},
				{
					// 删除租户
					Method:  http.MethodDelete,
					Path:    "/tenants/:tenant_id",
					Handler: tenant.DeleteTenantHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/admin/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					// 查询登录记录
					Method:  http.MethodGet,
					Path:    "/login-logs",
					Handler: user.ListLoginLogHandler(serverCtx),
				},
				{
					// 创建用户
					Method:  http.MethodPost,
					Path:    "/users",
					Handler: user.CreateUserHandler(serverCtx),
				},
				{
					// 获取用户列表
					Method:  http.MethodGet,
					Path:    "/users",
					Handler: user.ListUserHandler(serverCtx),
				},
				{
					// 更新用户
					Method:  http.MethodPut,
					Path:    "/users/:user_id",
					Handler: user.UpdateUserHandler(serverCtx),
				},
				{
					// 删除用户
					Method:  http.MethodDelete,
					Path:    "/users/:user_id",
					Handler: user.DeleteUserHandler(serverCtx),
				},
				{
					// 获取用户详情
					Method:  http.MethodGet,
					Path:    "/users/:user_id",
					Handler: user.GetUserHandler(serverCtx),
				},
				{
					// 获取当前用户信息
					Method:  http.MethodGet,
					Path:    "/users/me",
					Handler: user.GetCurrentUserHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/admin/v1"),
	)
}
