// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/userposition"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserPositionCreate is the builder for creating a UserPosition entity.
type UserPositionCreate struct {
	config
	mutation *UserPositionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (upc *UserPositionCreate) SetUserID(s string) *UserPositionCreate {
	upc.mutation.SetUserID(s)
	return upc
}

// SetPositionID sets the "position_id" field.
func (upc *UserPositionCreate) SetPositionID(s string) *UserPositionCreate {
	upc.mutation.SetPositionID(s)
	return upc
}

// Mutation returns the UserPositionMutation object of the builder.
func (upc *UserPositionCreate) Mutation() *UserPositionMutation {
	return upc.mutation
}

// Save creates the UserPosition in the database.
func (upc *UserPositionCreate) Save(ctx context.Context) (*UserPosition, error) {
	return withHooks(ctx, upc.sqlSave, upc.mutation, upc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (upc *UserPositionCreate) SaveX(ctx context.Context) *UserPosition {
	v, err := upc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upc *UserPositionCreate) Exec(ctx context.Context) error {
	_, err := upc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upc *UserPositionCreate) ExecX(ctx context.Context) {
	if err := upc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upc *UserPositionCreate) check() error {
	if _, ok := upc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`generated: missing required field "UserPosition.user_id"`)}
	}
	if v, ok := upc.mutation.UserID(); ok {
		if err := userposition.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`generated: validator failed for field "UserPosition.user_id": %w`, err)}
		}
	}
	if _, ok := upc.mutation.PositionID(); !ok {
		return &ValidationError{Name: "position_id", err: errors.New(`generated: missing required field "UserPosition.position_id"`)}
	}
	if v, ok := upc.mutation.PositionID(); ok {
		if err := userposition.PositionIDValidator(v); err != nil {
			return &ValidationError{Name: "position_id", err: fmt.Errorf(`generated: validator failed for field "UserPosition.position_id": %w`, err)}
		}
	}
	return nil
}

func (upc *UserPositionCreate) sqlSave(ctx context.Context) (*UserPosition, error) {
	if err := upc.check(); err != nil {
		return nil, err
	}
	_node, _spec := upc.createSpec()
	if err := sqlgraph.CreateNode(ctx, upc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	upc.mutation.id = &_node.ID
	upc.mutation.done = true
	return _node, nil
}

func (upc *UserPositionCreate) createSpec() (*UserPosition, *sqlgraph.CreateSpec) {
	var (
		_node = &UserPosition{config: upc.config}
		_spec = sqlgraph.NewCreateSpec(userposition.Table, sqlgraph.NewFieldSpec(userposition.FieldID, field.TypeInt))
	)
	_spec.OnConflict = upc.conflict
	if value, ok := upc.mutation.UserID(); ok {
		_spec.SetField(userposition.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := upc.mutation.PositionID(); ok {
		_spec.SetField(userposition.FieldPositionID, field.TypeString, value)
		_node.PositionID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserPosition.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserPositionUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (upc *UserPositionCreate) OnConflict(opts ...sql.ConflictOption) *UserPositionUpsertOne {
	upc.conflict = opts
	return &UserPositionUpsertOne{
		create: upc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserPosition.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (upc *UserPositionCreate) OnConflictColumns(columns ...string) *UserPositionUpsertOne {
	upc.conflict = append(upc.conflict, sql.ConflictColumns(columns...))
	return &UserPositionUpsertOne{
		create: upc,
	}
}

type (
	// UserPositionUpsertOne is the builder for "upsert"-ing
	//  one UserPosition node.
	UserPositionUpsertOne struct {
		create *UserPositionCreate
	}

	// UserPositionUpsert is the "OnConflict" setter.
	UserPositionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *UserPositionUpsert) SetUserID(v string) *UserPositionUpsert {
	u.Set(userposition.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserPositionUpsert) UpdateUserID() *UserPositionUpsert {
	u.SetExcluded(userposition.FieldUserID)
	return u
}

// SetPositionID sets the "position_id" field.
func (u *UserPositionUpsert) SetPositionID(v string) *UserPositionUpsert {
	u.Set(userposition.FieldPositionID, v)
	return u
}

// UpdatePositionID sets the "position_id" field to the value that was provided on create.
func (u *UserPositionUpsert) UpdatePositionID() *UserPositionUpsert {
	u.SetExcluded(userposition.FieldPositionID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.UserPosition.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserPositionUpsertOne) UpdateNewValues() *UserPositionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserPosition.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserPositionUpsertOne) Ignore() *UserPositionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserPositionUpsertOne) DoNothing() *UserPositionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserPositionCreate.OnConflict
// documentation for more info.
func (u *UserPositionUpsertOne) Update(set func(*UserPositionUpsert)) *UserPositionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserPositionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserPositionUpsertOne) SetUserID(v string) *UserPositionUpsertOne {
	return u.Update(func(s *UserPositionUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserPositionUpsertOne) UpdateUserID() *UserPositionUpsertOne {
	return u.Update(func(s *UserPositionUpsert) {
		s.UpdateUserID()
	})
}

// SetPositionID sets the "position_id" field.
func (u *UserPositionUpsertOne) SetPositionID(v string) *UserPositionUpsertOne {
	return u.Update(func(s *UserPositionUpsert) {
		s.SetPositionID(v)
	})
}

// UpdatePositionID sets the "position_id" field to the value that was provided on create.
func (u *UserPositionUpsertOne) UpdatePositionID() *UserPositionUpsertOne {
	return u.Update(func(s *UserPositionUpsert) {
		s.UpdatePositionID()
	})
}

// Exec executes the query.
func (u *UserPositionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for UserPositionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserPositionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserPositionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserPositionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserPositionCreateBulk is the builder for creating many UserPosition entities in bulk.
type UserPositionCreateBulk struct {
	config
	err      error
	builders []*UserPositionCreate
	conflict []sql.ConflictOption
}

// Save creates the UserPosition entities in the database.
func (upcb *UserPositionCreateBulk) Save(ctx context.Context) ([]*UserPosition, error) {
	if upcb.err != nil {
		return nil, upcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(upcb.builders))
	nodes := make([]*UserPosition, len(upcb.builders))
	mutators := make([]Mutator, len(upcb.builders))
	for i := range upcb.builders {
		func(i int, root context.Context) {
			builder := upcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserPositionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, upcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = upcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, upcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, upcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (upcb *UserPositionCreateBulk) SaveX(ctx context.Context) []*UserPosition {
	v, err := upcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upcb *UserPositionCreateBulk) Exec(ctx context.Context) error {
	_, err := upcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upcb *UserPositionCreateBulk) ExecX(ctx context.Context) {
	if err := upcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserPosition.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserPositionUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (upcb *UserPositionCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserPositionUpsertBulk {
	upcb.conflict = opts
	return &UserPositionUpsertBulk{
		create: upcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserPosition.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (upcb *UserPositionCreateBulk) OnConflictColumns(columns ...string) *UserPositionUpsertBulk {
	upcb.conflict = append(upcb.conflict, sql.ConflictColumns(columns...))
	return &UserPositionUpsertBulk{
		create: upcb,
	}
}

// UserPositionUpsertBulk is the builder for "upsert"-ing
// a bulk of UserPosition nodes.
type UserPositionUpsertBulk struct {
	create *UserPositionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserPosition.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserPositionUpsertBulk) UpdateNewValues() *UserPositionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserPosition.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserPositionUpsertBulk) Ignore() *UserPositionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserPositionUpsertBulk) DoNothing() *UserPositionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserPositionCreateBulk.OnConflict
// documentation for more info.
func (u *UserPositionUpsertBulk) Update(set func(*UserPositionUpsert)) *UserPositionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserPositionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserPositionUpsertBulk) SetUserID(v string) *UserPositionUpsertBulk {
	return u.Update(func(s *UserPositionUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserPositionUpsertBulk) UpdateUserID() *UserPositionUpsertBulk {
	return u.Update(func(s *UserPositionUpsert) {
		s.UpdateUserID()
	})
}

// SetPositionID sets the "position_id" field.
func (u *UserPositionUpsertBulk) SetPositionID(v string) *UserPositionUpsertBulk {
	return u.Update(func(s *UserPositionUpsert) {
		s.SetPositionID(v)
	})
}

// UpdatePositionID sets the "position_id" field to the value that was provided on create.
func (u *UserPositionUpsertBulk) UpdatePositionID() *UserPositionUpsertBulk {
	return u.Update(func(s *UserPositionUpsert) {
		s.UpdatePositionID()
	})
}

// Exec executes the query.
func (u *UserPositionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the UserPositionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for UserPositionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserPositionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
