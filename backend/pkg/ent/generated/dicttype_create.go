// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/dicttype"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DictTypeCreate is the builder for creating a DictType entity.
type DictTypeCreate struct {
	config
	mutation *DictTypeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (dtc *DictTypeCreate) SetCreatedAt(i int64) *DictTypeCreate {
	dtc.mutation.SetCreatedAt(i)
	return dtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dtc *DictTypeCreate) SetNillableCreatedAt(i *int64) *DictTypeCreate {
	if i != nil {
		dtc.SetCreatedAt(*i)
	}
	return dtc
}

// SetUpdatedAt sets the "updated_at" field.
func (dtc *DictTypeCreate) SetUpdatedAt(i int64) *DictTypeCreate {
	dtc.mutation.SetUpdatedAt(i)
	return dtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dtc *DictTypeCreate) SetNillableUpdatedAt(i *int64) *DictTypeCreate {
	if i != nil {
		dtc.SetUpdatedAt(*i)
	}
	return dtc
}

// SetDeletedAt sets the "deleted_at" field.
func (dtc *DictTypeCreate) SetDeletedAt(i int64) *DictTypeCreate {
	dtc.mutation.SetDeletedAt(i)
	return dtc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dtc *DictTypeCreate) SetNillableDeletedAt(i *int64) *DictTypeCreate {
	if i != nil {
		dtc.SetDeletedAt(*i)
	}
	return dtc
}

// SetTenantCode sets the "tenant_code" field.
func (dtc *DictTypeCreate) SetTenantCode(s string) *DictTypeCreate {
	dtc.mutation.SetTenantCode(s)
	return dtc
}

// SetTypeID sets the "type_id" field.
func (dtc *DictTypeCreate) SetTypeID(s string) *DictTypeCreate {
	dtc.mutation.SetTypeID(s)
	return dtc
}

// SetName sets the "name" field.
func (dtc *DictTypeCreate) SetName(s string) *DictTypeCreate {
	dtc.mutation.SetName(s)
	return dtc
}

// SetCode sets the "code" field.
func (dtc *DictTypeCreate) SetCode(s string) *DictTypeCreate {
	dtc.mutation.SetCode(s)
	return dtc
}

// SetDescription sets the "description" field.
func (dtc *DictTypeCreate) SetDescription(s string) *DictTypeCreate {
	dtc.mutation.SetDescription(s)
	return dtc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dtc *DictTypeCreate) SetNillableDescription(s *string) *DictTypeCreate {
	if s != nil {
		dtc.SetDescription(*s)
	}
	return dtc
}

// SetStatus sets the "status" field.
func (dtc *DictTypeCreate) SetStatus(i int) *DictTypeCreate {
	dtc.mutation.SetStatus(i)
	return dtc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dtc *DictTypeCreate) SetNillableStatus(i *int) *DictTypeCreate {
	if i != nil {
		dtc.SetStatus(*i)
	}
	return dtc
}

// Mutation returns the DictTypeMutation object of the builder.
func (dtc *DictTypeCreate) Mutation() *DictTypeMutation {
	return dtc.mutation
}

// Save creates the DictType in the database.
func (dtc *DictTypeCreate) Save(ctx context.Context) (*DictType, error) {
	dtc.defaults()
	return withHooks(ctx, dtc.sqlSave, dtc.mutation, dtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dtc *DictTypeCreate) SaveX(ctx context.Context) *DictType {
	v, err := dtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dtc *DictTypeCreate) Exec(ctx context.Context) error {
	_, err := dtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtc *DictTypeCreate) ExecX(ctx context.Context) {
	if err := dtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dtc *DictTypeCreate) defaults() {
	if _, ok := dtc.mutation.CreatedAt(); !ok {
		v := dicttype.DefaultCreatedAt
		dtc.mutation.SetCreatedAt(v)
	}
	if _, ok := dtc.mutation.UpdatedAt(); !ok {
		v := dicttype.DefaultUpdatedAt
		dtc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dtc.mutation.Status(); !ok {
		v := dicttype.DefaultStatus
		dtc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dtc *DictTypeCreate) check() error {
	if _, ok := dtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "DictType.created_at"`)}
	}
	if _, ok := dtc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "DictType.updated_at"`)}
	}
	if _, ok := dtc.mutation.TenantCode(); !ok {
		return &ValidationError{Name: "tenant_code", err: errors.New(`generated: missing required field "DictType.tenant_code"`)}
	}
	if v, ok := dtc.mutation.TenantCode(); ok {
		if err := dicttype.TenantCodeValidator(v); err != nil {
			return &ValidationError{Name: "tenant_code", err: fmt.Errorf(`generated: validator failed for field "DictType.tenant_code": %w`, err)}
		}
	}
	if _, ok := dtc.mutation.TypeID(); !ok {
		return &ValidationError{Name: "type_id", err: errors.New(`generated: missing required field "DictType.type_id"`)}
	}
	if _, ok := dtc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "DictType.name"`)}
	}
	if v, ok := dtc.mutation.Name(); ok {
		if err := dicttype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "DictType.name": %w`, err)}
		}
	}
	if _, ok := dtc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`generated: missing required field "DictType.code"`)}
	}
	if v, ok := dtc.mutation.Code(); ok {
		if err := dicttype.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`generated: validator failed for field "DictType.code": %w`, err)}
		}
	}
	if _, ok := dtc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "DictType.status"`)}
	}
	return nil
}

func (dtc *DictTypeCreate) sqlSave(ctx context.Context) (*DictType, error) {
	if err := dtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dtc.mutation.id = &_node.ID
	dtc.mutation.done = true
	return _node, nil
}

func (dtc *DictTypeCreate) createSpec() (*DictType, *sqlgraph.CreateSpec) {
	var (
		_node = &DictType{config: dtc.config}
		_spec = sqlgraph.NewCreateSpec(dicttype.Table, sqlgraph.NewFieldSpec(dicttype.FieldID, field.TypeInt))
	)
	_spec.OnConflict = dtc.conflict
	if value, ok := dtc.mutation.CreatedAt(); ok {
		_spec.SetField(dicttype.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := dtc.mutation.UpdatedAt(); ok {
		_spec.SetField(dicttype.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := dtc.mutation.DeletedAt(); ok {
		_spec.SetField(dicttype.FieldDeletedAt, field.TypeInt64, value)
		_node.DeletedAt = &value
	}
	if value, ok := dtc.mutation.TenantCode(); ok {
		_spec.SetField(dicttype.FieldTenantCode, field.TypeString, value)
		_node.TenantCode = value
	}
	if value, ok := dtc.mutation.TypeID(); ok {
		_spec.SetField(dicttype.FieldTypeID, field.TypeString, value)
		_node.TypeID = value
	}
	if value, ok := dtc.mutation.Name(); ok {
		_spec.SetField(dicttype.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dtc.mutation.Code(); ok {
		_spec.SetField(dicttype.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := dtc.mutation.Description(); ok {
		_spec.SetField(dicttype.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := dtc.mutation.Status(); ok {
		_spec.SetField(dicttype.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DictType.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DictTypeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (dtc *DictTypeCreate) OnConflict(opts ...sql.ConflictOption) *DictTypeUpsertOne {
	dtc.conflict = opts
	return &DictTypeUpsertOne{
		create: dtc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DictType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dtc *DictTypeCreate) OnConflictColumns(columns ...string) *DictTypeUpsertOne {
	dtc.conflict = append(dtc.conflict, sql.ConflictColumns(columns...))
	return &DictTypeUpsertOne{
		create: dtc,
	}
}

type (
	// DictTypeUpsertOne is the builder for "upsert"-ing
	//  one DictType node.
	DictTypeUpsertOne struct {
		create *DictTypeCreate
	}

	// DictTypeUpsert is the "OnConflict" setter.
	DictTypeUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *DictTypeUpsert) SetUpdatedAt(v int64) *DictTypeUpsert {
	u.Set(dicttype.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DictTypeUpsert) UpdateUpdatedAt() *DictTypeUpsert {
	u.SetExcluded(dicttype.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *DictTypeUpsert) AddUpdatedAt(v int64) *DictTypeUpsert {
	u.Add(dicttype.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DictTypeUpsert) SetDeletedAt(v int64) *DictTypeUpsert {
	u.Set(dicttype.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DictTypeUpsert) UpdateDeletedAt() *DictTypeUpsert {
	u.SetExcluded(dicttype.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *DictTypeUpsert) AddDeletedAt(v int64) *DictTypeUpsert {
	u.Add(dicttype.FieldDeletedAt, v)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *DictTypeUpsert) ClearDeletedAt() *DictTypeUpsert {
	u.SetNull(dicttype.FieldDeletedAt)
	return u
}

// SetTenantCode sets the "tenant_code" field.
func (u *DictTypeUpsert) SetTenantCode(v string) *DictTypeUpsert {
	u.Set(dicttype.FieldTenantCode, v)
	return u
}

// UpdateTenantCode sets the "tenant_code" field to the value that was provided on create.
func (u *DictTypeUpsert) UpdateTenantCode() *DictTypeUpsert {
	u.SetExcluded(dicttype.FieldTenantCode)
	return u
}

// SetTypeID sets the "type_id" field.
func (u *DictTypeUpsert) SetTypeID(v string) *DictTypeUpsert {
	u.Set(dicttype.FieldTypeID, v)
	return u
}

// UpdateTypeID sets the "type_id" field to the value that was provided on create.
func (u *DictTypeUpsert) UpdateTypeID() *DictTypeUpsert {
	u.SetExcluded(dicttype.FieldTypeID)
	return u
}

// SetName sets the "name" field.
func (u *DictTypeUpsert) SetName(v string) *DictTypeUpsert {
	u.Set(dicttype.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DictTypeUpsert) UpdateName() *DictTypeUpsert {
	u.SetExcluded(dicttype.FieldName)
	return u
}

// SetCode sets the "code" field.
func (u *DictTypeUpsert) SetCode(v string) *DictTypeUpsert {
	u.Set(dicttype.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *DictTypeUpsert) UpdateCode() *DictTypeUpsert {
	u.SetExcluded(dicttype.FieldCode)
	return u
}

// SetDescription sets the "description" field.
func (u *DictTypeUpsert) SetDescription(v string) *DictTypeUpsert {
	u.Set(dicttype.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DictTypeUpsert) UpdateDescription() *DictTypeUpsert {
	u.SetExcluded(dicttype.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *DictTypeUpsert) ClearDescription() *DictTypeUpsert {
	u.SetNull(dicttype.FieldDescription)
	return u
}

// SetStatus sets the "status" field.
func (u *DictTypeUpsert) SetStatus(v int) *DictTypeUpsert {
	u.Set(dicttype.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DictTypeUpsert) UpdateStatus() *DictTypeUpsert {
	u.SetExcluded(dicttype.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *DictTypeUpsert) AddStatus(v int) *DictTypeUpsert {
	u.Add(dicttype.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.DictType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DictTypeUpsertOne) UpdateNewValues() *DictTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(dicttype.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DictType.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DictTypeUpsertOne) Ignore() *DictTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DictTypeUpsertOne) DoNothing() *DictTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DictTypeCreate.OnConflict
// documentation for more info.
func (u *DictTypeUpsertOne) Update(set func(*DictTypeUpsert)) *DictTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DictTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DictTypeUpsertOne) SetUpdatedAt(v int64) *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *DictTypeUpsertOne) AddUpdatedAt(v int64) *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DictTypeUpsertOne) UpdateUpdatedAt() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DictTypeUpsertOne) SetDeletedAt(v int64) *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *DictTypeUpsertOne) AddDeletedAt(v int64) *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DictTypeUpsertOne) UpdateDeletedAt() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *DictTypeUpsertOne) ClearDeletedAt() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTenantCode sets the "tenant_code" field.
func (u *DictTypeUpsertOne) SetTenantCode(v string) *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetTenantCode(v)
	})
}

// UpdateTenantCode sets the "tenant_code" field to the value that was provided on create.
func (u *DictTypeUpsertOne) UpdateTenantCode() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateTenantCode()
	})
}

// SetTypeID sets the "type_id" field.
func (u *DictTypeUpsertOne) SetTypeID(v string) *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetTypeID(v)
	})
}

// UpdateTypeID sets the "type_id" field to the value that was provided on create.
func (u *DictTypeUpsertOne) UpdateTypeID() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateTypeID()
	})
}

// SetName sets the "name" field.
func (u *DictTypeUpsertOne) SetName(v string) *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DictTypeUpsertOne) UpdateName() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateName()
	})
}

// SetCode sets the "code" field.
func (u *DictTypeUpsertOne) SetCode(v string) *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *DictTypeUpsertOne) UpdateCode() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateCode()
	})
}

// SetDescription sets the "description" field.
func (u *DictTypeUpsertOne) SetDescription(v string) *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DictTypeUpsertOne) UpdateDescription() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *DictTypeUpsertOne) ClearDescription() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.ClearDescription()
	})
}

// SetStatus sets the "status" field.
func (u *DictTypeUpsertOne) SetStatus(v int) *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *DictTypeUpsertOne) AddStatus(v int) *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DictTypeUpsertOne) UpdateStatus() *DictTypeUpsertOne {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *DictTypeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for DictTypeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DictTypeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DictTypeUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DictTypeUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DictTypeCreateBulk is the builder for creating many DictType entities in bulk.
type DictTypeCreateBulk struct {
	config
	err      error
	builders []*DictTypeCreate
	conflict []sql.ConflictOption
}

// Save creates the DictType entities in the database.
func (dtcb *DictTypeCreateBulk) Save(ctx context.Context) ([]*DictType, error) {
	if dtcb.err != nil {
		return nil, dtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dtcb.builders))
	nodes := make([]*DictType, len(dtcb.builders))
	mutators := make([]Mutator, len(dtcb.builders))
	for i := range dtcb.builders {
		func(i int, root context.Context) {
			builder := dtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DictTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dtcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dtcb *DictTypeCreateBulk) SaveX(ctx context.Context) []*DictType {
	v, err := dtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dtcb *DictTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := dtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtcb *DictTypeCreateBulk) ExecX(ctx context.Context) {
	if err := dtcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DictType.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DictTypeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (dtcb *DictTypeCreateBulk) OnConflict(opts ...sql.ConflictOption) *DictTypeUpsertBulk {
	dtcb.conflict = opts
	return &DictTypeUpsertBulk{
		create: dtcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DictType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dtcb *DictTypeCreateBulk) OnConflictColumns(columns ...string) *DictTypeUpsertBulk {
	dtcb.conflict = append(dtcb.conflict, sql.ConflictColumns(columns...))
	return &DictTypeUpsertBulk{
		create: dtcb,
	}
}

// DictTypeUpsertBulk is the builder for "upsert"-ing
// a bulk of DictType nodes.
type DictTypeUpsertBulk struct {
	create *DictTypeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DictType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DictTypeUpsertBulk) UpdateNewValues() *DictTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(dicttype.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DictType.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DictTypeUpsertBulk) Ignore() *DictTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DictTypeUpsertBulk) DoNothing() *DictTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DictTypeCreateBulk.OnConflict
// documentation for more info.
func (u *DictTypeUpsertBulk) Update(set func(*DictTypeUpsert)) *DictTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DictTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DictTypeUpsertBulk) SetUpdatedAt(v int64) *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *DictTypeUpsertBulk) AddUpdatedAt(v int64) *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DictTypeUpsertBulk) UpdateUpdatedAt() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DictTypeUpsertBulk) SetDeletedAt(v int64) *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *DictTypeUpsertBulk) AddDeletedAt(v int64) *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DictTypeUpsertBulk) UpdateDeletedAt() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *DictTypeUpsertBulk) ClearDeletedAt() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTenantCode sets the "tenant_code" field.
func (u *DictTypeUpsertBulk) SetTenantCode(v string) *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetTenantCode(v)
	})
}

// UpdateTenantCode sets the "tenant_code" field to the value that was provided on create.
func (u *DictTypeUpsertBulk) UpdateTenantCode() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateTenantCode()
	})
}

// SetTypeID sets the "type_id" field.
func (u *DictTypeUpsertBulk) SetTypeID(v string) *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetTypeID(v)
	})
}

// UpdateTypeID sets the "type_id" field to the value that was provided on create.
func (u *DictTypeUpsertBulk) UpdateTypeID() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateTypeID()
	})
}

// SetName sets the "name" field.
func (u *DictTypeUpsertBulk) SetName(v string) *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DictTypeUpsertBulk) UpdateName() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateName()
	})
}

// SetCode sets the "code" field.
func (u *DictTypeUpsertBulk) SetCode(v string) *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *DictTypeUpsertBulk) UpdateCode() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateCode()
	})
}

// SetDescription sets the "description" field.
func (u *DictTypeUpsertBulk) SetDescription(v string) *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DictTypeUpsertBulk) UpdateDescription() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *DictTypeUpsertBulk) ClearDescription() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.ClearDescription()
	})
}

// SetStatus sets the "status" field.
func (u *DictTypeUpsertBulk) SetStatus(v int) *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *DictTypeUpsertBulk) AddStatus(v int) *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DictTypeUpsertBulk) UpdateStatus() *DictTypeUpsertBulk {
	return u.Update(func(s *DictTypeUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *DictTypeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the DictTypeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for DictTypeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DictTypeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
