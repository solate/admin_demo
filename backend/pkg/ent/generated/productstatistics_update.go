// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/predicate"
	"admin_backend/pkg/ent/generated/productstatistics"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

// ProductStatisticsUpdate is the builder for updating ProductStatistics entities.
type ProductStatisticsUpdate struct {
	config
	hooks     []Hook
	mutation  *ProductStatisticsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ProductStatisticsUpdate builder.
func (psu *ProductStatisticsUpdate) Where(ps ...predicate.ProductStatistics) *ProductStatisticsUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetUpdatedAt sets the "updated_at" field.
func (psu *ProductStatisticsUpdate) SetUpdatedAt(i int64) *ProductStatisticsUpdate {
	psu.mutation.ResetUpdatedAt()
	psu.mutation.SetUpdatedAt(i)
	return psu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (psu *ProductStatisticsUpdate) SetNillableUpdatedAt(i *int64) *ProductStatisticsUpdate {
	if i != nil {
		psu.SetUpdatedAt(*i)
	}
	return psu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (psu *ProductStatisticsUpdate) AddUpdatedAt(i int64) *ProductStatisticsUpdate {
	psu.mutation.AddUpdatedAt(i)
	return psu
}

// SetTenantCode sets the "tenant_code" field.
func (psu *ProductStatisticsUpdate) SetTenantCode(s string) *ProductStatisticsUpdate {
	psu.mutation.SetTenantCode(s)
	return psu
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (psu *ProductStatisticsUpdate) SetNillableTenantCode(s *string) *ProductStatisticsUpdate {
	if s != nil {
		psu.SetTenantCode(*s)
	}
	return psu
}

// SetTotalProducts sets the "total_products" field.
func (psu *ProductStatisticsUpdate) SetTotalProducts(i int) *ProductStatisticsUpdate {
	psu.mutation.ResetTotalProducts()
	psu.mutation.SetTotalProducts(i)
	return psu
}

// SetNillableTotalProducts sets the "total_products" field if the given value is not nil.
func (psu *ProductStatisticsUpdate) SetNillableTotalProducts(i *int) *ProductStatisticsUpdate {
	if i != nil {
		psu.SetTotalProducts(*i)
	}
	return psu
}

// AddTotalProducts adds i to the "total_products" field.
func (psu *ProductStatisticsUpdate) AddTotalProducts(i int) *ProductStatisticsUpdate {
	psu.mutation.AddTotalProducts(i)
	return psu
}

// SetActiveProducts sets the "active_products" field.
func (psu *ProductStatisticsUpdate) SetActiveProducts(i int) *ProductStatisticsUpdate {
	psu.mutation.ResetActiveProducts()
	psu.mutation.SetActiveProducts(i)
	return psu
}

// SetNillableActiveProducts sets the "active_products" field if the given value is not nil.
func (psu *ProductStatisticsUpdate) SetNillableActiveProducts(i *int) *ProductStatisticsUpdate {
	if i != nil {
		psu.SetActiveProducts(*i)
	}
	return psu
}

// AddActiveProducts adds i to the "active_products" field.
func (psu *ProductStatisticsUpdate) AddActiveProducts(i int) *ProductStatisticsUpdate {
	psu.mutation.AddActiveProducts(i)
	return psu
}

// SetTotalStock sets the "total_stock" field.
func (psu *ProductStatisticsUpdate) SetTotalStock(i int) *ProductStatisticsUpdate {
	psu.mutation.ResetTotalStock()
	psu.mutation.SetTotalStock(i)
	return psu
}

// SetNillableTotalStock sets the "total_stock" field if the given value is not nil.
func (psu *ProductStatisticsUpdate) SetNillableTotalStock(i *int) *ProductStatisticsUpdate {
	if i != nil {
		psu.SetTotalStock(*i)
	}
	return psu
}

// AddTotalStock adds i to the "total_stock" field.
func (psu *ProductStatisticsUpdate) AddTotalStock(i int) *ProductStatisticsUpdate {
	psu.mutation.AddTotalStock(i)
	return psu
}

// SetTotalStockValue sets the "total_stock_value" field.
func (psu *ProductStatisticsUpdate) SetTotalStockValue(d decimal.Decimal) *ProductStatisticsUpdate {
	psu.mutation.SetTotalStockValue(d)
	return psu
}

// SetNillableTotalStockValue sets the "total_stock_value" field if the given value is not nil.
func (psu *ProductStatisticsUpdate) SetNillableTotalStockValue(d *decimal.Decimal) *ProductStatisticsUpdate {
	if d != nil {
		psu.SetTotalStockValue(*d)
	}
	return psu
}

// SetLowStockProducts sets the "low_stock_products" field.
func (psu *ProductStatisticsUpdate) SetLowStockProducts(i int) *ProductStatisticsUpdate {
	psu.mutation.ResetLowStockProducts()
	psu.mutation.SetLowStockProducts(i)
	return psu
}

// SetNillableLowStockProducts sets the "low_stock_products" field if the given value is not nil.
func (psu *ProductStatisticsUpdate) SetNillableLowStockProducts(i *int) *ProductStatisticsUpdate {
	if i != nil {
		psu.SetLowStockProducts(*i)
	}
	return psu
}

// AddLowStockProducts adds i to the "low_stock_products" field.
func (psu *ProductStatisticsUpdate) AddLowStockProducts(i int) *ProductStatisticsUpdate {
	psu.mutation.AddLowStockProducts(i)
	return psu
}

// SetTotalInQuantity sets the "total_in_quantity" field.
func (psu *ProductStatisticsUpdate) SetTotalInQuantity(i int) *ProductStatisticsUpdate {
	psu.mutation.ResetTotalInQuantity()
	psu.mutation.SetTotalInQuantity(i)
	return psu
}

// SetNillableTotalInQuantity sets the "total_in_quantity" field if the given value is not nil.
func (psu *ProductStatisticsUpdate) SetNillableTotalInQuantity(i *int) *ProductStatisticsUpdate {
	if i != nil {
		psu.SetTotalInQuantity(*i)
	}
	return psu
}

// AddTotalInQuantity adds i to the "total_in_quantity" field.
func (psu *ProductStatisticsUpdate) AddTotalInQuantity(i int) *ProductStatisticsUpdate {
	psu.mutation.AddTotalInQuantity(i)
	return psu
}

// SetTotalInAmount sets the "total_in_amount" field.
func (psu *ProductStatisticsUpdate) SetTotalInAmount(d decimal.Decimal) *ProductStatisticsUpdate {
	psu.mutation.SetTotalInAmount(d)
	return psu
}

// SetNillableTotalInAmount sets the "total_in_amount" field if the given value is not nil.
func (psu *ProductStatisticsUpdate) SetNillableTotalInAmount(d *decimal.Decimal) *ProductStatisticsUpdate {
	if d != nil {
		psu.SetTotalInAmount(*d)
	}
	return psu
}

// SetTotalOutQuantity sets the "total_out_quantity" field.
func (psu *ProductStatisticsUpdate) SetTotalOutQuantity(i int) *ProductStatisticsUpdate {
	psu.mutation.ResetTotalOutQuantity()
	psu.mutation.SetTotalOutQuantity(i)
	return psu
}

// SetNillableTotalOutQuantity sets the "total_out_quantity" field if the given value is not nil.
func (psu *ProductStatisticsUpdate) SetNillableTotalOutQuantity(i *int) *ProductStatisticsUpdate {
	if i != nil {
		psu.SetTotalOutQuantity(*i)
	}
	return psu
}

// AddTotalOutQuantity adds i to the "total_out_quantity" field.
func (psu *ProductStatisticsUpdate) AddTotalOutQuantity(i int) *ProductStatisticsUpdate {
	psu.mutation.AddTotalOutQuantity(i)
	return psu
}

// SetTotalOutAmount sets the "total_out_amount" field.
func (psu *ProductStatisticsUpdate) SetTotalOutAmount(d decimal.Decimal) *ProductStatisticsUpdate {
	psu.mutation.SetTotalOutAmount(d)
	return psu
}

// SetNillableTotalOutAmount sets the "total_out_amount" field if the given value is not nil.
func (psu *ProductStatisticsUpdate) SetNillableTotalOutAmount(d *decimal.Decimal) *ProductStatisticsUpdate {
	if d != nil {
		psu.SetTotalOutAmount(*d)
	}
	return psu
}

// SetTotalSalesAmount sets the "total_sales_amount" field.
func (psu *ProductStatisticsUpdate) SetTotalSalesAmount(d decimal.Decimal) *ProductStatisticsUpdate {
	psu.mutation.SetTotalSalesAmount(d)
	return psu
}

// SetNillableTotalSalesAmount sets the "total_sales_amount" field if the given value is not nil.
func (psu *ProductStatisticsUpdate) SetNillableTotalSalesAmount(d *decimal.Decimal) *ProductStatisticsUpdate {
	if d != nil {
		psu.SetTotalSalesAmount(*d)
	}
	return psu
}

// SetTotalSalesQuantity sets the "total_sales_quantity" field.
func (psu *ProductStatisticsUpdate) SetTotalSalesQuantity(i int) *ProductStatisticsUpdate {
	psu.mutation.ResetTotalSalesQuantity()
	psu.mutation.SetTotalSalesQuantity(i)
	return psu
}

// SetNillableTotalSalesQuantity sets the "total_sales_quantity" field if the given value is not nil.
func (psu *ProductStatisticsUpdate) SetNillableTotalSalesQuantity(i *int) *ProductStatisticsUpdate {
	if i != nil {
		psu.SetTotalSalesQuantity(*i)
	}
	return psu
}

// AddTotalSalesQuantity adds i to the "total_sales_quantity" field.
func (psu *ProductStatisticsUpdate) AddTotalSalesQuantity(i int) *ProductStatisticsUpdate {
	psu.mutation.AddTotalSalesQuantity(i)
	return psu
}

// Mutation returns the ProductStatisticsMutation object of the builder.
func (psu *ProductStatisticsUpdate) Mutation() *ProductStatisticsMutation {
	return psu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *ProductStatisticsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, psu.sqlSave, psu.mutation, psu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psu *ProductStatisticsUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *ProductStatisticsUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *ProductStatisticsUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (psu *ProductStatisticsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProductStatisticsUpdate {
	psu.modifiers = append(psu.modifiers, modifiers...)
	return psu
}

func (psu *ProductStatisticsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(productstatistics.Table, productstatistics.Columns, sqlgraph.NewFieldSpec(productstatistics.FieldID, field.TypeInt))
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.UpdatedAt(); ok {
		_spec.SetField(productstatistics.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := psu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(productstatistics.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := psu.mutation.TenantCode(); ok {
		_spec.SetField(productstatistics.FieldTenantCode, field.TypeString, value)
	}
	if value, ok := psu.mutation.TotalProducts(); ok {
		_spec.SetField(productstatistics.FieldTotalProducts, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedTotalProducts(); ok {
		_spec.AddField(productstatistics.FieldTotalProducts, field.TypeInt, value)
	}
	if value, ok := psu.mutation.ActiveProducts(); ok {
		_spec.SetField(productstatistics.FieldActiveProducts, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedActiveProducts(); ok {
		_spec.AddField(productstatistics.FieldActiveProducts, field.TypeInt, value)
	}
	if value, ok := psu.mutation.TotalStock(); ok {
		_spec.SetField(productstatistics.FieldTotalStock, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedTotalStock(); ok {
		_spec.AddField(productstatistics.FieldTotalStock, field.TypeInt, value)
	}
	if value, ok := psu.mutation.TotalStockValue(); ok {
		_spec.SetField(productstatistics.FieldTotalStockValue, field.TypeOther, value)
	}
	if value, ok := psu.mutation.LowStockProducts(); ok {
		_spec.SetField(productstatistics.FieldLowStockProducts, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedLowStockProducts(); ok {
		_spec.AddField(productstatistics.FieldLowStockProducts, field.TypeInt, value)
	}
	if value, ok := psu.mutation.TotalInQuantity(); ok {
		_spec.SetField(productstatistics.FieldTotalInQuantity, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedTotalInQuantity(); ok {
		_spec.AddField(productstatistics.FieldTotalInQuantity, field.TypeInt, value)
	}
	if value, ok := psu.mutation.TotalInAmount(); ok {
		_spec.SetField(productstatistics.FieldTotalInAmount, field.TypeOther, value)
	}
	if value, ok := psu.mutation.TotalOutQuantity(); ok {
		_spec.SetField(productstatistics.FieldTotalOutQuantity, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedTotalOutQuantity(); ok {
		_spec.AddField(productstatistics.FieldTotalOutQuantity, field.TypeInt, value)
	}
	if value, ok := psu.mutation.TotalOutAmount(); ok {
		_spec.SetField(productstatistics.FieldTotalOutAmount, field.TypeOther, value)
	}
	if value, ok := psu.mutation.TotalSalesAmount(); ok {
		_spec.SetField(productstatistics.FieldTotalSalesAmount, field.TypeOther, value)
	}
	if value, ok := psu.mutation.TotalSalesQuantity(); ok {
		_spec.SetField(productstatistics.FieldTotalSalesQuantity, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedTotalSalesQuantity(); ok {
		_spec.AddField(productstatistics.FieldTotalSalesQuantity, field.TypeInt, value)
	}
	_spec.AddModifiers(psu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productstatistics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psu.mutation.done = true
	return n, nil
}

// ProductStatisticsUpdateOne is the builder for updating a single ProductStatistics entity.
type ProductStatisticsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProductStatisticsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (psuo *ProductStatisticsUpdateOne) SetUpdatedAt(i int64) *ProductStatisticsUpdateOne {
	psuo.mutation.ResetUpdatedAt()
	psuo.mutation.SetUpdatedAt(i)
	return psuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (psuo *ProductStatisticsUpdateOne) SetNillableUpdatedAt(i *int64) *ProductStatisticsUpdateOne {
	if i != nil {
		psuo.SetUpdatedAt(*i)
	}
	return psuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (psuo *ProductStatisticsUpdateOne) AddUpdatedAt(i int64) *ProductStatisticsUpdateOne {
	psuo.mutation.AddUpdatedAt(i)
	return psuo
}

// SetTenantCode sets the "tenant_code" field.
func (psuo *ProductStatisticsUpdateOne) SetTenantCode(s string) *ProductStatisticsUpdateOne {
	psuo.mutation.SetTenantCode(s)
	return psuo
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (psuo *ProductStatisticsUpdateOne) SetNillableTenantCode(s *string) *ProductStatisticsUpdateOne {
	if s != nil {
		psuo.SetTenantCode(*s)
	}
	return psuo
}

// SetTotalProducts sets the "total_products" field.
func (psuo *ProductStatisticsUpdateOne) SetTotalProducts(i int) *ProductStatisticsUpdateOne {
	psuo.mutation.ResetTotalProducts()
	psuo.mutation.SetTotalProducts(i)
	return psuo
}

// SetNillableTotalProducts sets the "total_products" field if the given value is not nil.
func (psuo *ProductStatisticsUpdateOne) SetNillableTotalProducts(i *int) *ProductStatisticsUpdateOne {
	if i != nil {
		psuo.SetTotalProducts(*i)
	}
	return psuo
}

// AddTotalProducts adds i to the "total_products" field.
func (psuo *ProductStatisticsUpdateOne) AddTotalProducts(i int) *ProductStatisticsUpdateOne {
	psuo.mutation.AddTotalProducts(i)
	return psuo
}

// SetActiveProducts sets the "active_products" field.
func (psuo *ProductStatisticsUpdateOne) SetActiveProducts(i int) *ProductStatisticsUpdateOne {
	psuo.mutation.ResetActiveProducts()
	psuo.mutation.SetActiveProducts(i)
	return psuo
}

// SetNillableActiveProducts sets the "active_products" field if the given value is not nil.
func (psuo *ProductStatisticsUpdateOne) SetNillableActiveProducts(i *int) *ProductStatisticsUpdateOne {
	if i != nil {
		psuo.SetActiveProducts(*i)
	}
	return psuo
}

// AddActiveProducts adds i to the "active_products" field.
func (psuo *ProductStatisticsUpdateOne) AddActiveProducts(i int) *ProductStatisticsUpdateOne {
	psuo.mutation.AddActiveProducts(i)
	return psuo
}

// SetTotalStock sets the "total_stock" field.
func (psuo *ProductStatisticsUpdateOne) SetTotalStock(i int) *ProductStatisticsUpdateOne {
	psuo.mutation.ResetTotalStock()
	psuo.mutation.SetTotalStock(i)
	return psuo
}

// SetNillableTotalStock sets the "total_stock" field if the given value is not nil.
func (psuo *ProductStatisticsUpdateOne) SetNillableTotalStock(i *int) *ProductStatisticsUpdateOne {
	if i != nil {
		psuo.SetTotalStock(*i)
	}
	return psuo
}

// AddTotalStock adds i to the "total_stock" field.
func (psuo *ProductStatisticsUpdateOne) AddTotalStock(i int) *ProductStatisticsUpdateOne {
	psuo.mutation.AddTotalStock(i)
	return psuo
}

// SetTotalStockValue sets the "total_stock_value" field.
func (psuo *ProductStatisticsUpdateOne) SetTotalStockValue(d decimal.Decimal) *ProductStatisticsUpdateOne {
	psuo.mutation.SetTotalStockValue(d)
	return psuo
}

// SetNillableTotalStockValue sets the "total_stock_value" field if the given value is not nil.
func (psuo *ProductStatisticsUpdateOne) SetNillableTotalStockValue(d *decimal.Decimal) *ProductStatisticsUpdateOne {
	if d != nil {
		psuo.SetTotalStockValue(*d)
	}
	return psuo
}

// SetLowStockProducts sets the "low_stock_products" field.
func (psuo *ProductStatisticsUpdateOne) SetLowStockProducts(i int) *ProductStatisticsUpdateOne {
	psuo.mutation.ResetLowStockProducts()
	psuo.mutation.SetLowStockProducts(i)
	return psuo
}

// SetNillableLowStockProducts sets the "low_stock_products" field if the given value is not nil.
func (psuo *ProductStatisticsUpdateOne) SetNillableLowStockProducts(i *int) *ProductStatisticsUpdateOne {
	if i != nil {
		psuo.SetLowStockProducts(*i)
	}
	return psuo
}

// AddLowStockProducts adds i to the "low_stock_products" field.
func (psuo *ProductStatisticsUpdateOne) AddLowStockProducts(i int) *ProductStatisticsUpdateOne {
	psuo.mutation.AddLowStockProducts(i)
	return psuo
}

// SetTotalInQuantity sets the "total_in_quantity" field.
func (psuo *ProductStatisticsUpdateOne) SetTotalInQuantity(i int) *ProductStatisticsUpdateOne {
	psuo.mutation.ResetTotalInQuantity()
	psuo.mutation.SetTotalInQuantity(i)
	return psuo
}

// SetNillableTotalInQuantity sets the "total_in_quantity" field if the given value is not nil.
func (psuo *ProductStatisticsUpdateOne) SetNillableTotalInQuantity(i *int) *ProductStatisticsUpdateOne {
	if i != nil {
		psuo.SetTotalInQuantity(*i)
	}
	return psuo
}

// AddTotalInQuantity adds i to the "total_in_quantity" field.
func (psuo *ProductStatisticsUpdateOne) AddTotalInQuantity(i int) *ProductStatisticsUpdateOne {
	psuo.mutation.AddTotalInQuantity(i)
	return psuo
}

// SetTotalInAmount sets the "total_in_amount" field.
func (psuo *ProductStatisticsUpdateOne) SetTotalInAmount(d decimal.Decimal) *ProductStatisticsUpdateOne {
	psuo.mutation.SetTotalInAmount(d)
	return psuo
}

// SetNillableTotalInAmount sets the "total_in_amount" field if the given value is not nil.
func (psuo *ProductStatisticsUpdateOne) SetNillableTotalInAmount(d *decimal.Decimal) *ProductStatisticsUpdateOne {
	if d != nil {
		psuo.SetTotalInAmount(*d)
	}
	return psuo
}

// SetTotalOutQuantity sets the "total_out_quantity" field.
func (psuo *ProductStatisticsUpdateOne) SetTotalOutQuantity(i int) *ProductStatisticsUpdateOne {
	psuo.mutation.ResetTotalOutQuantity()
	psuo.mutation.SetTotalOutQuantity(i)
	return psuo
}

// SetNillableTotalOutQuantity sets the "total_out_quantity" field if the given value is not nil.
func (psuo *ProductStatisticsUpdateOne) SetNillableTotalOutQuantity(i *int) *ProductStatisticsUpdateOne {
	if i != nil {
		psuo.SetTotalOutQuantity(*i)
	}
	return psuo
}

// AddTotalOutQuantity adds i to the "total_out_quantity" field.
func (psuo *ProductStatisticsUpdateOne) AddTotalOutQuantity(i int) *ProductStatisticsUpdateOne {
	psuo.mutation.AddTotalOutQuantity(i)
	return psuo
}

// SetTotalOutAmount sets the "total_out_amount" field.
func (psuo *ProductStatisticsUpdateOne) SetTotalOutAmount(d decimal.Decimal) *ProductStatisticsUpdateOne {
	psuo.mutation.SetTotalOutAmount(d)
	return psuo
}

// SetNillableTotalOutAmount sets the "total_out_amount" field if the given value is not nil.
func (psuo *ProductStatisticsUpdateOne) SetNillableTotalOutAmount(d *decimal.Decimal) *ProductStatisticsUpdateOne {
	if d != nil {
		psuo.SetTotalOutAmount(*d)
	}
	return psuo
}

// SetTotalSalesAmount sets the "total_sales_amount" field.
func (psuo *ProductStatisticsUpdateOne) SetTotalSalesAmount(d decimal.Decimal) *ProductStatisticsUpdateOne {
	psuo.mutation.SetTotalSalesAmount(d)
	return psuo
}

// SetNillableTotalSalesAmount sets the "total_sales_amount" field if the given value is not nil.
func (psuo *ProductStatisticsUpdateOne) SetNillableTotalSalesAmount(d *decimal.Decimal) *ProductStatisticsUpdateOne {
	if d != nil {
		psuo.SetTotalSalesAmount(*d)
	}
	return psuo
}

// SetTotalSalesQuantity sets the "total_sales_quantity" field.
func (psuo *ProductStatisticsUpdateOne) SetTotalSalesQuantity(i int) *ProductStatisticsUpdateOne {
	psuo.mutation.ResetTotalSalesQuantity()
	psuo.mutation.SetTotalSalesQuantity(i)
	return psuo
}

// SetNillableTotalSalesQuantity sets the "total_sales_quantity" field if the given value is not nil.
func (psuo *ProductStatisticsUpdateOne) SetNillableTotalSalesQuantity(i *int) *ProductStatisticsUpdateOne {
	if i != nil {
		psuo.SetTotalSalesQuantity(*i)
	}
	return psuo
}

// AddTotalSalesQuantity adds i to the "total_sales_quantity" field.
func (psuo *ProductStatisticsUpdateOne) AddTotalSalesQuantity(i int) *ProductStatisticsUpdateOne {
	psuo.mutation.AddTotalSalesQuantity(i)
	return psuo
}

// Mutation returns the ProductStatisticsMutation object of the builder.
func (psuo *ProductStatisticsUpdateOne) Mutation() *ProductStatisticsMutation {
	return psuo.mutation
}

// Where appends a list predicates to the ProductStatisticsUpdate builder.
func (psuo *ProductStatisticsUpdateOne) Where(ps ...predicate.ProductStatistics) *ProductStatisticsUpdateOne {
	psuo.mutation.Where(ps...)
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *ProductStatisticsUpdateOne) Select(field string, fields ...string) *ProductStatisticsUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated ProductStatistics entity.
func (psuo *ProductStatisticsUpdateOne) Save(ctx context.Context) (*ProductStatistics, error) {
	return withHooks(ctx, psuo.sqlSave, psuo.mutation, psuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *ProductStatisticsUpdateOne) SaveX(ctx context.Context) *ProductStatistics {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *ProductStatisticsUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *ProductStatisticsUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (psuo *ProductStatisticsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProductStatisticsUpdateOne {
	psuo.modifiers = append(psuo.modifiers, modifiers...)
	return psuo
}

func (psuo *ProductStatisticsUpdateOne) sqlSave(ctx context.Context) (_node *ProductStatistics, err error) {
	_spec := sqlgraph.NewUpdateSpec(productstatistics.Table, productstatistics.Columns, sqlgraph.NewFieldSpec(productstatistics.FieldID, field.TypeInt))
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ProductStatistics.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productstatistics.FieldID)
		for _, f := range fields {
			if !productstatistics.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != productstatistics.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.UpdatedAt(); ok {
		_spec.SetField(productstatistics.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := psuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(productstatistics.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := psuo.mutation.TenantCode(); ok {
		_spec.SetField(productstatistics.FieldTenantCode, field.TypeString, value)
	}
	if value, ok := psuo.mutation.TotalProducts(); ok {
		_spec.SetField(productstatistics.FieldTotalProducts, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedTotalProducts(); ok {
		_spec.AddField(productstatistics.FieldTotalProducts, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.ActiveProducts(); ok {
		_spec.SetField(productstatistics.FieldActiveProducts, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedActiveProducts(); ok {
		_spec.AddField(productstatistics.FieldActiveProducts, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.TotalStock(); ok {
		_spec.SetField(productstatistics.FieldTotalStock, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedTotalStock(); ok {
		_spec.AddField(productstatistics.FieldTotalStock, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.TotalStockValue(); ok {
		_spec.SetField(productstatistics.FieldTotalStockValue, field.TypeOther, value)
	}
	if value, ok := psuo.mutation.LowStockProducts(); ok {
		_spec.SetField(productstatistics.FieldLowStockProducts, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedLowStockProducts(); ok {
		_spec.AddField(productstatistics.FieldLowStockProducts, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.TotalInQuantity(); ok {
		_spec.SetField(productstatistics.FieldTotalInQuantity, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedTotalInQuantity(); ok {
		_spec.AddField(productstatistics.FieldTotalInQuantity, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.TotalInAmount(); ok {
		_spec.SetField(productstatistics.FieldTotalInAmount, field.TypeOther, value)
	}
	if value, ok := psuo.mutation.TotalOutQuantity(); ok {
		_spec.SetField(productstatistics.FieldTotalOutQuantity, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedTotalOutQuantity(); ok {
		_spec.AddField(productstatistics.FieldTotalOutQuantity, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.TotalOutAmount(); ok {
		_spec.SetField(productstatistics.FieldTotalOutAmount, field.TypeOther, value)
	}
	if value, ok := psuo.mutation.TotalSalesAmount(); ok {
		_spec.SetField(productstatistics.FieldTotalSalesAmount, field.TypeOther, value)
	}
	if value, ok := psuo.mutation.TotalSalesQuantity(); ok {
		_spec.SetField(productstatistics.FieldTotalSalesQuantity, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedTotalSalesQuantity(); ok {
		_spec.AddField(productstatistics.FieldTotalSalesQuantity, field.TypeInt, value)
	}
	_spec.AddModifiers(psuo.modifiers...)
	_node = &ProductStatistics{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productstatistics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psuo.mutation.done = true
	return _node, nil
}
