// Code generated by ent, DO NOT EDIT.

package plan

import (
	"admin_backend/pkg/ent/generated/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldDeletedAt, v))
}

// TenantCode applies equality check predicate on the "tenant_code" field. It's identical to TenantCodeEQ.
func TenantCode(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldTenantCode, v))
}

// PlanID applies equality check predicate on the "plan_id" field. It's identical to PlanIDEQ.
func PlanID(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldPlanID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldDescription, v))
}

// Group applies equality check predicate on the "group" field. It's identical to GroupEQ.
func Group(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldGroup, v))
}

// CronSpec applies equality check predicate on the "cron_spec" field. It's identical to CronSpecEQ.
func CronSpec(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldCronSpec, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldStatus, v))
}

// PlanType applies equality check predicate on the "plan_type" field. It's identical to PlanTypeEQ.
func PlanType(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldPlanType, v))
}

// Priority applies equality check predicate on the "priority" field. It's identical to PriorityEQ.
func Priority(v int) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldPriority, v))
}

// Timeout applies equality check predicate on the "timeout" field. It's identical to TimeoutEQ.
func Timeout(v int) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldTimeout, v))
}

// RetryTimes applies equality check predicate on the "retry_times" field. It's identical to RetryTimesEQ.
func RetryTimes(v int) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldRetryTimes, v))
}

// RetryInterval applies equality check predicate on the "retry_interval" field. It's identical to RetryIntervalEQ.
func RetryInterval(v int) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldRetryInterval, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldEndTime, v))
}

// Command applies equality check predicate on the "command" field. It's identical to CommandEQ.
func Command(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldCommand, v))
}

// Params applies equality check predicate on the "params" field. It's identical to ParamsEQ.
func Params(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldParams, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...int64) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...int64) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Plan {
	return predicate.Plan(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Plan {
	return predicate.Plan(sql.FieldNotNull(FieldDeletedAt))
}

// TenantCodeEQ applies the EQ predicate on the "tenant_code" field.
func TenantCodeEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldTenantCode, v))
}

// TenantCodeNEQ applies the NEQ predicate on the "tenant_code" field.
func TenantCodeNEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldTenantCode, v))
}

// TenantCodeIn applies the In predicate on the "tenant_code" field.
func TenantCodeIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldTenantCode, vs...))
}

// TenantCodeNotIn applies the NotIn predicate on the "tenant_code" field.
func TenantCodeNotIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldTenantCode, vs...))
}

// TenantCodeGT applies the GT predicate on the "tenant_code" field.
func TenantCodeGT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldTenantCode, v))
}

// TenantCodeGTE applies the GTE predicate on the "tenant_code" field.
func TenantCodeGTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldTenantCode, v))
}

// TenantCodeLT applies the LT predicate on the "tenant_code" field.
func TenantCodeLT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldTenantCode, v))
}

// TenantCodeLTE applies the LTE predicate on the "tenant_code" field.
func TenantCodeLTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldTenantCode, v))
}

// TenantCodeContains applies the Contains predicate on the "tenant_code" field.
func TenantCodeContains(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContains(FieldTenantCode, v))
}

// TenantCodeHasPrefix applies the HasPrefix predicate on the "tenant_code" field.
func TenantCodeHasPrefix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasPrefix(FieldTenantCode, v))
}

// TenantCodeHasSuffix applies the HasSuffix predicate on the "tenant_code" field.
func TenantCodeHasSuffix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasSuffix(FieldTenantCode, v))
}

// TenantCodeEqualFold applies the EqualFold predicate on the "tenant_code" field.
func TenantCodeEqualFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEqualFold(FieldTenantCode, v))
}

// TenantCodeContainsFold applies the ContainsFold predicate on the "tenant_code" field.
func TenantCodeContainsFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContainsFold(FieldTenantCode, v))
}

// PlanIDEQ applies the EQ predicate on the "plan_id" field.
func PlanIDEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldPlanID, v))
}

// PlanIDNEQ applies the NEQ predicate on the "plan_id" field.
func PlanIDNEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldPlanID, v))
}

// PlanIDIn applies the In predicate on the "plan_id" field.
func PlanIDIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldPlanID, vs...))
}

// PlanIDNotIn applies the NotIn predicate on the "plan_id" field.
func PlanIDNotIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldPlanID, vs...))
}

// PlanIDGT applies the GT predicate on the "plan_id" field.
func PlanIDGT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldPlanID, v))
}

// PlanIDGTE applies the GTE predicate on the "plan_id" field.
func PlanIDGTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldPlanID, v))
}

// PlanIDLT applies the LT predicate on the "plan_id" field.
func PlanIDLT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldPlanID, v))
}

// PlanIDLTE applies the LTE predicate on the "plan_id" field.
func PlanIDLTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldPlanID, v))
}

// PlanIDContains applies the Contains predicate on the "plan_id" field.
func PlanIDContains(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContains(FieldPlanID, v))
}

// PlanIDHasPrefix applies the HasPrefix predicate on the "plan_id" field.
func PlanIDHasPrefix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasPrefix(FieldPlanID, v))
}

// PlanIDHasSuffix applies the HasSuffix predicate on the "plan_id" field.
func PlanIDHasSuffix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasSuffix(FieldPlanID, v))
}

// PlanIDEqualFold applies the EqualFold predicate on the "plan_id" field.
func PlanIDEqualFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEqualFold(FieldPlanID, v))
}

// PlanIDContainsFold applies the ContainsFold predicate on the "plan_id" field.
func PlanIDContainsFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContainsFold(FieldPlanID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Plan {
	return predicate.Plan(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Plan {
	return predicate.Plan(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContainsFold(FieldDescription, v))
}

// GroupEQ applies the EQ predicate on the "group" field.
func GroupEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldGroup, v))
}

// GroupNEQ applies the NEQ predicate on the "group" field.
func GroupNEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldGroup, v))
}

// GroupIn applies the In predicate on the "group" field.
func GroupIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldGroup, vs...))
}

// GroupNotIn applies the NotIn predicate on the "group" field.
func GroupNotIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldGroup, vs...))
}

// GroupGT applies the GT predicate on the "group" field.
func GroupGT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldGroup, v))
}

// GroupGTE applies the GTE predicate on the "group" field.
func GroupGTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldGroup, v))
}

// GroupLT applies the LT predicate on the "group" field.
func GroupLT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldGroup, v))
}

// GroupLTE applies the LTE predicate on the "group" field.
func GroupLTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldGroup, v))
}

// GroupContains applies the Contains predicate on the "group" field.
func GroupContains(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContains(FieldGroup, v))
}

// GroupHasPrefix applies the HasPrefix predicate on the "group" field.
func GroupHasPrefix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasPrefix(FieldGroup, v))
}

// GroupHasSuffix applies the HasSuffix predicate on the "group" field.
func GroupHasSuffix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasSuffix(FieldGroup, v))
}

// GroupEqualFold applies the EqualFold predicate on the "group" field.
func GroupEqualFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEqualFold(FieldGroup, v))
}

// GroupContainsFold applies the ContainsFold predicate on the "group" field.
func GroupContainsFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContainsFold(FieldGroup, v))
}

// CronSpecEQ applies the EQ predicate on the "cron_spec" field.
func CronSpecEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldCronSpec, v))
}

// CronSpecNEQ applies the NEQ predicate on the "cron_spec" field.
func CronSpecNEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldCronSpec, v))
}

// CronSpecIn applies the In predicate on the "cron_spec" field.
func CronSpecIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldCronSpec, vs...))
}

// CronSpecNotIn applies the NotIn predicate on the "cron_spec" field.
func CronSpecNotIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldCronSpec, vs...))
}

// CronSpecGT applies the GT predicate on the "cron_spec" field.
func CronSpecGT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldCronSpec, v))
}

// CronSpecGTE applies the GTE predicate on the "cron_spec" field.
func CronSpecGTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldCronSpec, v))
}

// CronSpecLT applies the LT predicate on the "cron_spec" field.
func CronSpecLT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldCronSpec, v))
}

// CronSpecLTE applies the LTE predicate on the "cron_spec" field.
func CronSpecLTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldCronSpec, v))
}

// CronSpecContains applies the Contains predicate on the "cron_spec" field.
func CronSpecContains(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContains(FieldCronSpec, v))
}

// CronSpecHasPrefix applies the HasPrefix predicate on the "cron_spec" field.
func CronSpecHasPrefix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasPrefix(FieldCronSpec, v))
}

// CronSpecHasSuffix applies the HasSuffix predicate on the "cron_spec" field.
func CronSpecHasSuffix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasSuffix(FieldCronSpec, v))
}

// CronSpecEqualFold applies the EqualFold predicate on the "cron_spec" field.
func CronSpecEqualFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEqualFold(FieldCronSpec, v))
}

// CronSpecContainsFold applies the ContainsFold predicate on the "cron_spec" field.
func CronSpecContainsFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContainsFold(FieldCronSpec, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldStatus, v))
}

// PlanTypeEQ applies the EQ predicate on the "plan_type" field.
func PlanTypeEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldPlanType, v))
}

// PlanTypeNEQ applies the NEQ predicate on the "plan_type" field.
func PlanTypeNEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldPlanType, v))
}

// PlanTypeIn applies the In predicate on the "plan_type" field.
func PlanTypeIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldPlanType, vs...))
}

// PlanTypeNotIn applies the NotIn predicate on the "plan_type" field.
func PlanTypeNotIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldPlanType, vs...))
}

// PlanTypeGT applies the GT predicate on the "plan_type" field.
func PlanTypeGT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldPlanType, v))
}

// PlanTypeGTE applies the GTE predicate on the "plan_type" field.
func PlanTypeGTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldPlanType, v))
}

// PlanTypeLT applies the LT predicate on the "plan_type" field.
func PlanTypeLT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldPlanType, v))
}

// PlanTypeLTE applies the LTE predicate on the "plan_type" field.
func PlanTypeLTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldPlanType, v))
}

// PlanTypeContains applies the Contains predicate on the "plan_type" field.
func PlanTypeContains(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContains(FieldPlanType, v))
}

// PlanTypeHasPrefix applies the HasPrefix predicate on the "plan_type" field.
func PlanTypeHasPrefix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasPrefix(FieldPlanType, v))
}

// PlanTypeHasSuffix applies the HasSuffix predicate on the "plan_type" field.
func PlanTypeHasSuffix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasSuffix(FieldPlanType, v))
}

// PlanTypeEqualFold applies the EqualFold predicate on the "plan_type" field.
func PlanTypeEqualFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEqualFold(FieldPlanType, v))
}

// PlanTypeContainsFold applies the ContainsFold predicate on the "plan_type" field.
func PlanTypeContainsFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContainsFold(FieldPlanType, v))
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v int) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldPriority, v))
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v int) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldPriority, v))
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...int) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldPriority, vs...))
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...int) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldPriority, vs...))
}

// PriorityGT applies the GT predicate on the "priority" field.
func PriorityGT(v int) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldPriority, v))
}

// PriorityGTE applies the GTE predicate on the "priority" field.
func PriorityGTE(v int) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldPriority, v))
}

// PriorityLT applies the LT predicate on the "priority" field.
func PriorityLT(v int) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldPriority, v))
}

// PriorityLTE applies the LTE predicate on the "priority" field.
func PriorityLTE(v int) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldPriority, v))
}

// TimeoutEQ applies the EQ predicate on the "timeout" field.
func TimeoutEQ(v int) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldTimeout, v))
}

// TimeoutNEQ applies the NEQ predicate on the "timeout" field.
func TimeoutNEQ(v int) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldTimeout, v))
}

// TimeoutIn applies the In predicate on the "timeout" field.
func TimeoutIn(vs ...int) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldTimeout, vs...))
}

// TimeoutNotIn applies the NotIn predicate on the "timeout" field.
func TimeoutNotIn(vs ...int) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldTimeout, vs...))
}

// TimeoutGT applies the GT predicate on the "timeout" field.
func TimeoutGT(v int) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldTimeout, v))
}

// TimeoutGTE applies the GTE predicate on the "timeout" field.
func TimeoutGTE(v int) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldTimeout, v))
}

// TimeoutLT applies the LT predicate on the "timeout" field.
func TimeoutLT(v int) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldTimeout, v))
}

// TimeoutLTE applies the LTE predicate on the "timeout" field.
func TimeoutLTE(v int) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldTimeout, v))
}

// RetryTimesEQ applies the EQ predicate on the "retry_times" field.
func RetryTimesEQ(v int) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldRetryTimes, v))
}

// RetryTimesNEQ applies the NEQ predicate on the "retry_times" field.
func RetryTimesNEQ(v int) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldRetryTimes, v))
}

// RetryTimesIn applies the In predicate on the "retry_times" field.
func RetryTimesIn(vs ...int) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldRetryTimes, vs...))
}

// RetryTimesNotIn applies the NotIn predicate on the "retry_times" field.
func RetryTimesNotIn(vs ...int) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldRetryTimes, vs...))
}

// RetryTimesGT applies the GT predicate on the "retry_times" field.
func RetryTimesGT(v int) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldRetryTimes, v))
}

// RetryTimesGTE applies the GTE predicate on the "retry_times" field.
func RetryTimesGTE(v int) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldRetryTimes, v))
}

// RetryTimesLT applies the LT predicate on the "retry_times" field.
func RetryTimesLT(v int) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldRetryTimes, v))
}

// RetryTimesLTE applies the LTE predicate on the "retry_times" field.
func RetryTimesLTE(v int) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldRetryTimes, v))
}

// RetryIntervalEQ applies the EQ predicate on the "retry_interval" field.
func RetryIntervalEQ(v int) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldRetryInterval, v))
}

// RetryIntervalNEQ applies the NEQ predicate on the "retry_interval" field.
func RetryIntervalNEQ(v int) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldRetryInterval, v))
}

// RetryIntervalIn applies the In predicate on the "retry_interval" field.
func RetryIntervalIn(vs ...int) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldRetryInterval, vs...))
}

// RetryIntervalNotIn applies the NotIn predicate on the "retry_interval" field.
func RetryIntervalNotIn(vs ...int) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldRetryInterval, vs...))
}

// RetryIntervalGT applies the GT predicate on the "retry_interval" field.
func RetryIntervalGT(v int) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldRetryInterval, v))
}

// RetryIntervalGTE applies the GTE predicate on the "retry_interval" field.
func RetryIntervalGTE(v int) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldRetryInterval, v))
}

// RetryIntervalLT applies the LT predicate on the "retry_interval" field.
func RetryIntervalLT(v int) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldRetryInterval, v))
}

// RetryIntervalLTE applies the LTE predicate on the "retry_interval" field.
func RetryIntervalLTE(v int) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldRetryInterval, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...int64) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...int64) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldStartTime, v))
}

// StartTimeIsNil applies the IsNil predicate on the "start_time" field.
func StartTimeIsNil() predicate.Plan {
	return predicate.Plan(sql.FieldIsNull(FieldStartTime))
}

// StartTimeNotNil applies the NotNil predicate on the "start_time" field.
func StartTimeNotNil() predicate.Plan {
	return predicate.Plan(sql.FieldNotNull(FieldStartTime))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...int64) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...int64) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v int64) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldEndTime, v))
}

// EndTimeIsNil applies the IsNil predicate on the "end_time" field.
func EndTimeIsNil() predicate.Plan {
	return predicate.Plan(sql.FieldIsNull(FieldEndTime))
}

// EndTimeNotNil applies the NotNil predicate on the "end_time" field.
func EndTimeNotNil() predicate.Plan {
	return predicate.Plan(sql.FieldNotNull(FieldEndTime))
}

// CommandEQ applies the EQ predicate on the "command" field.
func CommandEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldCommand, v))
}

// CommandNEQ applies the NEQ predicate on the "command" field.
func CommandNEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldCommand, v))
}

// CommandIn applies the In predicate on the "command" field.
func CommandIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldCommand, vs...))
}

// CommandNotIn applies the NotIn predicate on the "command" field.
func CommandNotIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldCommand, vs...))
}

// CommandGT applies the GT predicate on the "command" field.
func CommandGT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldCommand, v))
}

// CommandGTE applies the GTE predicate on the "command" field.
func CommandGTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldCommand, v))
}

// CommandLT applies the LT predicate on the "command" field.
func CommandLT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldCommand, v))
}

// CommandLTE applies the LTE predicate on the "command" field.
func CommandLTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldCommand, v))
}

// CommandContains applies the Contains predicate on the "command" field.
func CommandContains(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContains(FieldCommand, v))
}

// CommandHasPrefix applies the HasPrefix predicate on the "command" field.
func CommandHasPrefix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasPrefix(FieldCommand, v))
}

// CommandHasSuffix applies the HasSuffix predicate on the "command" field.
func CommandHasSuffix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasSuffix(FieldCommand, v))
}

// CommandEqualFold applies the EqualFold predicate on the "command" field.
func CommandEqualFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEqualFold(FieldCommand, v))
}

// CommandContainsFold applies the ContainsFold predicate on the "command" field.
func CommandContainsFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContainsFold(FieldCommand, v))
}

// ParamsEQ applies the EQ predicate on the "params" field.
func ParamsEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldParams, v))
}

// ParamsNEQ applies the NEQ predicate on the "params" field.
func ParamsNEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldParams, v))
}

// ParamsIn applies the In predicate on the "params" field.
func ParamsIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldParams, vs...))
}

// ParamsNotIn applies the NotIn predicate on the "params" field.
func ParamsNotIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldParams, vs...))
}

// ParamsGT applies the GT predicate on the "params" field.
func ParamsGT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldParams, v))
}

// ParamsGTE applies the GTE predicate on the "params" field.
func ParamsGTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldParams, v))
}

// ParamsLT applies the LT predicate on the "params" field.
func ParamsLT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldParams, v))
}

// ParamsLTE applies the LTE predicate on the "params" field.
func ParamsLTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldParams, v))
}

// ParamsContains applies the Contains predicate on the "params" field.
func ParamsContains(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContains(FieldParams, v))
}

// ParamsHasPrefix applies the HasPrefix predicate on the "params" field.
func ParamsHasPrefix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasPrefix(FieldParams, v))
}

// ParamsHasSuffix applies the HasSuffix predicate on the "params" field.
func ParamsHasSuffix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasSuffix(FieldParams, v))
}

// ParamsIsNil applies the IsNil predicate on the "params" field.
func ParamsIsNil() predicate.Plan {
	return predicate.Plan(sql.FieldIsNull(FieldParams))
}

// ParamsNotNil applies the NotNil predicate on the "params" field.
func ParamsNotNil() predicate.Plan {
	return predicate.Plan(sql.FieldNotNull(FieldParams))
}

// ParamsEqualFold applies the EqualFold predicate on the "params" field.
func ParamsEqualFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEqualFold(FieldParams, v))
}

// ParamsContainsFold applies the ContainsFold predicate on the "params" field.
func ParamsContainsFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContainsFold(FieldParams, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Plan) predicate.Plan {
	return predicate.Plan(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Plan) predicate.Plan {
	return predicate.Plan(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Plan) predicate.Plan {
	return predicate.Plan(sql.NotPredicates(p))
}
