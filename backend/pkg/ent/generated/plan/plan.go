// Code generated by ent, DO NOT EDIT.

package plan

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the plan type in the database.
	Label = "plan"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldTenantCode holds the string denoting the tenant_code field in the database.
	FieldTenantCode = "tenant_code"
	// FieldPlanID holds the string denoting the plan_id field in the database.
	FieldPlanID = "plan_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldGroup holds the string denoting the group field in the database.
	FieldGroup = "group"
	// FieldCronSpec holds the string denoting the cron_spec field in the database.
	FieldCronSpec = "cron_spec"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPlanType holds the string denoting the plan_type field in the database.
	FieldPlanType = "plan_type"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// FieldTimeout holds the string denoting the timeout field in the database.
	FieldTimeout = "timeout"
	// FieldRetryTimes holds the string denoting the retry_times field in the database.
	FieldRetryTimes = "retry_times"
	// FieldRetryInterval holds the string denoting the retry_interval field in the database.
	FieldRetryInterval = "retry_interval"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldCommand holds the string denoting the command field in the database.
	FieldCommand = "command"
	// FieldParams holds the string denoting the params field in the database.
	FieldParams = "params"
	// Table holds the table name of the plan in the database.
	Table = "sys_plans"
)

// Columns holds all SQL columns for plan fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldTenantCode,
	FieldPlanID,
	FieldName,
	FieldDescription,
	FieldGroup,
	FieldCronSpec,
	FieldStatus,
	FieldPlanType,
	FieldPriority,
	FieldTimeout,
	FieldRetryTimes,
	FieldRetryInterval,
	FieldStartTime,
	FieldEndTime,
	FieldCommand,
	FieldParams,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt int64
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt int64
	// DefaultGroup holds the default value on creation for the "group" field.
	DefaultGroup string
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
	// DefaultPriority holds the default value on creation for the "priority" field.
	DefaultPriority int
	// DefaultTimeout holds the default value on creation for the "timeout" field.
	DefaultTimeout int
	// DefaultRetryTimes holds the default value on creation for the "retry_times" field.
	DefaultRetryTimes int
	// DefaultRetryInterval holds the default value on creation for the "retry_interval" field.
	DefaultRetryInterval int
)

// OrderOption defines the ordering options for the Plan queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByTenantCode orders the results by the tenant_code field.
func ByTenantCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantCode, opts...).ToFunc()
}

// ByPlanID orders the results by the plan_id field.
func ByPlanID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlanID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByGroup orders the results by the group field.
func ByGroup(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroup, opts...).ToFunc()
}

// ByCronSpec orders the results by the cron_spec field.
func ByCronSpec(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCronSpec, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPlanType orders the results by the plan_type field.
func ByPlanType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlanType, opts...).ToFunc()
}

// ByPriority orders the results by the priority field.
func ByPriority(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriority, opts...).ToFunc()
}

// ByTimeout orders the results by the timeout field.
func ByTimeout(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeout, opts...).ToFunc()
}

// ByRetryTimes orders the results by the retry_times field.
func ByRetryTimes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetryTimes, opts...).ToFunc()
}

// ByRetryInterval orders the results by the retry_interval field.
func ByRetryInterval(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetryInterval, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByCommand orders the results by the command field.
func ByCommand(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommand, opts...).ToFunc()
}

// ByParams orders the results by the params field.
func ByParams(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParams, opts...).ToFunc()
}
