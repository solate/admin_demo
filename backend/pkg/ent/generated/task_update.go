// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/predicate"
	"admin_backend/pkg/ent/generated/task"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks     []Hook
	mutation  *TaskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TaskUpdate) SetUpdatedAt(i int64) *TaskUpdate {
	tu.mutation.ResetUpdatedAt()
	tu.mutation.SetUpdatedAt(i)
	return tu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableUpdatedAt(i *int64) *TaskUpdate {
	if i != nil {
		tu.SetUpdatedAt(*i)
	}
	return tu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tu *TaskUpdate) AddUpdatedAt(i int64) *TaskUpdate {
	tu.mutation.AddUpdatedAt(i)
	return tu
}

// SetDeletedAt sets the "deleted_at" field.
func (tu *TaskUpdate) SetDeletedAt(i int64) *TaskUpdate {
	tu.mutation.ResetDeletedAt()
	tu.mutation.SetDeletedAt(i)
	return tu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDeletedAt(i *int64) *TaskUpdate {
	if i != nil {
		tu.SetDeletedAt(*i)
	}
	return tu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (tu *TaskUpdate) AddDeletedAt(i int64) *TaskUpdate {
	tu.mutation.AddDeletedAt(i)
	return tu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tu *TaskUpdate) ClearDeletedAt() *TaskUpdate {
	tu.mutation.ClearDeletedAt()
	return tu
}

// SetTenantCode sets the "tenant_code" field.
func (tu *TaskUpdate) SetTenantCode(s string) *TaskUpdate {
	tu.mutation.SetTenantCode(s)
	return tu
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTenantCode(s *string) *TaskUpdate {
	if s != nil {
		tu.SetTenantCode(*s)
	}
	return tu
}

// SetTaskID sets the "task_id" field.
func (tu *TaskUpdate) SetTaskID(s string) *TaskUpdate {
	tu.mutation.SetTaskID(s)
	return tu
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTaskID(s *string) *TaskUpdate {
	if s != nil {
		tu.SetTaskID(*s)
	}
	return tu
}

// SetName sets the "name" field.
func (tu *TaskUpdate) SetName(s string) *TaskUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableName(s *string) *TaskUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetPlanID sets the "plan_id" field.
func (tu *TaskUpdate) SetPlanID(s string) *TaskUpdate {
	tu.mutation.SetPlanID(s)
	return tu
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillablePlanID(s *string) *TaskUpdate {
	if s != nil {
		tu.SetPlanID(*s)
	}
	return tu
}

// SetPlanType sets the "plan_type" field.
func (tu *TaskUpdate) SetPlanType(s string) *TaskUpdate {
	tu.mutation.SetPlanType(s)
	return tu
}

// SetNillablePlanType sets the "plan_type" field if the given value is not nil.
func (tu *TaskUpdate) SetNillablePlanType(s *string) *TaskUpdate {
	if s != nil {
		tu.SetPlanType(*s)
	}
	return tu
}

// SetGroup sets the "group" field.
func (tu *TaskUpdate) SetGroup(s string) *TaskUpdate {
	tu.mutation.SetGroup(s)
	return tu
}

// SetNillableGroup sets the "group" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableGroup(s *string) *TaskUpdate {
	if s != nil {
		tu.SetGroup(*s)
	}
	return tu
}

// SetPriority sets the "priority" field.
func (tu *TaskUpdate) SetPriority(i int) *TaskUpdate {
	tu.mutation.ResetPriority()
	tu.mutation.SetPriority(i)
	return tu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tu *TaskUpdate) SetNillablePriority(i *int) *TaskUpdate {
	if i != nil {
		tu.SetPriority(*i)
	}
	return tu
}

// AddPriority adds i to the "priority" field.
func (tu *TaskUpdate) AddPriority(i int) *TaskUpdate {
	tu.mutation.AddPriority(i)
	return tu
}

// SetStatus sets the "status" field.
func (tu *TaskUpdate) SetStatus(s string) *TaskUpdate {
	tu.mutation.SetStatus(s)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableStatus(s *string) *TaskUpdate {
	if s != nil {
		tu.SetStatus(*s)
	}
	return tu
}

// SetPlannedTime sets the "planned_time" field.
func (tu *TaskUpdate) SetPlannedTime(i int64) *TaskUpdate {
	tu.mutation.ResetPlannedTime()
	tu.mutation.SetPlannedTime(i)
	return tu
}

// SetNillablePlannedTime sets the "planned_time" field if the given value is not nil.
func (tu *TaskUpdate) SetNillablePlannedTime(i *int64) *TaskUpdate {
	if i != nil {
		tu.SetPlannedTime(*i)
	}
	return tu
}

// AddPlannedTime adds i to the "planned_time" field.
func (tu *TaskUpdate) AddPlannedTime(i int64) *TaskUpdate {
	tu.mutation.AddPlannedTime(i)
	return tu
}

// SetStartTime sets the "start_time" field.
func (tu *TaskUpdate) SetStartTime(i int64) *TaskUpdate {
	tu.mutation.ResetStartTime()
	tu.mutation.SetStartTime(i)
	return tu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableStartTime(i *int64) *TaskUpdate {
	if i != nil {
		tu.SetStartTime(*i)
	}
	return tu
}

// AddStartTime adds i to the "start_time" field.
func (tu *TaskUpdate) AddStartTime(i int64) *TaskUpdate {
	tu.mutation.AddStartTime(i)
	return tu
}

// ClearStartTime clears the value of the "start_time" field.
func (tu *TaskUpdate) ClearStartTime() *TaskUpdate {
	tu.mutation.ClearStartTime()
	return tu
}

// SetEndTime sets the "end_time" field.
func (tu *TaskUpdate) SetEndTime(i int64) *TaskUpdate {
	tu.mutation.ResetEndTime()
	tu.mutation.SetEndTime(i)
	return tu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableEndTime(i *int64) *TaskUpdate {
	if i != nil {
		tu.SetEndTime(*i)
	}
	return tu
}

// AddEndTime adds i to the "end_time" field.
func (tu *TaskUpdate) AddEndTime(i int64) *TaskUpdate {
	tu.mutation.AddEndTime(i)
	return tu
}

// ClearEndTime clears the value of the "end_time" field.
func (tu *TaskUpdate) ClearEndTime() *TaskUpdate {
	tu.mutation.ClearEndTime()
	return tu
}

// SetDuration sets the "duration" field.
func (tu *TaskUpdate) SetDuration(i int) *TaskUpdate {
	tu.mutation.ResetDuration()
	tu.mutation.SetDuration(i)
	return tu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDuration(i *int) *TaskUpdate {
	if i != nil {
		tu.SetDuration(*i)
	}
	return tu
}

// AddDuration adds i to the "duration" field.
func (tu *TaskUpdate) AddDuration(i int) *TaskUpdate {
	tu.mutation.AddDuration(i)
	return tu
}

// ClearDuration clears the value of the "duration" field.
func (tu *TaskUpdate) ClearDuration() *TaskUpdate {
	tu.mutation.ClearDuration()
	return tu
}

// SetResult sets the "result" field.
func (tu *TaskUpdate) SetResult(s string) *TaskUpdate {
	tu.mutation.SetResult(s)
	return tu
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableResult(s *string) *TaskUpdate {
	if s != nil {
		tu.SetResult(*s)
	}
	return tu
}

// ClearResult clears the value of the "result" field.
func (tu *TaskUpdate) ClearResult() *TaskUpdate {
	tu.mutation.ClearResult()
	return tu
}

// SetError sets the "error" field.
func (tu *TaskUpdate) SetError(s string) *TaskUpdate {
	tu.mutation.SetError(s)
	return tu
}

// SetNillableError sets the "error" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableError(s *string) *TaskUpdate {
	if s != nil {
		tu.SetError(*s)
	}
	return tu
}

// ClearError clears the value of the "error" field.
func (tu *TaskUpdate) ClearError() *TaskUpdate {
	tu.mutation.ClearError()
	return tu
}

// SetRetryCount sets the "retry_count" field.
func (tu *TaskUpdate) SetRetryCount(i int) *TaskUpdate {
	tu.mutation.ResetRetryCount()
	tu.mutation.SetRetryCount(i)
	return tu
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableRetryCount(i *int) *TaskUpdate {
	if i != nil {
		tu.SetRetryCount(*i)
	}
	return tu
}

// AddRetryCount adds i to the "retry_count" field.
func (tu *TaskUpdate) AddRetryCount(i int) *TaskUpdate {
	tu.mutation.AddRetryCount(i)
	return tu
}

// SetNextRetryTime sets the "next_retry_time" field.
func (tu *TaskUpdate) SetNextRetryTime(i int64) *TaskUpdate {
	tu.mutation.ResetNextRetryTime()
	tu.mutation.SetNextRetryTime(i)
	return tu
}

// SetNillableNextRetryTime sets the "next_retry_time" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableNextRetryTime(i *int64) *TaskUpdate {
	if i != nil {
		tu.SetNextRetryTime(*i)
	}
	return tu
}

// AddNextRetryTime adds i to the "next_retry_time" field.
func (tu *TaskUpdate) AddNextRetryTime(i int64) *TaskUpdate {
	tu.mutation.AddNextRetryTime(i)
	return tu
}

// ClearNextRetryTime clears the value of the "next_retry_time" field.
func (tu *TaskUpdate) ClearNextRetryTime() *TaskUpdate {
	tu.mutation.ClearNextRetryTime()
	return tu
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TaskUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TaskUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(task.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.DeletedAt(); ok {
		_spec.SetField(task.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(task.FieldDeletedAt, field.TypeInt64, value)
	}
	if tu.mutation.DeletedAtCleared() {
		_spec.ClearField(task.FieldDeletedAt, field.TypeInt64)
	}
	if value, ok := tu.mutation.TenantCode(); ok {
		_spec.SetField(task.FieldTenantCode, field.TypeString, value)
	}
	if value, ok := tu.mutation.TaskID(); ok {
		_spec.SetField(task.FieldTaskID, field.TypeString, value)
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(task.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.PlanID(); ok {
		_spec.SetField(task.FieldPlanID, field.TypeString, value)
	}
	if value, ok := tu.mutation.PlanType(); ok {
		_spec.SetField(task.FieldPlanType, field.TypeString, value)
	}
	if value, ok := tu.mutation.Group(); ok {
		_spec.SetField(task.FieldGroup, field.TypeString, value)
	}
	if value, ok := tu.mutation.Priority(); ok {
		_spec.SetField(task.FieldPriority, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedPriority(); ok {
		_spec.AddField(task.FieldPriority, field.TypeInt, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeString, value)
	}
	if value, ok := tu.mutation.PlannedTime(); ok {
		_spec.SetField(task.FieldPlannedTime, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedPlannedTime(); ok {
		_spec.AddField(task.FieldPlannedTime, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.StartTime(); ok {
		_spec.SetField(task.FieldStartTime, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedStartTime(); ok {
		_spec.AddField(task.FieldStartTime, field.TypeInt64, value)
	}
	if tu.mutation.StartTimeCleared() {
		_spec.ClearField(task.FieldStartTime, field.TypeInt64)
	}
	if value, ok := tu.mutation.EndTime(); ok {
		_spec.SetField(task.FieldEndTime, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedEndTime(); ok {
		_spec.AddField(task.FieldEndTime, field.TypeInt64, value)
	}
	if tu.mutation.EndTimeCleared() {
		_spec.ClearField(task.FieldEndTime, field.TypeInt64)
	}
	if value, ok := tu.mutation.Duration(); ok {
		_spec.SetField(task.FieldDuration, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedDuration(); ok {
		_spec.AddField(task.FieldDuration, field.TypeInt, value)
	}
	if tu.mutation.DurationCleared() {
		_spec.ClearField(task.FieldDuration, field.TypeInt)
	}
	if value, ok := tu.mutation.Result(); ok {
		_spec.SetField(task.FieldResult, field.TypeString, value)
	}
	if tu.mutation.ResultCleared() {
		_spec.ClearField(task.FieldResult, field.TypeString)
	}
	if value, ok := tu.mutation.Error(); ok {
		_spec.SetField(task.FieldError, field.TypeString, value)
	}
	if tu.mutation.ErrorCleared() {
		_spec.ClearField(task.FieldError, field.TypeString)
	}
	if value, ok := tu.mutation.RetryCount(); ok {
		_spec.SetField(task.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedRetryCount(); ok {
		_spec.AddField(task.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := tu.mutation.NextRetryTime(); ok {
		_spec.SetField(task.FieldNextRetryTime, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedNextRetryTime(); ok {
		_spec.AddField(task.FieldNextRetryTime, field.TypeInt64, value)
	}
	if tu.mutation.NextRetryTimeCleared() {
		_spec.ClearField(task.FieldNextRetryTime, field.TypeInt64)
	}
	_spec.AddModifiers(tu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TaskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TaskUpdateOne) SetUpdatedAt(i int64) *TaskUpdateOne {
	tuo.mutation.ResetUpdatedAt()
	tuo.mutation.SetUpdatedAt(i)
	return tuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableUpdatedAt(i *int64) *TaskUpdateOne {
	if i != nil {
		tuo.SetUpdatedAt(*i)
	}
	return tuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tuo *TaskUpdateOne) AddUpdatedAt(i int64) *TaskUpdateOne {
	tuo.mutation.AddUpdatedAt(i)
	return tuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tuo *TaskUpdateOne) SetDeletedAt(i int64) *TaskUpdateOne {
	tuo.mutation.ResetDeletedAt()
	tuo.mutation.SetDeletedAt(i)
	return tuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDeletedAt(i *int64) *TaskUpdateOne {
	if i != nil {
		tuo.SetDeletedAt(*i)
	}
	return tuo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (tuo *TaskUpdateOne) AddDeletedAt(i int64) *TaskUpdateOne {
	tuo.mutation.AddDeletedAt(i)
	return tuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tuo *TaskUpdateOne) ClearDeletedAt() *TaskUpdateOne {
	tuo.mutation.ClearDeletedAt()
	return tuo
}

// SetTenantCode sets the "tenant_code" field.
func (tuo *TaskUpdateOne) SetTenantCode(s string) *TaskUpdateOne {
	tuo.mutation.SetTenantCode(s)
	return tuo
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTenantCode(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetTenantCode(*s)
	}
	return tuo
}

// SetTaskID sets the "task_id" field.
func (tuo *TaskUpdateOne) SetTaskID(s string) *TaskUpdateOne {
	tuo.mutation.SetTaskID(s)
	return tuo
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTaskID(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetTaskID(*s)
	}
	return tuo
}

// SetName sets the "name" field.
func (tuo *TaskUpdateOne) SetName(s string) *TaskUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableName(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetPlanID sets the "plan_id" field.
func (tuo *TaskUpdateOne) SetPlanID(s string) *TaskUpdateOne {
	tuo.mutation.SetPlanID(s)
	return tuo
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillablePlanID(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetPlanID(*s)
	}
	return tuo
}

// SetPlanType sets the "plan_type" field.
func (tuo *TaskUpdateOne) SetPlanType(s string) *TaskUpdateOne {
	tuo.mutation.SetPlanType(s)
	return tuo
}

// SetNillablePlanType sets the "plan_type" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillablePlanType(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetPlanType(*s)
	}
	return tuo
}

// SetGroup sets the "group" field.
func (tuo *TaskUpdateOne) SetGroup(s string) *TaskUpdateOne {
	tuo.mutation.SetGroup(s)
	return tuo
}

// SetNillableGroup sets the "group" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableGroup(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetGroup(*s)
	}
	return tuo
}

// SetPriority sets the "priority" field.
func (tuo *TaskUpdateOne) SetPriority(i int) *TaskUpdateOne {
	tuo.mutation.ResetPriority()
	tuo.mutation.SetPriority(i)
	return tuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillablePriority(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetPriority(*i)
	}
	return tuo
}

// AddPriority adds i to the "priority" field.
func (tuo *TaskUpdateOne) AddPriority(i int) *TaskUpdateOne {
	tuo.mutation.AddPriority(i)
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TaskUpdateOne) SetStatus(s string) *TaskUpdateOne {
	tuo.mutation.SetStatus(s)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableStatus(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetStatus(*s)
	}
	return tuo
}

// SetPlannedTime sets the "planned_time" field.
func (tuo *TaskUpdateOne) SetPlannedTime(i int64) *TaskUpdateOne {
	tuo.mutation.ResetPlannedTime()
	tuo.mutation.SetPlannedTime(i)
	return tuo
}

// SetNillablePlannedTime sets the "planned_time" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillablePlannedTime(i *int64) *TaskUpdateOne {
	if i != nil {
		tuo.SetPlannedTime(*i)
	}
	return tuo
}

// AddPlannedTime adds i to the "planned_time" field.
func (tuo *TaskUpdateOne) AddPlannedTime(i int64) *TaskUpdateOne {
	tuo.mutation.AddPlannedTime(i)
	return tuo
}

// SetStartTime sets the "start_time" field.
func (tuo *TaskUpdateOne) SetStartTime(i int64) *TaskUpdateOne {
	tuo.mutation.ResetStartTime()
	tuo.mutation.SetStartTime(i)
	return tuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableStartTime(i *int64) *TaskUpdateOne {
	if i != nil {
		tuo.SetStartTime(*i)
	}
	return tuo
}

// AddStartTime adds i to the "start_time" field.
func (tuo *TaskUpdateOne) AddStartTime(i int64) *TaskUpdateOne {
	tuo.mutation.AddStartTime(i)
	return tuo
}

// ClearStartTime clears the value of the "start_time" field.
func (tuo *TaskUpdateOne) ClearStartTime() *TaskUpdateOne {
	tuo.mutation.ClearStartTime()
	return tuo
}

// SetEndTime sets the "end_time" field.
func (tuo *TaskUpdateOne) SetEndTime(i int64) *TaskUpdateOne {
	tuo.mutation.ResetEndTime()
	tuo.mutation.SetEndTime(i)
	return tuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableEndTime(i *int64) *TaskUpdateOne {
	if i != nil {
		tuo.SetEndTime(*i)
	}
	return tuo
}

// AddEndTime adds i to the "end_time" field.
func (tuo *TaskUpdateOne) AddEndTime(i int64) *TaskUpdateOne {
	tuo.mutation.AddEndTime(i)
	return tuo
}

// ClearEndTime clears the value of the "end_time" field.
func (tuo *TaskUpdateOne) ClearEndTime() *TaskUpdateOne {
	tuo.mutation.ClearEndTime()
	return tuo
}

// SetDuration sets the "duration" field.
func (tuo *TaskUpdateOne) SetDuration(i int) *TaskUpdateOne {
	tuo.mutation.ResetDuration()
	tuo.mutation.SetDuration(i)
	return tuo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDuration(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetDuration(*i)
	}
	return tuo
}

// AddDuration adds i to the "duration" field.
func (tuo *TaskUpdateOne) AddDuration(i int) *TaskUpdateOne {
	tuo.mutation.AddDuration(i)
	return tuo
}

// ClearDuration clears the value of the "duration" field.
func (tuo *TaskUpdateOne) ClearDuration() *TaskUpdateOne {
	tuo.mutation.ClearDuration()
	return tuo
}

// SetResult sets the "result" field.
func (tuo *TaskUpdateOne) SetResult(s string) *TaskUpdateOne {
	tuo.mutation.SetResult(s)
	return tuo
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableResult(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetResult(*s)
	}
	return tuo
}

// ClearResult clears the value of the "result" field.
func (tuo *TaskUpdateOne) ClearResult() *TaskUpdateOne {
	tuo.mutation.ClearResult()
	return tuo
}

// SetError sets the "error" field.
func (tuo *TaskUpdateOne) SetError(s string) *TaskUpdateOne {
	tuo.mutation.SetError(s)
	return tuo
}

// SetNillableError sets the "error" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableError(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetError(*s)
	}
	return tuo
}

// ClearError clears the value of the "error" field.
func (tuo *TaskUpdateOne) ClearError() *TaskUpdateOne {
	tuo.mutation.ClearError()
	return tuo
}

// SetRetryCount sets the "retry_count" field.
func (tuo *TaskUpdateOne) SetRetryCount(i int) *TaskUpdateOne {
	tuo.mutation.ResetRetryCount()
	tuo.mutation.SetRetryCount(i)
	return tuo
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableRetryCount(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetRetryCount(*i)
	}
	return tuo
}

// AddRetryCount adds i to the "retry_count" field.
func (tuo *TaskUpdateOne) AddRetryCount(i int) *TaskUpdateOne {
	tuo.mutation.AddRetryCount(i)
	return tuo
}

// SetNextRetryTime sets the "next_retry_time" field.
func (tuo *TaskUpdateOne) SetNextRetryTime(i int64) *TaskUpdateOne {
	tuo.mutation.ResetNextRetryTime()
	tuo.mutation.SetNextRetryTime(i)
	return tuo
}

// SetNillableNextRetryTime sets the "next_retry_time" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableNextRetryTime(i *int64) *TaskUpdateOne {
	if i != nil {
		tuo.SetNextRetryTime(*i)
	}
	return tuo
}

// AddNextRetryTime adds i to the "next_retry_time" field.
func (tuo *TaskUpdateOne) AddNextRetryTime(i int64) *TaskUpdateOne {
	tuo.mutation.AddNextRetryTime(i)
	return tuo
}

// ClearNextRetryTime clears the value of the "next_retry_time" field.
func (tuo *TaskUpdateOne) ClearNextRetryTime() *TaskUpdateOne {
	tuo.mutation.ClearNextRetryTime()
	return tuo
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tuo *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TaskUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TaskUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(task.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.DeletedAt(); ok {
		_spec.SetField(task.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(task.FieldDeletedAt, field.TypeInt64, value)
	}
	if tuo.mutation.DeletedAtCleared() {
		_spec.ClearField(task.FieldDeletedAt, field.TypeInt64)
	}
	if value, ok := tuo.mutation.TenantCode(); ok {
		_spec.SetField(task.FieldTenantCode, field.TypeString, value)
	}
	if value, ok := tuo.mutation.TaskID(); ok {
		_spec.SetField(task.FieldTaskID, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(task.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PlanID(); ok {
		_spec.SetField(task.FieldPlanID, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PlanType(); ok {
		_spec.SetField(task.FieldPlanType, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Group(); ok {
		_spec.SetField(task.FieldGroup, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Priority(); ok {
		_spec.SetField(task.FieldPriority, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedPriority(); ok {
		_spec.AddField(task.FieldPriority, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PlannedTime(); ok {
		_spec.SetField(task.FieldPlannedTime, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedPlannedTime(); ok {
		_spec.AddField(task.FieldPlannedTime, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.StartTime(); ok {
		_spec.SetField(task.FieldStartTime, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedStartTime(); ok {
		_spec.AddField(task.FieldStartTime, field.TypeInt64, value)
	}
	if tuo.mutation.StartTimeCleared() {
		_spec.ClearField(task.FieldStartTime, field.TypeInt64)
	}
	if value, ok := tuo.mutation.EndTime(); ok {
		_spec.SetField(task.FieldEndTime, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedEndTime(); ok {
		_spec.AddField(task.FieldEndTime, field.TypeInt64, value)
	}
	if tuo.mutation.EndTimeCleared() {
		_spec.ClearField(task.FieldEndTime, field.TypeInt64)
	}
	if value, ok := tuo.mutation.Duration(); ok {
		_spec.SetField(task.FieldDuration, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedDuration(); ok {
		_spec.AddField(task.FieldDuration, field.TypeInt, value)
	}
	if tuo.mutation.DurationCleared() {
		_spec.ClearField(task.FieldDuration, field.TypeInt)
	}
	if value, ok := tuo.mutation.Result(); ok {
		_spec.SetField(task.FieldResult, field.TypeString, value)
	}
	if tuo.mutation.ResultCleared() {
		_spec.ClearField(task.FieldResult, field.TypeString)
	}
	if value, ok := tuo.mutation.Error(); ok {
		_spec.SetField(task.FieldError, field.TypeString, value)
	}
	if tuo.mutation.ErrorCleared() {
		_spec.ClearField(task.FieldError, field.TypeString)
	}
	if value, ok := tuo.mutation.RetryCount(); ok {
		_spec.SetField(task.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedRetryCount(); ok {
		_spec.AddField(task.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.NextRetryTime(); ok {
		_spec.SetField(task.FieldNextRetryTime, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedNextRetryTime(); ok {
		_spec.AddField(task.FieldNextRetryTime, field.TypeInt64, value)
	}
	if tuo.mutation.NextRetryTimeCleared() {
		_spec.ClearField(task.FieldNextRetryTime, field.TypeInt64)
	}
	_spec.AddModifiers(tuo.modifiers...)
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
