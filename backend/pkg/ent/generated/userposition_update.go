// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/predicate"
	"admin_backend/pkg/ent/generated/userposition"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserPositionUpdate is the builder for updating UserPosition entities.
type UserPositionUpdate struct {
	config
	hooks     []Hook
	mutation  *UserPositionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserPositionUpdate builder.
func (upu *UserPositionUpdate) Where(ps ...predicate.UserPosition) *UserPositionUpdate {
	upu.mutation.Where(ps...)
	return upu
}

// SetUserID sets the "user_id" field.
func (upu *UserPositionUpdate) SetUserID(s string) *UserPositionUpdate {
	upu.mutation.SetUserID(s)
	return upu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upu *UserPositionUpdate) SetNillableUserID(s *string) *UserPositionUpdate {
	if s != nil {
		upu.SetUserID(*s)
	}
	return upu
}

// SetPositionID sets the "position_id" field.
func (upu *UserPositionUpdate) SetPositionID(s string) *UserPositionUpdate {
	upu.mutation.SetPositionID(s)
	return upu
}

// SetNillablePositionID sets the "position_id" field if the given value is not nil.
func (upu *UserPositionUpdate) SetNillablePositionID(s *string) *UserPositionUpdate {
	if s != nil {
		upu.SetPositionID(*s)
	}
	return upu
}

// Mutation returns the UserPositionMutation object of the builder.
func (upu *UserPositionUpdate) Mutation() *UserPositionMutation {
	return upu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upu *UserPositionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, upu.sqlSave, upu.mutation, upu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upu *UserPositionUpdate) SaveX(ctx context.Context) int {
	affected, err := upu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upu *UserPositionUpdate) Exec(ctx context.Context) error {
	_, err := upu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upu *UserPositionUpdate) ExecX(ctx context.Context) {
	if err := upu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upu *UserPositionUpdate) check() error {
	if v, ok := upu.mutation.UserID(); ok {
		if err := userposition.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`generated: validator failed for field "UserPosition.user_id": %w`, err)}
		}
	}
	if v, ok := upu.mutation.PositionID(); ok {
		if err := userposition.PositionIDValidator(v); err != nil {
			return &ValidationError{Name: "position_id", err: fmt.Errorf(`generated: validator failed for field "UserPosition.position_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (upu *UserPositionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserPositionUpdate {
	upu.modifiers = append(upu.modifiers, modifiers...)
	return upu
}

func (upu *UserPositionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := upu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userposition.Table, userposition.Columns, sqlgraph.NewFieldSpec(userposition.FieldID, field.TypeInt))
	if ps := upu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upu.mutation.UserID(); ok {
		_spec.SetField(userposition.FieldUserID, field.TypeString, value)
	}
	if value, ok := upu.mutation.PositionID(); ok {
		_spec.SetField(userposition.FieldPositionID, field.TypeString, value)
	}
	_spec.AddModifiers(upu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, upu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userposition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	upu.mutation.done = true
	return n, nil
}

// UserPositionUpdateOne is the builder for updating a single UserPosition entity.
type UserPositionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserPositionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUserID sets the "user_id" field.
func (upuo *UserPositionUpdateOne) SetUserID(s string) *UserPositionUpdateOne {
	upuo.mutation.SetUserID(s)
	return upuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upuo *UserPositionUpdateOne) SetNillableUserID(s *string) *UserPositionUpdateOne {
	if s != nil {
		upuo.SetUserID(*s)
	}
	return upuo
}

// SetPositionID sets the "position_id" field.
func (upuo *UserPositionUpdateOne) SetPositionID(s string) *UserPositionUpdateOne {
	upuo.mutation.SetPositionID(s)
	return upuo
}

// SetNillablePositionID sets the "position_id" field if the given value is not nil.
func (upuo *UserPositionUpdateOne) SetNillablePositionID(s *string) *UserPositionUpdateOne {
	if s != nil {
		upuo.SetPositionID(*s)
	}
	return upuo
}

// Mutation returns the UserPositionMutation object of the builder.
func (upuo *UserPositionUpdateOne) Mutation() *UserPositionMutation {
	return upuo.mutation
}

// Where appends a list predicates to the UserPositionUpdate builder.
func (upuo *UserPositionUpdateOne) Where(ps ...predicate.UserPosition) *UserPositionUpdateOne {
	upuo.mutation.Where(ps...)
	return upuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upuo *UserPositionUpdateOne) Select(field string, fields ...string) *UserPositionUpdateOne {
	upuo.fields = append([]string{field}, fields...)
	return upuo
}

// Save executes the query and returns the updated UserPosition entity.
func (upuo *UserPositionUpdateOne) Save(ctx context.Context) (*UserPosition, error) {
	return withHooks(ctx, upuo.sqlSave, upuo.mutation, upuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upuo *UserPositionUpdateOne) SaveX(ctx context.Context) *UserPosition {
	node, err := upuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upuo *UserPositionUpdateOne) Exec(ctx context.Context) error {
	_, err := upuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upuo *UserPositionUpdateOne) ExecX(ctx context.Context) {
	if err := upuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upuo *UserPositionUpdateOne) check() error {
	if v, ok := upuo.mutation.UserID(); ok {
		if err := userposition.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`generated: validator failed for field "UserPosition.user_id": %w`, err)}
		}
	}
	if v, ok := upuo.mutation.PositionID(); ok {
		if err := userposition.PositionIDValidator(v); err != nil {
			return &ValidationError{Name: "position_id", err: fmt.Errorf(`generated: validator failed for field "UserPosition.position_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (upuo *UserPositionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserPositionUpdateOne {
	upuo.modifiers = append(upuo.modifiers, modifiers...)
	return upuo
}

func (upuo *UserPositionUpdateOne) sqlSave(ctx context.Context) (_node *UserPosition, err error) {
	if err := upuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userposition.Table, userposition.Columns, sqlgraph.NewFieldSpec(userposition.FieldID, field.TypeInt))
	id, ok := upuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "UserPosition.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := upuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userposition.FieldID)
		for _, f := range fields {
			if !userposition.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != userposition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upuo.mutation.UserID(); ok {
		_spec.SetField(userposition.FieldUserID, field.TypeString, value)
	}
	if value, ok := upuo.mutation.PositionID(); ok {
		_spec.SetField(userposition.FieldPositionID, field.TypeString, value)
	}
	_spec.AddModifiers(upuo.modifiers...)
	_node = &UserPosition{config: upuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userposition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	upuo.mutation.done = true
	return _node, nil
}
