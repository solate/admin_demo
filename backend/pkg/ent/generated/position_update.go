// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/position"
	"admin_backend/pkg/ent/generated/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PositionUpdate is the builder for updating Position entities.
type PositionUpdate struct {
	config
	hooks     []Hook
	mutation  *PositionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PositionUpdate builder.
func (pu *PositionUpdate) Where(ps ...predicate.Position) *PositionUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PositionUpdate) SetUpdatedAt(i int64) *PositionUpdate {
	pu.mutation.ResetUpdatedAt()
	pu.mutation.SetUpdatedAt(i)
	return pu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pu *PositionUpdate) SetNillableUpdatedAt(i *int64) *PositionUpdate {
	if i != nil {
		pu.SetUpdatedAt(*i)
	}
	return pu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (pu *PositionUpdate) AddUpdatedAt(i int64) *PositionUpdate {
	pu.mutation.AddUpdatedAt(i)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PositionUpdate) SetDeletedAt(i int64) *PositionUpdate {
	pu.mutation.ResetDeletedAt()
	pu.mutation.SetDeletedAt(i)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *PositionUpdate) SetNillableDeletedAt(i *int64) *PositionUpdate {
	if i != nil {
		pu.SetDeletedAt(*i)
	}
	return pu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (pu *PositionUpdate) AddDeletedAt(i int64) *PositionUpdate {
	pu.mutation.AddDeletedAt(i)
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *PositionUpdate) ClearDeletedAt() *PositionUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetTenantCode sets the "tenant_code" field.
func (pu *PositionUpdate) SetTenantCode(s string) *PositionUpdate {
	pu.mutation.SetTenantCode(s)
	return pu
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (pu *PositionUpdate) SetNillableTenantCode(s *string) *PositionUpdate {
	if s != nil {
		pu.SetTenantCode(*s)
	}
	return pu
}

// SetPositionID sets the "position_id" field.
func (pu *PositionUpdate) SetPositionID(s string) *PositionUpdate {
	pu.mutation.SetPositionID(s)
	return pu
}

// SetNillablePositionID sets the "position_id" field if the given value is not nil.
func (pu *PositionUpdate) SetNillablePositionID(s *string) *PositionUpdate {
	if s != nil {
		pu.SetPositionID(*s)
	}
	return pu
}

// SetName sets the "name" field.
func (pu *PositionUpdate) SetName(s string) *PositionUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PositionUpdate) SetNillableName(s *string) *PositionUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetDepartmentID sets the "department_id" field.
func (pu *PositionUpdate) SetDepartmentID(s string) *PositionUpdate {
	pu.mutation.SetDepartmentID(s)
	return pu
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (pu *PositionUpdate) SetNillableDepartmentID(s *string) *PositionUpdate {
	if s != nil {
		pu.SetDepartmentID(*s)
	}
	return pu
}

// SetDescription sets the "description" field.
func (pu *PositionUpdate) SetDescription(s string) *PositionUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PositionUpdate) SetNillableDescription(s *string) *PositionUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *PositionUpdate) ClearDescription() *PositionUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// Mutation returns the PositionMutation object of the builder.
func (pu *PositionUpdate) Mutation() *PositionMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PositionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PositionUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PositionUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PositionUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PositionUpdate) check() error {
	if v, ok := pu.mutation.TenantCode(); ok {
		if err := position.TenantCodeValidator(v); err != nil {
			return &ValidationError{Name: "tenant_code", err: fmt.Errorf(`generated: validator failed for field "Position.tenant_code": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Name(); ok {
		if err := position.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Position.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.DepartmentID(); ok {
		if err := position.DepartmentIDValidator(v); err != nil {
			return &ValidationError{Name: "department_id", err: fmt.Errorf(`generated: validator failed for field "Position.department_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PositionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PositionUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PositionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(position.Table, position.Columns, sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(position.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(position.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(position.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(position.FieldDeletedAt, field.TypeInt64, value)
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.ClearField(position.FieldDeletedAt, field.TypeInt64)
	}
	if value, ok := pu.mutation.TenantCode(); ok {
		_spec.SetField(position.FieldTenantCode, field.TypeString, value)
	}
	if value, ok := pu.mutation.PositionID(); ok {
		_spec.SetField(position.FieldPositionID, field.TypeString, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(position.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.DepartmentID(); ok {
		_spec.SetField(position.FieldDepartmentID, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(position.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(position.FieldDescription, field.TypeString)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{position.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PositionUpdateOne is the builder for updating a single Position entity.
type PositionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PositionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PositionUpdateOne) SetUpdatedAt(i int64) *PositionUpdateOne {
	puo.mutation.ResetUpdatedAt()
	puo.mutation.SetUpdatedAt(i)
	return puo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillableUpdatedAt(i *int64) *PositionUpdateOne {
	if i != nil {
		puo.SetUpdatedAt(*i)
	}
	return puo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (puo *PositionUpdateOne) AddUpdatedAt(i int64) *PositionUpdateOne {
	puo.mutation.AddUpdatedAt(i)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PositionUpdateOne) SetDeletedAt(i int64) *PositionUpdateOne {
	puo.mutation.ResetDeletedAt()
	puo.mutation.SetDeletedAt(i)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillableDeletedAt(i *int64) *PositionUpdateOne {
	if i != nil {
		puo.SetDeletedAt(*i)
	}
	return puo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (puo *PositionUpdateOne) AddDeletedAt(i int64) *PositionUpdateOne {
	puo.mutation.AddDeletedAt(i)
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *PositionUpdateOne) ClearDeletedAt() *PositionUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetTenantCode sets the "tenant_code" field.
func (puo *PositionUpdateOne) SetTenantCode(s string) *PositionUpdateOne {
	puo.mutation.SetTenantCode(s)
	return puo
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillableTenantCode(s *string) *PositionUpdateOne {
	if s != nil {
		puo.SetTenantCode(*s)
	}
	return puo
}

// SetPositionID sets the "position_id" field.
func (puo *PositionUpdateOne) SetPositionID(s string) *PositionUpdateOne {
	puo.mutation.SetPositionID(s)
	return puo
}

// SetNillablePositionID sets the "position_id" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillablePositionID(s *string) *PositionUpdateOne {
	if s != nil {
		puo.SetPositionID(*s)
	}
	return puo
}

// SetName sets the "name" field.
func (puo *PositionUpdateOne) SetName(s string) *PositionUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillableName(s *string) *PositionUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetDepartmentID sets the "department_id" field.
func (puo *PositionUpdateOne) SetDepartmentID(s string) *PositionUpdateOne {
	puo.mutation.SetDepartmentID(s)
	return puo
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillableDepartmentID(s *string) *PositionUpdateOne {
	if s != nil {
		puo.SetDepartmentID(*s)
	}
	return puo
}

// SetDescription sets the "description" field.
func (puo *PositionUpdateOne) SetDescription(s string) *PositionUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillableDescription(s *string) *PositionUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *PositionUpdateOne) ClearDescription() *PositionUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// Mutation returns the PositionMutation object of the builder.
func (puo *PositionUpdateOne) Mutation() *PositionMutation {
	return puo.mutation
}

// Where appends a list predicates to the PositionUpdate builder.
func (puo *PositionUpdateOne) Where(ps ...predicate.Position) *PositionUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PositionUpdateOne) Select(field string, fields ...string) *PositionUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Position entity.
func (puo *PositionUpdateOne) Save(ctx context.Context) (*Position, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PositionUpdateOne) SaveX(ctx context.Context) *Position {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PositionUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PositionUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PositionUpdateOne) check() error {
	if v, ok := puo.mutation.TenantCode(); ok {
		if err := position.TenantCodeValidator(v); err != nil {
			return &ValidationError{Name: "tenant_code", err: fmt.Errorf(`generated: validator failed for field "Position.tenant_code": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Name(); ok {
		if err := position.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Position.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.DepartmentID(); ok {
		if err := position.DepartmentIDValidator(v); err != nil {
			return &ValidationError{Name: "department_id", err: fmt.Errorf(`generated: validator failed for field "Position.department_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PositionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PositionUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PositionUpdateOne) sqlSave(ctx context.Context) (_node *Position, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(position.Table, position.Columns, sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Position.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, position.FieldID)
		for _, f := range fields {
			if !position.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != position.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(position.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(position.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(position.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(position.FieldDeletedAt, field.TypeInt64, value)
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.ClearField(position.FieldDeletedAt, field.TypeInt64)
	}
	if value, ok := puo.mutation.TenantCode(); ok {
		_spec.SetField(position.FieldTenantCode, field.TypeString, value)
	}
	if value, ok := puo.mutation.PositionID(); ok {
		_spec.SetField(position.FieldPositionID, field.TypeString, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(position.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.DepartmentID(); ok {
		_spec.SetField(position.FieldDepartmentID, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(position.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(position.FieldDescription, field.TypeString)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Position{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{position.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
