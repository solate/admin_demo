// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/dictitem"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DictItemCreate is the builder for creating a DictItem entity.
type DictItemCreate struct {
	config
	mutation *DictItemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (dic *DictItemCreate) SetCreatedAt(i int64) *DictItemCreate {
	dic.mutation.SetCreatedAt(i)
	return dic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dic *DictItemCreate) SetNillableCreatedAt(i *int64) *DictItemCreate {
	if i != nil {
		dic.SetCreatedAt(*i)
	}
	return dic
}

// SetUpdatedAt sets the "updated_at" field.
func (dic *DictItemCreate) SetUpdatedAt(i int64) *DictItemCreate {
	dic.mutation.SetUpdatedAt(i)
	return dic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dic *DictItemCreate) SetNillableUpdatedAt(i *int64) *DictItemCreate {
	if i != nil {
		dic.SetUpdatedAt(*i)
	}
	return dic
}

// SetDeletedAt sets the "deleted_at" field.
func (dic *DictItemCreate) SetDeletedAt(i int64) *DictItemCreate {
	dic.mutation.SetDeletedAt(i)
	return dic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dic *DictItemCreate) SetNillableDeletedAt(i *int64) *DictItemCreate {
	if i != nil {
		dic.SetDeletedAt(*i)
	}
	return dic
}

// SetTenantCode sets the "tenant_code" field.
func (dic *DictItemCreate) SetTenantCode(s string) *DictItemCreate {
	dic.mutation.SetTenantCode(s)
	return dic
}

// SetItemID sets the "item_id" field.
func (dic *DictItemCreate) SetItemID(s string) *DictItemCreate {
	dic.mutation.SetItemID(s)
	return dic
}

// SetTypeCode sets the "type_code" field.
func (dic *DictItemCreate) SetTypeCode(s string) *DictItemCreate {
	dic.mutation.SetTypeCode(s)
	return dic
}

// SetLabel sets the "label" field.
func (dic *DictItemCreate) SetLabel(s string) *DictItemCreate {
	dic.mutation.SetLabel(s)
	return dic
}

// SetValue sets the "value" field.
func (dic *DictItemCreate) SetValue(s string) *DictItemCreate {
	dic.mutation.SetValue(s)
	return dic
}

// SetDescription sets the "description" field.
func (dic *DictItemCreate) SetDescription(s string) *DictItemCreate {
	dic.mutation.SetDescription(s)
	return dic
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dic *DictItemCreate) SetNillableDescription(s *string) *DictItemCreate {
	if s != nil {
		dic.SetDescription(*s)
	}
	return dic
}

// SetSort sets the "sort" field.
func (dic *DictItemCreate) SetSort(i int) *DictItemCreate {
	dic.mutation.SetSort(i)
	return dic
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (dic *DictItemCreate) SetNillableSort(i *int) *DictItemCreate {
	if i != nil {
		dic.SetSort(*i)
	}
	return dic
}

// SetStatus sets the "status" field.
func (dic *DictItemCreate) SetStatus(i int) *DictItemCreate {
	dic.mutation.SetStatus(i)
	return dic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dic *DictItemCreate) SetNillableStatus(i *int) *DictItemCreate {
	if i != nil {
		dic.SetStatus(*i)
	}
	return dic
}

// Mutation returns the DictItemMutation object of the builder.
func (dic *DictItemCreate) Mutation() *DictItemMutation {
	return dic.mutation
}

// Save creates the DictItem in the database.
func (dic *DictItemCreate) Save(ctx context.Context) (*DictItem, error) {
	dic.defaults()
	return withHooks(ctx, dic.sqlSave, dic.mutation, dic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dic *DictItemCreate) SaveX(ctx context.Context) *DictItem {
	v, err := dic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dic *DictItemCreate) Exec(ctx context.Context) error {
	_, err := dic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dic *DictItemCreate) ExecX(ctx context.Context) {
	if err := dic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dic *DictItemCreate) defaults() {
	if _, ok := dic.mutation.CreatedAt(); !ok {
		v := dictitem.DefaultCreatedAt
		dic.mutation.SetCreatedAt(v)
	}
	if _, ok := dic.mutation.UpdatedAt(); !ok {
		v := dictitem.DefaultUpdatedAt
		dic.mutation.SetUpdatedAt(v)
	}
	if _, ok := dic.mutation.Sort(); !ok {
		v := dictitem.DefaultSort
		dic.mutation.SetSort(v)
	}
	if _, ok := dic.mutation.Status(); !ok {
		v := dictitem.DefaultStatus
		dic.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dic *DictItemCreate) check() error {
	if _, ok := dic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "DictItem.created_at"`)}
	}
	if _, ok := dic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "DictItem.updated_at"`)}
	}
	if _, ok := dic.mutation.TenantCode(); !ok {
		return &ValidationError{Name: "tenant_code", err: errors.New(`generated: missing required field "DictItem.tenant_code"`)}
	}
	if v, ok := dic.mutation.TenantCode(); ok {
		if err := dictitem.TenantCodeValidator(v); err != nil {
			return &ValidationError{Name: "tenant_code", err: fmt.Errorf(`generated: validator failed for field "DictItem.tenant_code": %w`, err)}
		}
	}
	if _, ok := dic.mutation.ItemID(); !ok {
		return &ValidationError{Name: "item_id", err: errors.New(`generated: missing required field "DictItem.item_id"`)}
	}
	if _, ok := dic.mutation.TypeCode(); !ok {
		return &ValidationError{Name: "type_code", err: errors.New(`generated: missing required field "DictItem.type_code"`)}
	}
	if v, ok := dic.mutation.TypeCode(); ok {
		if err := dictitem.TypeCodeValidator(v); err != nil {
			return &ValidationError{Name: "type_code", err: fmt.Errorf(`generated: validator failed for field "DictItem.type_code": %w`, err)}
		}
	}
	if _, ok := dic.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`generated: missing required field "DictItem.label"`)}
	}
	if v, ok := dic.mutation.Label(); ok {
		if err := dictitem.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf(`generated: validator failed for field "DictItem.label": %w`, err)}
		}
	}
	if _, ok := dic.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`generated: missing required field "DictItem.value"`)}
	}
	if v, ok := dic.mutation.Value(); ok {
		if err := dictitem.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`generated: validator failed for field "DictItem.value": %w`, err)}
		}
	}
	if _, ok := dic.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`generated: missing required field "DictItem.sort"`)}
	}
	if _, ok := dic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "DictItem.status"`)}
	}
	return nil
}

func (dic *DictItemCreate) sqlSave(ctx context.Context) (*DictItem, error) {
	if err := dic.check(); err != nil {
		return nil, err
	}
	_node, _spec := dic.createSpec()
	if err := sqlgraph.CreateNode(ctx, dic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dic.mutation.id = &_node.ID
	dic.mutation.done = true
	return _node, nil
}

func (dic *DictItemCreate) createSpec() (*DictItem, *sqlgraph.CreateSpec) {
	var (
		_node = &DictItem{config: dic.config}
		_spec = sqlgraph.NewCreateSpec(dictitem.Table, sqlgraph.NewFieldSpec(dictitem.FieldID, field.TypeInt))
	)
	_spec.OnConflict = dic.conflict
	if value, ok := dic.mutation.CreatedAt(); ok {
		_spec.SetField(dictitem.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := dic.mutation.UpdatedAt(); ok {
		_spec.SetField(dictitem.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := dic.mutation.DeletedAt(); ok {
		_spec.SetField(dictitem.FieldDeletedAt, field.TypeInt64, value)
		_node.DeletedAt = &value
	}
	if value, ok := dic.mutation.TenantCode(); ok {
		_spec.SetField(dictitem.FieldTenantCode, field.TypeString, value)
		_node.TenantCode = value
	}
	if value, ok := dic.mutation.ItemID(); ok {
		_spec.SetField(dictitem.FieldItemID, field.TypeString, value)
		_node.ItemID = value
	}
	if value, ok := dic.mutation.TypeCode(); ok {
		_spec.SetField(dictitem.FieldTypeCode, field.TypeString, value)
		_node.TypeCode = value
	}
	if value, ok := dic.mutation.Label(); ok {
		_spec.SetField(dictitem.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := dic.mutation.Value(); ok {
		_spec.SetField(dictitem.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := dic.mutation.Description(); ok {
		_spec.SetField(dictitem.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := dic.mutation.Sort(); ok {
		_spec.SetField(dictitem.FieldSort, field.TypeInt, value)
		_node.Sort = value
	}
	if value, ok := dic.mutation.Status(); ok {
		_spec.SetField(dictitem.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DictItem.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DictItemUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (dic *DictItemCreate) OnConflict(opts ...sql.ConflictOption) *DictItemUpsertOne {
	dic.conflict = opts
	return &DictItemUpsertOne{
		create: dic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DictItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dic *DictItemCreate) OnConflictColumns(columns ...string) *DictItemUpsertOne {
	dic.conflict = append(dic.conflict, sql.ConflictColumns(columns...))
	return &DictItemUpsertOne{
		create: dic,
	}
}

type (
	// DictItemUpsertOne is the builder for "upsert"-ing
	//  one DictItem node.
	DictItemUpsertOne struct {
		create *DictItemCreate
	}

	// DictItemUpsert is the "OnConflict" setter.
	DictItemUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *DictItemUpsert) SetUpdatedAt(v int64) *DictItemUpsert {
	u.Set(dictitem.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DictItemUpsert) UpdateUpdatedAt() *DictItemUpsert {
	u.SetExcluded(dictitem.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *DictItemUpsert) AddUpdatedAt(v int64) *DictItemUpsert {
	u.Add(dictitem.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DictItemUpsert) SetDeletedAt(v int64) *DictItemUpsert {
	u.Set(dictitem.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DictItemUpsert) UpdateDeletedAt() *DictItemUpsert {
	u.SetExcluded(dictitem.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *DictItemUpsert) AddDeletedAt(v int64) *DictItemUpsert {
	u.Add(dictitem.FieldDeletedAt, v)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *DictItemUpsert) ClearDeletedAt() *DictItemUpsert {
	u.SetNull(dictitem.FieldDeletedAt)
	return u
}

// SetTenantCode sets the "tenant_code" field.
func (u *DictItemUpsert) SetTenantCode(v string) *DictItemUpsert {
	u.Set(dictitem.FieldTenantCode, v)
	return u
}

// UpdateTenantCode sets the "tenant_code" field to the value that was provided on create.
func (u *DictItemUpsert) UpdateTenantCode() *DictItemUpsert {
	u.SetExcluded(dictitem.FieldTenantCode)
	return u
}

// SetItemID sets the "item_id" field.
func (u *DictItemUpsert) SetItemID(v string) *DictItemUpsert {
	u.Set(dictitem.FieldItemID, v)
	return u
}

// UpdateItemID sets the "item_id" field to the value that was provided on create.
func (u *DictItemUpsert) UpdateItemID() *DictItemUpsert {
	u.SetExcluded(dictitem.FieldItemID)
	return u
}

// SetTypeCode sets the "type_code" field.
func (u *DictItemUpsert) SetTypeCode(v string) *DictItemUpsert {
	u.Set(dictitem.FieldTypeCode, v)
	return u
}

// UpdateTypeCode sets the "type_code" field to the value that was provided on create.
func (u *DictItemUpsert) UpdateTypeCode() *DictItemUpsert {
	u.SetExcluded(dictitem.FieldTypeCode)
	return u
}

// SetLabel sets the "label" field.
func (u *DictItemUpsert) SetLabel(v string) *DictItemUpsert {
	u.Set(dictitem.FieldLabel, v)
	return u
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *DictItemUpsert) UpdateLabel() *DictItemUpsert {
	u.SetExcluded(dictitem.FieldLabel)
	return u
}

// SetValue sets the "value" field.
func (u *DictItemUpsert) SetValue(v string) *DictItemUpsert {
	u.Set(dictitem.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *DictItemUpsert) UpdateValue() *DictItemUpsert {
	u.SetExcluded(dictitem.FieldValue)
	return u
}

// SetDescription sets the "description" field.
func (u *DictItemUpsert) SetDescription(v string) *DictItemUpsert {
	u.Set(dictitem.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DictItemUpsert) UpdateDescription() *DictItemUpsert {
	u.SetExcluded(dictitem.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *DictItemUpsert) ClearDescription() *DictItemUpsert {
	u.SetNull(dictitem.FieldDescription)
	return u
}

// SetSort sets the "sort" field.
func (u *DictItemUpsert) SetSort(v int) *DictItemUpsert {
	u.Set(dictitem.FieldSort, v)
	return u
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *DictItemUpsert) UpdateSort() *DictItemUpsert {
	u.SetExcluded(dictitem.FieldSort)
	return u
}

// AddSort adds v to the "sort" field.
func (u *DictItemUpsert) AddSort(v int) *DictItemUpsert {
	u.Add(dictitem.FieldSort, v)
	return u
}

// SetStatus sets the "status" field.
func (u *DictItemUpsert) SetStatus(v int) *DictItemUpsert {
	u.Set(dictitem.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DictItemUpsert) UpdateStatus() *DictItemUpsert {
	u.SetExcluded(dictitem.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *DictItemUpsert) AddStatus(v int) *DictItemUpsert {
	u.Add(dictitem.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.DictItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DictItemUpsertOne) UpdateNewValues() *DictItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(dictitem.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DictItem.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DictItemUpsertOne) Ignore() *DictItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DictItemUpsertOne) DoNothing() *DictItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DictItemCreate.OnConflict
// documentation for more info.
func (u *DictItemUpsertOne) Update(set func(*DictItemUpsert)) *DictItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DictItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DictItemUpsertOne) SetUpdatedAt(v int64) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *DictItemUpsertOne) AddUpdatedAt(v int64) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DictItemUpsertOne) UpdateUpdatedAt() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DictItemUpsertOne) SetDeletedAt(v int64) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *DictItemUpsertOne) AddDeletedAt(v int64) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DictItemUpsertOne) UpdateDeletedAt() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *DictItemUpsertOne) ClearDeletedAt() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTenantCode sets the "tenant_code" field.
func (u *DictItemUpsertOne) SetTenantCode(v string) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.SetTenantCode(v)
	})
}

// UpdateTenantCode sets the "tenant_code" field to the value that was provided on create.
func (u *DictItemUpsertOne) UpdateTenantCode() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateTenantCode()
	})
}

// SetItemID sets the "item_id" field.
func (u *DictItemUpsertOne) SetItemID(v string) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.SetItemID(v)
	})
}

// UpdateItemID sets the "item_id" field to the value that was provided on create.
func (u *DictItemUpsertOne) UpdateItemID() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateItemID()
	})
}

// SetTypeCode sets the "type_code" field.
func (u *DictItemUpsertOne) SetTypeCode(v string) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.SetTypeCode(v)
	})
}

// UpdateTypeCode sets the "type_code" field to the value that was provided on create.
func (u *DictItemUpsertOne) UpdateTypeCode() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateTypeCode()
	})
}

// SetLabel sets the "label" field.
func (u *DictItemUpsertOne) SetLabel(v string) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *DictItemUpsertOne) UpdateLabel() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateLabel()
	})
}

// SetValue sets the "value" field.
func (u *DictItemUpsertOne) SetValue(v string) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *DictItemUpsertOne) UpdateValue() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateValue()
	})
}

// SetDescription sets the "description" field.
func (u *DictItemUpsertOne) SetDescription(v string) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DictItemUpsertOne) UpdateDescription() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *DictItemUpsertOne) ClearDescription() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.ClearDescription()
	})
}

// SetSort sets the "sort" field.
func (u *DictItemUpsertOne) SetSort(v int) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *DictItemUpsertOne) AddSort(v int) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *DictItemUpsertOne) UpdateSort() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateSort()
	})
}

// SetStatus sets the "status" field.
func (u *DictItemUpsertOne) SetStatus(v int) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *DictItemUpsertOne) AddStatus(v int) *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DictItemUpsertOne) UpdateStatus() *DictItemUpsertOne {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *DictItemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for DictItemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DictItemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DictItemUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DictItemUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DictItemCreateBulk is the builder for creating many DictItem entities in bulk.
type DictItemCreateBulk struct {
	config
	err      error
	builders []*DictItemCreate
	conflict []sql.ConflictOption
}

// Save creates the DictItem entities in the database.
func (dicb *DictItemCreateBulk) Save(ctx context.Context) ([]*DictItem, error) {
	if dicb.err != nil {
		return nil, dicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dicb.builders))
	nodes := make([]*DictItem, len(dicb.builders))
	mutators := make([]Mutator, len(dicb.builders))
	for i := range dicb.builders {
		func(i int, root context.Context) {
			builder := dicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DictItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dicb *DictItemCreateBulk) SaveX(ctx context.Context) []*DictItem {
	v, err := dicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dicb *DictItemCreateBulk) Exec(ctx context.Context) error {
	_, err := dicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dicb *DictItemCreateBulk) ExecX(ctx context.Context) {
	if err := dicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DictItem.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DictItemUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (dicb *DictItemCreateBulk) OnConflict(opts ...sql.ConflictOption) *DictItemUpsertBulk {
	dicb.conflict = opts
	return &DictItemUpsertBulk{
		create: dicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DictItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dicb *DictItemCreateBulk) OnConflictColumns(columns ...string) *DictItemUpsertBulk {
	dicb.conflict = append(dicb.conflict, sql.ConflictColumns(columns...))
	return &DictItemUpsertBulk{
		create: dicb,
	}
}

// DictItemUpsertBulk is the builder for "upsert"-ing
// a bulk of DictItem nodes.
type DictItemUpsertBulk struct {
	create *DictItemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DictItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DictItemUpsertBulk) UpdateNewValues() *DictItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(dictitem.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DictItem.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DictItemUpsertBulk) Ignore() *DictItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DictItemUpsertBulk) DoNothing() *DictItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DictItemCreateBulk.OnConflict
// documentation for more info.
func (u *DictItemUpsertBulk) Update(set func(*DictItemUpsert)) *DictItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DictItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DictItemUpsertBulk) SetUpdatedAt(v int64) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *DictItemUpsertBulk) AddUpdatedAt(v int64) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DictItemUpsertBulk) UpdateUpdatedAt() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DictItemUpsertBulk) SetDeletedAt(v int64) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *DictItemUpsertBulk) AddDeletedAt(v int64) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DictItemUpsertBulk) UpdateDeletedAt() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *DictItemUpsertBulk) ClearDeletedAt() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTenantCode sets the "tenant_code" field.
func (u *DictItemUpsertBulk) SetTenantCode(v string) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.SetTenantCode(v)
	})
}

// UpdateTenantCode sets the "tenant_code" field to the value that was provided on create.
func (u *DictItemUpsertBulk) UpdateTenantCode() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateTenantCode()
	})
}

// SetItemID sets the "item_id" field.
func (u *DictItemUpsertBulk) SetItemID(v string) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.SetItemID(v)
	})
}

// UpdateItemID sets the "item_id" field to the value that was provided on create.
func (u *DictItemUpsertBulk) UpdateItemID() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateItemID()
	})
}

// SetTypeCode sets the "type_code" field.
func (u *DictItemUpsertBulk) SetTypeCode(v string) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.SetTypeCode(v)
	})
}

// UpdateTypeCode sets the "type_code" field to the value that was provided on create.
func (u *DictItemUpsertBulk) UpdateTypeCode() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateTypeCode()
	})
}

// SetLabel sets the "label" field.
func (u *DictItemUpsertBulk) SetLabel(v string) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *DictItemUpsertBulk) UpdateLabel() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateLabel()
	})
}

// SetValue sets the "value" field.
func (u *DictItemUpsertBulk) SetValue(v string) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *DictItemUpsertBulk) UpdateValue() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateValue()
	})
}

// SetDescription sets the "description" field.
func (u *DictItemUpsertBulk) SetDescription(v string) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DictItemUpsertBulk) UpdateDescription() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *DictItemUpsertBulk) ClearDescription() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.ClearDescription()
	})
}

// SetSort sets the "sort" field.
func (u *DictItemUpsertBulk) SetSort(v int) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *DictItemUpsertBulk) AddSort(v int) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *DictItemUpsertBulk) UpdateSort() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateSort()
	})
}

// SetStatus sets the "status" field.
func (u *DictItemUpsertBulk) SetStatus(v int) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *DictItemUpsertBulk) AddStatus(v int) *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *DictItemUpsertBulk) UpdateStatus() *DictItemUpsertBulk {
	return u.Update(func(s *DictItemUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *DictItemUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the DictItemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for DictItemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DictItemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
