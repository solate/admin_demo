// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/product"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

// ProductCreate is the builder for creating a Product entity.
type ProductCreate struct {
	config
	mutation *ProductMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProductCreate) SetCreatedAt(i int64) *ProductCreate {
	pc.mutation.SetCreatedAt(i)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProductCreate) SetNillableCreatedAt(i *int64) *ProductCreate {
	if i != nil {
		pc.SetCreatedAt(*i)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProductCreate) SetUpdatedAt(i int64) *ProductCreate {
	pc.mutation.SetUpdatedAt(i)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProductCreate) SetNillableUpdatedAt(i *int64) *ProductCreate {
	if i != nil {
		pc.SetUpdatedAt(*i)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *ProductCreate) SetDeletedAt(i int64) *ProductCreate {
	pc.mutation.SetDeletedAt(i)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *ProductCreate) SetNillableDeletedAt(i *int64) *ProductCreate {
	if i != nil {
		pc.SetDeletedAt(*i)
	}
	return pc
}

// SetTenantCode sets the "tenant_code" field.
func (pc *ProductCreate) SetTenantCode(s string) *ProductCreate {
	pc.mutation.SetTenantCode(s)
	return pc
}

// SetProductID sets the "product_id" field.
func (pc *ProductCreate) SetProductID(s string) *ProductCreate {
	pc.mutation.SetProductID(s)
	return pc
}

// SetProductName sets the "product_name" field.
func (pc *ProductCreate) SetProductName(s string) *ProductCreate {
	pc.mutation.SetProductName(s)
	return pc
}

// SetUnit sets the "unit" field.
func (pc *ProductCreate) SetUnit(s string) *ProductCreate {
	pc.mutation.SetUnit(s)
	return pc
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (pc *ProductCreate) SetNillableUnit(s *string) *ProductCreate {
	if s != nil {
		pc.SetUnit(*s)
	}
	return pc
}

// SetPurchasePrice sets the "purchase_price" field.
func (pc *ProductCreate) SetPurchasePrice(d decimal.Decimal) *ProductCreate {
	pc.mutation.SetPurchasePrice(d)
	return pc
}

// SetNillablePurchasePrice sets the "purchase_price" field if the given value is not nil.
func (pc *ProductCreate) SetNillablePurchasePrice(d *decimal.Decimal) *ProductCreate {
	if d != nil {
		pc.SetPurchasePrice(*d)
	}
	return pc
}

// SetSalePrice sets the "sale_price" field.
func (pc *ProductCreate) SetSalePrice(d decimal.Decimal) *ProductCreate {
	pc.mutation.SetSalePrice(d)
	return pc
}

// SetNillableSalePrice sets the "sale_price" field if the given value is not nil.
func (pc *ProductCreate) SetNillableSalePrice(d *decimal.Decimal) *ProductCreate {
	if d != nil {
		pc.SetSalePrice(*d)
	}
	return pc
}

// SetCurrentStock sets the "current_stock" field.
func (pc *ProductCreate) SetCurrentStock(i int) *ProductCreate {
	pc.mutation.SetCurrentStock(i)
	return pc
}

// SetNillableCurrentStock sets the "current_stock" field if the given value is not nil.
func (pc *ProductCreate) SetNillableCurrentStock(i *int) *ProductCreate {
	if i != nil {
		pc.SetCurrentStock(*i)
	}
	return pc
}

// SetMinStock sets the "min_stock" field.
func (pc *ProductCreate) SetMinStock(i int) *ProductCreate {
	pc.mutation.SetMinStock(i)
	return pc
}

// SetNillableMinStock sets the "min_stock" field if the given value is not nil.
func (pc *ProductCreate) SetNillableMinStock(i *int) *ProductCreate {
	if i != nil {
		pc.SetMinStock(*i)
	}
	return pc
}

// SetStatus sets the "status" field.
func (pc *ProductCreate) SetStatus(i int) *ProductCreate {
	pc.mutation.SetStatus(i)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *ProductCreate) SetNillableStatus(i *int) *ProductCreate {
	if i != nil {
		pc.SetStatus(*i)
	}
	return pc
}

// SetFactoryID sets the "factory_id" field.
func (pc *ProductCreate) SetFactoryID(s string) *ProductCreate {
	pc.mutation.SetFactoryID(s)
	return pc
}

// SetNillableFactoryID sets the "factory_id" field if the given value is not nil.
func (pc *ProductCreate) SetNillableFactoryID(s *string) *ProductCreate {
	if s != nil {
		pc.SetFactoryID(*s)
	}
	return pc
}

// Mutation returns the ProductMutation object of the builder.
func (pc *ProductCreate) Mutation() *ProductMutation {
	return pc.mutation
}

// Save creates the Product in the database.
func (pc *ProductCreate) Save(ctx context.Context) (*Product, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProductCreate) SaveX(ctx context.Context) *Product {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProductCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProductCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProductCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := product.DefaultCreatedAt
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := product.DefaultUpdatedAt
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.Unit(); !ok {
		v := product.DefaultUnit
		pc.mutation.SetUnit(v)
	}
	if _, ok := pc.mutation.PurchasePrice(); !ok {
		v := product.DefaultPurchasePrice
		pc.mutation.SetPurchasePrice(v)
	}
	if _, ok := pc.mutation.SalePrice(); !ok {
		v := product.DefaultSalePrice
		pc.mutation.SetSalePrice(v)
	}
	if _, ok := pc.mutation.CurrentStock(); !ok {
		v := product.DefaultCurrentStock
		pc.mutation.SetCurrentStock(v)
	}
	if _, ok := pc.mutation.MinStock(); !ok {
		v := product.DefaultMinStock
		pc.mutation.SetMinStock(v)
	}
	if _, ok := pc.mutation.Status(); !ok {
		v := product.DefaultStatus
		pc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProductCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Product.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "Product.updated_at"`)}
	}
	if _, ok := pc.mutation.TenantCode(); !ok {
		return &ValidationError{Name: "tenant_code", err: errors.New(`generated: missing required field "Product.tenant_code"`)}
	}
	if _, ok := pc.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product_id", err: errors.New(`generated: missing required field "Product.product_id"`)}
	}
	if _, ok := pc.mutation.ProductName(); !ok {
		return &ValidationError{Name: "product_name", err: errors.New(`generated: missing required field "Product.product_name"`)}
	}
	if v, ok := pc.mutation.ProductName(); ok {
		if err := product.ProductNameValidator(v); err != nil {
			return &ValidationError{Name: "product_name", err: fmt.Errorf(`generated: validator failed for field "Product.product_name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Unit(); !ok {
		return &ValidationError{Name: "unit", err: errors.New(`generated: missing required field "Product.unit"`)}
	}
	if _, ok := pc.mutation.PurchasePrice(); !ok {
		return &ValidationError{Name: "purchase_price", err: errors.New(`generated: missing required field "Product.purchase_price"`)}
	}
	if _, ok := pc.mutation.SalePrice(); !ok {
		return &ValidationError{Name: "sale_price", err: errors.New(`generated: missing required field "Product.sale_price"`)}
	}
	if _, ok := pc.mutation.CurrentStock(); !ok {
		return &ValidationError{Name: "current_stock", err: errors.New(`generated: missing required field "Product.current_stock"`)}
	}
	if _, ok := pc.mutation.MinStock(); !ok {
		return &ValidationError{Name: "min_stock", err: errors.New(`generated: missing required field "Product.min_stock"`)}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "Product.status"`)}
	}
	return nil
}

func (pc *ProductCreate) sqlSave(ctx context.Context) (*Product, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProductCreate) createSpec() (*Product, *sqlgraph.CreateSpec) {
	var (
		_node = &Product{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(product.Table, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(product.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.SetField(product.FieldDeletedAt, field.TypeInt64, value)
		_node.DeletedAt = &value
	}
	if value, ok := pc.mutation.TenantCode(); ok {
		_spec.SetField(product.FieldTenantCode, field.TypeString, value)
		_node.TenantCode = value
	}
	if value, ok := pc.mutation.ProductID(); ok {
		_spec.SetField(product.FieldProductID, field.TypeString, value)
		_node.ProductID = value
	}
	if value, ok := pc.mutation.ProductName(); ok {
		_spec.SetField(product.FieldProductName, field.TypeString, value)
		_node.ProductName = value
	}
	if value, ok := pc.mutation.Unit(); ok {
		_spec.SetField(product.FieldUnit, field.TypeString, value)
		_node.Unit = value
	}
	if value, ok := pc.mutation.PurchasePrice(); ok {
		_spec.SetField(product.FieldPurchasePrice, field.TypeOther, value)
		_node.PurchasePrice = value
	}
	if value, ok := pc.mutation.SalePrice(); ok {
		_spec.SetField(product.FieldSalePrice, field.TypeOther, value)
		_node.SalePrice = value
	}
	if value, ok := pc.mutation.CurrentStock(); ok {
		_spec.SetField(product.FieldCurrentStock, field.TypeInt, value)
		_node.CurrentStock = value
	}
	if value, ok := pc.mutation.MinStock(); ok {
		_spec.SetField(product.FieldMinStock, field.TypeInt, value)
		_node.MinStock = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(product.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := pc.mutation.FactoryID(); ok {
		_spec.SetField(product.FieldFactoryID, field.TypeString, value)
		_node.FactoryID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Product.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProductUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *ProductCreate) OnConflict(opts ...sql.ConflictOption) *ProductUpsertOne {
	pc.conflict = opts
	return &ProductUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *ProductCreate) OnConflictColumns(columns ...string) *ProductUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &ProductUpsertOne{
		create: pc,
	}
}

type (
	// ProductUpsertOne is the builder for "upsert"-ing
	//  one Product node.
	ProductUpsertOne struct {
		create *ProductCreate
	}

	// ProductUpsert is the "OnConflict" setter.
	ProductUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ProductUpsert) SetUpdatedAt(v int64) *ProductUpsert {
	u.Set(product.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProductUpsert) UpdateUpdatedAt() *ProductUpsert {
	u.SetExcluded(product.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ProductUpsert) AddUpdatedAt(v int64) *ProductUpsert {
	u.Add(product.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ProductUpsert) SetDeletedAt(v int64) *ProductUpsert {
	u.Set(product.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ProductUpsert) UpdateDeletedAt() *ProductUpsert {
	u.SetExcluded(product.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ProductUpsert) AddDeletedAt(v int64) *ProductUpsert {
	u.Add(product.FieldDeletedAt, v)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ProductUpsert) ClearDeletedAt() *ProductUpsert {
	u.SetNull(product.FieldDeletedAt)
	return u
}

// SetTenantCode sets the "tenant_code" field.
func (u *ProductUpsert) SetTenantCode(v string) *ProductUpsert {
	u.Set(product.FieldTenantCode, v)
	return u
}

// UpdateTenantCode sets the "tenant_code" field to the value that was provided on create.
func (u *ProductUpsert) UpdateTenantCode() *ProductUpsert {
	u.SetExcluded(product.FieldTenantCode)
	return u
}

// SetProductID sets the "product_id" field.
func (u *ProductUpsert) SetProductID(v string) *ProductUpsert {
	u.Set(product.FieldProductID, v)
	return u
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *ProductUpsert) UpdateProductID() *ProductUpsert {
	u.SetExcluded(product.FieldProductID)
	return u
}

// SetProductName sets the "product_name" field.
func (u *ProductUpsert) SetProductName(v string) *ProductUpsert {
	u.Set(product.FieldProductName, v)
	return u
}

// UpdateProductName sets the "product_name" field to the value that was provided on create.
func (u *ProductUpsert) UpdateProductName() *ProductUpsert {
	u.SetExcluded(product.FieldProductName)
	return u
}

// SetUnit sets the "unit" field.
func (u *ProductUpsert) SetUnit(v string) *ProductUpsert {
	u.Set(product.FieldUnit, v)
	return u
}

// UpdateUnit sets the "unit" field to the value that was provided on create.
func (u *ProductUpsert) UpdateUnit() *ProductUpsert {
	u.SetExcluded(product.FieldUnit)
	return u
}

// SetPurchasePrice sets the "purchase_price" field.
func (u *ProductUpsert) SetPurchasePrice(v decimal.Decimal) *ProductUpsert {
	u.Set(product.FieldPurchasePrice, v)
	return u
}

// UpdatePurchasePrice sets the "purchase_price" field to the value that was provided on create.
func (u *ProductUpsert) UpdatePurchasePrice() *ProductUpsert {
	u.SetExcluded(product.FieldPurchasePrice)
	return u
}

// SetSalePrice sets the "sale_price" field.
func (u *ProductUpsert) SetSalePrice(v decimal.Decimal) *ProductUpsert {
	u.Set(product.FieldSalePrice, v)
	return u
}

// UpdateSalePrice sets the "sale_price" field to the value that was provided on create.
func (u *ProductUpsert) UpdateSalePrice() *ProductUpsert {
	u.SetExcluded(product.FieldSalePrice)
	return u
}

// SetCurrentStock sets the "current_stock" field.
func (u *ProductUpsert) SetCurrentStock(v int) *ProductUpsert {
	u.Set(product.FieldCurrentStock, v)
	return u
}

// UpdateCurrentStock sets the "current_stock" field to the value that was provided on create.
func (u *ProductUpsert) UpdateCurrentStock() *ProductUpsert {
	u.SetExcluded(product.FieldCurrentStock)
	return u
}

// AddCurrentStock adds v to the "current_stock" field.
func (u *ProductUpsert) AddCurrentStock(v int) *ProductUpsert {
	u.Add(product.FieldCurrentStock, v)
	return u
}

// SetMinStock sets the "min_stock" field.
func (u *ProductUpsert) SetMinStock(v int) *ProductUpsert {
	u.Set(product.FieldMinStock, v)
	return u
}

// UpdateMinStock sets the "min_stock" field to the value that was provided on create.
func (u *ProductUpsert) UpdateMinStock() *ProductUpsert {
	u.SetExcluded(product.FieldMinStock)
	return u
}

// AddMinStock adds v to the "min_stock" field.
func (u *ProductUpsert) AddMinStock(v int) *ProductUpsert {
	u.Add(product.FieldMinStock, v)
	return u
}

// SetStatus sets the "status" field.
func (u *ProductUpsert) SetStatus(v int) *ProductUpsert {
	u.Set(product.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ProductUpsert) UpdateStatus() *ProductUpsert {
	u.SetExcluded(product.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *ProductUpsert) AddStatus(v int) *ProductUpsert {
	u.Add(product.FieldStatus, v)
	return u
}

// SetFactoryID sets the "factory_id" field.
func (u *ProductUpsert) SetFactoryID(v string) *ProductUpsert {
	u.Set(product.FieldFactoryID, v)
	return u
}

// UpdateFactoryID sets the "factory_id" field to the value that was provided on create.
func (u *ProductUpsert) UpdateFactoryID() *ProductUpsert {
	u.SetExcluded(product.FieldFactoryID)
	return u
}

// ClearFactoryID clears the value of the "factory_id" field.
func (u *ProductUpsert) ClearFactoryID() *ProductUpsert {
	u.SetNull(product.FieldFactoryID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProductUpsertOne) UpdateNewValues() *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(product.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Product.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProductUpsertOne) Ignore() *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProductUpsertOne) DoNothing() *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProductCreate.OnConflict
// documentation for more info.
func (u *ProductUpsertOne) Update(set func(*ProductUpsert)) *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProductUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProductUpsertOne) SetUpdatedAt(v int64) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ProductUpsertOne) AddUpdatedAt(v int64) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateUpdatedAt() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ProductUpsertOne) SetDeletedAt(v int64) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ProductUpsertOne) AddDeletedAt(v int64) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateDeletedAt() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ProductUpsertOne) ClearDeletedAt() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTenantCode sets the "tenant_code" field.
func (u *ProductUpsertOne) SetTenantCode(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetTenantCode(v)
	})
}

// UpdateTenantCode sets the "tenant_code" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateTenantCode() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateTenantCode()
	})
}

// SetProductID sets the "product_id" field.
func (u *ProductUpsertOne) SetProductID(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetProductID(v)
	})
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateProductID() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateProductID()
	})
}

// SetProductName sets the "product_name" field.
func (u *ProductUpsertOne) SetProductName(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetProductName(v)
	})
}

// UpdateProductName sets the "product_name" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateProductName() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateProductName()
	})
}

// SetUnit sets the "unit" field.
func (u *ProductUpsertOne) SetUnit(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetUnit(v)
	})
}

// UpdateUnit sets the "unit" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateUnit() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateUnit()
	})
}

// SetPurchasePrice sets the "purchase_price" field.
func (u *ProductUpsertOne) SetPurchasePrice(v decimal.Decimal) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetPurchasePrice(v)
	})
}

// UpdatePurchasePrice sets the "purchase_price" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdatePurchasePrice() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdatePurchasePrice()
	})
}

// SetSalePrice sets the "sale_price" field.
func (u *ProductUpsertOne) SetSalePrice(v decimal.Decimal) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetSalePrice(v)
	})
}

// UpdateSalePrice sets the "sale_price" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateSalePrice() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateSalePrice()
	})
}

// SetCurrentStock sets the "current_stock" field.
func (u *ProductUpsertOne) SetCurrentStock(v int) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetCurrentStock(v)
	})
}

// AddCurrentStock adds v to the "current_stock" field.
func (u *ProductUpsertOne) AddCurrentStock(v int) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddCurrentStock(v)
	})
}

// UpdateCurrentStock sets the "current_stock" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateCurrentStock() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateCurrentStock()
	})
}

// SetMinStock sets the "min_stock" field.
func (u *ProductUpsertOne) SetMinStock(v int) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetMinStock(v)
	})
}

// AddMinStock adds v to the "min_stock" field.
func (u *ProductUpsertOne) AddMinStock(v int) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddMinStock(v)
	})
}

// UpdateMinStock sets the "min_stock" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateMinStock() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateMinStock()
	})
}

// SetStatus sets the "status" field.
func (u *ProductUpsertOne) SetStatus(v int) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *ProductUpsertOne) AddStatus(v int) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateStatus() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateStatus()
	})
}

// SetFactoryID sets the "factory_id" field.
func (u *ProductUpsertOne) SetFactoryID(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetFactoryID(v)
	})
}

// UpdateFactoryID sets the "factory_id" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateFactoryID() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateFactoryID()
	})
}

// ClearFactoryID clears the value of the "factory_id" field.
func (u *ProductUpsertOne) ClearFactoryID() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.ClearFactoryID()
	})
}

// Exec executes the query.
func (u *ProductUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for ProductCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProductUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProductUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProductUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProductCreateBulk is the builder for creating many Product entities in bulk.
type ProductCreateBulk struct {
	config
	err      error
	builders []*ProductCreate
	conflict []sql.ConflictOption
}

// Save creates the Product entities in the database.
func (pcb *ProductCreateBulk) Save(ctx context.Context) ([]*Product, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Product, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProductCreateBulk) SaveX(ctx context.Context) []*Product {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProductCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProductCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Product.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProductUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *ProductCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProductUpsertBulk {
	pcb.conflict = opts
	return &ProductUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *ProductCreateBulk) OnConflictColumns(columns ...string) *ProductUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &ProductUpsertBulk{
		create: pcb,
	}
}

// ProductUpsertBulk is the builder for "upsert"-ing
// a bulk of Product nodes.
type ProductUpsertBulk struct {
	create *ProductCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProductUpsertBulk) UpdateNewValues() *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(product.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProductUpsertBulk) Ignore() *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProductUpsertBulk) DoNothing() *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProductCreateBulk.OnConflict
// documentation for more info.
func (u *ProductUpsertBulk) Update(set func(*ProductUpsert)) *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProductUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProductUpsertBulk) SetUpdatedAt(v int64) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ProductUpsertBulk) AddUpdatedAt(v int64) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateUpdatedAt() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ProductUpsertBulk) SetDeletedAt(v int64) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ProductUpsertBulk) AddDeletedAt(v int64) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateDeletedAt() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ProductUpsertBulk) ClearDeletedAt() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTenantCode sets the "tenant_code" field.
func (u *ProductUpsertBulk) SetTenantCode(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetTenantCode(v)
	})
}

// UpdateTenantCode sets the "tenant_code" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateTenantCode() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateTenantCode()
	})
}

// SetProductID sets the "product_id" field.
func (u *ProductUpsertBulk) SetProductID(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetProductID(v)
	})
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateProductID() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateProductID()
	})
}

// SetProductName sets the "product_name" field.
func (u *ProductUpsertBulk) SetProductName(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetProductName(v)
	})
}

// UpdateProductName sets the "product_name" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateProductName() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateProductName()
	})
}

// SetUnit sets the "unit" field.
func (u *ProductUpsertBulk) SetUnit(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetUnit(v)
	})
}

// UpdateUnit sets the "unit" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateUnit() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateUnit()
	})
}

// SetPurchasePrice sets the "purchase_price" field.
func (u *ProductUpsertBulk) SetPurchasePrice(v decimal.Decimal) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetPurchasePrice(v)
	})
}

// UpdatePurchasePrice sets the "purchase_price" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdatePurchasePrice() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdatePurchasePrice()
	})
}

// SetSalePrice sets the "sale_price" field.
func (u *ProductUpsertBulk) SetSalePrice(v decimal.Decimal) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetSalePrice(v)
	})
}

// UpdateSalePrice sets the "sale_price" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateSalePrice() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateSalePrice()
	})
}

// SetCurrentStock sets the "current_stock" field.
func (u *ProductUpsertBulk) SetCurrentStock(v int) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetCurrentStock(v)
	})
}

// AddCurrentStock adds v to the "current_stock" field.
func (u *ProductUpsertBulk) AddCurrentStock(v int) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddCurrentStock(v)
	})
}

// UpdateCurrentStock sets the "current_stock" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateCurrentStock() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateCurrentStock()
	})
}

// SetMinStock sets the "min_stock" field.
func (u *ProductUpsertBulk) SetMinStock(v int) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetMinStock(v)
	})
}

// AddMinStock adds v to the "min_stock" field.
func (u *ProductUpsertBulk) AddMinStock(v int) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddMinStock(v)
	})
}

// UpdateMinStock sets the "min_stock" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateMinStock() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateMinStock()
	})
}

// SetStatus sets the "status" field.
func (u *ProductUpsertBulk) SetStatus(v int) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *ProductUpsertBulk) AddStatus(v int) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateStatus() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateStatus()
	})
}

// SetFactoryID sets the "factory_id" field.
func (u *ProductUpsertBulk) SetFactoryID(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetFactoryID(v)
	})
}

// UpdateFactoryID sets the "factory_id" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateFactoryID() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateFactoryID()
	})
}

// ClearFactoryID clears the value of the "factory_id" field.
func (u *ProductUpsertBulk) ClearFactoryID() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.ClearFactoryID()
	})
}

// Exec executes the query.
func (u *ProductUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the ProductCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for ProductCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProductUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
