// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/productstatistics"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

// ProductStatisticsCreate is the builder for creating a ProductStatistics entity.
type ProductStatisticsCreate struct {
	config
	mutation *ProductStatisticsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (psc *ProductStatisticsCreate) SetCreatedAt(i int64) *ProductStatisticsCreate {
	psc.mutation.SetCreatedAt(i)
	return psc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (psc *ProductStatisticsCreate) SetNillableCreatedAt(i *int64) *ProductStatisticsCreate {
	if i != nil {
		psc.SetCreatedAt(*i)
	}
	return psc
}

// SetUpdatedAt sets the "updated_at" field.
func (psc *ProductStatisticsCreate) SetUpdatedAt(i int64) *ProductStatisticsCreate {
	psc.mutation.SetUpdatedAt(i)
	return psc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (psc *ProductStatisticsCreate) SetNillableUpdatedAt(i *int64) *ProductStatisticsCreate {
	if i != nil {
		psc.SetUpdatedAt(*i)
	}
	return psc
}

// SetTenantCode sets the "tenant_code" field.
func (psc *ProductStatisticsCreate) SetTenantCode(s string) *ProductStatisticsCreate {
	psc.mutation.SetTenantCode(s)
	return psc
}

// SetTotalProducts sets the "total_products" field.
func (psc *ProductStatisticsCreate) SetTotalProducts(i int) *ProductStatisticsCreate {
	psc.mutation.SetTotalProducts(i)
	return psc
}

// SetNillableTotalProducts sets the "total_products" field if the given value is not nil.
func (psc *ProductStatisticsCreate) SetNillableTotalProducts(i *int) *ProductStatisticsCreate {
	if i != nil {
		psc.SetTotalProducts(*i)
	}
	return psc
}

// SetActiveProducts sets the "active_products" field.
func (psc *ProductStatisticsCreate) SetActiveProducts(i int) *ProductStatisticsCreate {
	psc.mutation.SetActiveProducts(i)
	return psc
}

// SetNillableActiveProducts sets the "active_products" field if the given value is not nil.
func (psc *ProductStatisticsCreate) SetNillableActiveProducts(i *int) *ProductStatisticsCreate {
	if i != nil {
		psc.SetActiveProducts(*i)
	}
	return psc
}

// SetTotalStock sets the "total_stock" field.
func (psc *ProductStatisticsCreate) SetTotalStock(i int) *ProductStatisticsCreate {
	psc.mutation.SetTotalStock(i)
	return psc
}

// SetNillableTotalStock sets the "total_stock" field if the given value is not nil.
func (psc *ProductStatisticsCreate) SetNillableTotalStock(i *int) *ProductStatisticsCreate {
	if i != nil {
		psc.SetTotalStock(*i)
	}
	return psc
}

// SetTotalStockValue sets the "total_stock_value" field.
func (psc *ProductStatisticsCreate) SetTotalStockValue(d decimal.Decimal) *ProductStatisticsCreate {
	psc.mutation.SetTotalStockValue(d)
	return psc
}

// SetNillableTotalStockValue sets the "total_stock_value" field if the given value is not nil.
func (psc *ProductStatisticsCreate) SetNillableTotalStockValue(d *decimal.Decimal) *ProductStatisticsCreate {
	if d != nil {
		psc.SetTotalStockValue(*d)
	}
	return psc
}

// SetLowStockProducts sets the "low_stock_products" field.
func (psc *ProductStatisticsCreate) SetLowStockProducts(i int) *ProductStatisticsCreate {
	psc.mutation.SetLowStockProducts(i)
	return psc
}

// SetNillableLowStockProducts sets the "low_stock_products" field if the given value is not nil.
func (psc *ProductStatisticsCreate) SetNillableLowStockProducts(i *int) *ProductStatisticsCreate {
	if i != nil {
		psc.SetLowStockProducts(*i)
	}
	return psc
}

// SetTotalInQuantity sets the "total_in_quantity" field.
func (psc *ProductStatisticsCreate) SetTotalInQuantity(i int) *ProductStatisticsCreate {
	psc.mutation.SetTotalInQuantity(i)
	return psc
}

// SetNillableTotalInQuantity sets the "total_in_quantity" field if the given value is not nil.
func (psc *ProductStatisticsCreate) SetNillableTotalInQuantity(i *int) *ProductStatisticsCreate {
	if i != nil {
		psc.SetTotalInQuantity(*i)
	}
	return psc
}

// SetTotalInAmount sets the "total_in_amount" field.
func (psc *ProductStatisticsCreate) SetTotalInAmount(d decimal.Decimal) *ProductStatisticsCreate {
	psc.mutation.SetTotalInAmount(d)
	return psc
}

// SetNillableTotalInAmount sets the "total_in_amount" field if the given value is not nil.
func (psc *ProductStatisticsCreate) SetNillableTotalInAmount(d *decimal.Decimal) *ProductStatisticsCreate {
	if d != nil {
		psc.SetTotalInAmount(*d)
	}
	return psc
}

// SetTotalOutQuantity sets the "total_out_quantity" field.
func (psc *ProductStatisticsCreate) SetTotalOutQuantity(i int) *ProductStatisticsCreate {
	psc.mutation.SetTotalOutQuantity(i)
	return psc
}

// SetNillableTotalOutQuantity sets the "total_out_quantity" field if the given value is not nil.
func (psc *ProductStatisticsCreate) SetNillableTotalOutQuantity(i *int) *ProductStatisticsCreate {
	if i != nil {
		psc.SetTotalOutQuantity(*i)
	}
	return psc
}

// SetTotalOutAmount sets the "total_out_amount" field.
func (psc *ProductStatisticsCreate) SetTotalOutAmount(d decimal.Decimal) *ProductStatisticsCreate {
	psc.mutation.SetTotalOutAmount(d)
	return psc
}

// SetNillableTotalOutAmount sets the "total_out_amount" field if the given value is not nil.
func (psc *ProductStatisticsCreate) SetNillableTotalOutAmount(d *decimal.Decimal) *ProductStatisticsCreate {
	if d != nil {
		psc.SetTotalOutAmount(*d)
	}
	return psc
}

// SetTotalSalesAmount sets the "total_sales_amount" field.
func (psc *ProductStatisticsCreate) SetTotalSalesAmount(d decimal.Decimal) *ProductStatisticsCreate {
	psc.mutation.SetTotalSalesAmount(d)
	return psc
}

// SetNillableTotalSalesAmount sets the "total_sales_amount" field if the given value is not nil.
func (psc *ProductStatisticsCreate) SetNillableTotalSalesAmount(d *decimal.Decimal) *ProductStatisticsCreate {
	if d != nil {
		psc.SetTotalSalesAmount(*d)
	}
	return psc
}

// SetTotalSalesQuantity sets the "total_sales_quantity" field.
func (psc *ProductStatisticsCreate) SetTotalSalesQuantity(i int) *ProductStatisticsCreate {
	psc.mutation.SetTotalSalesQuantity(i)
	return psc
}

// SetNillableTotalSalesQuantity sets the "total_sales_quantity" field if the given value is not nil.
func (psc *ProductStatisticsCreate) SetNillableTotalSalesQuantity(i *int) *ProductStatisticsCreate {
	if i != nil {
		psc.SetTotalSalesQuantity(*i)
	}
	return psc
}

// Mutation returns the ProductStatisticsMutation object of the builder.
func (psc *ProductStatisticsCreate) Mutation() *ProductStatisticsMutation {
	return psc.mutation
}

// Save creates the ProductStatistics in the database.
func (psc *ProductStatisticsCreate) Save(ctx context.Context) (*ProductStatistics, error) {
	psc.defaults()
	return withHooks(ctx, psc.sqlSave, psc.mutation, psc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (psc *ProductStatisticsCreate) SaveX(ctx context.Context) *ProductStatistics {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psc *ProductStatisticsCreate) Exec(ctx context.Context) error {
	_, err := psc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psc *ProductStatisticsCreate) ExecX(ctx context.Context) {
	if err := psc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psc *ProductStatisticsCreate) defaults() {
	if _, ok := psc.mutation.CreatedAt(); !ok {
		v := productstatistics.DefaultCreatedAt
		psc.mutation.SetCreatedAt(v)
	}
	if _, ok := psc.mutation.UpdatedAt(); !ok {
		v := productstatistics.DefaultUpdatedAt
		psc.mutation.SetUpdatedAt(v)
	}
	if _, ok := psc.mutation.TotalProducts(); !ok {
		v := productstatistics.DefaultTotalProducts
		psc.mutation.SetTotalProducts(v)
	}
	if _, ok := psc.mutation.ActiveProducts(); !ok {
		v := productstatistics.DefaultActiveProducts
		psc.mutation.SetActiveProducts(v)
	}
	if _, ok := psc.mutation.TotalStock(); !ok {
		v := productstatistics.DefaultTotalStock
		psc.mutation.SetTotalStock(v)
	}
	if _, ok := psc.mutation.TotalStockValue(); !ok {
		v := productstatistics.DefaultTotalStockValue
		psc.mutation.SetTotalStockValue(v)
	}
	if _, ok := psc.mutation.LowStockProducts(); !ok {
		v := productstatistics.DefaultLowStockProducts
		psc.mutation.SetLowStockProducts(v)
	}
	if _, ok := psc.mutation.TotalInQuantity(); !ok {
		v := productstatistics.DefaultTotalInQuantity
		psc.mutation.SetTotalInQuantity(v)
	}
	if _, ok := psc.mutation.TotalInAmount(); !ok {
		v := productstatistics.DefaultTotalInAmount
		psc.mutation.SetTotalInAmount(v)
	}
	if _, ok := psc.mutation.TotalOutQuantity(); !ok {
		v := productstatistics.DefaultTotalOutQuantity
		psc.mutation.SetTotalOutQuantity(v)
	}
	if _, ok := psc.mutation.TotalOutAmount(); !ok {
		v := productstatistics.DefaultTotalOutAmount
		psc.mutation.SetTotalOutAmount(v)
	}
	if _, ok := psc.mutation.TotalSalesAmount(); !ok {
		v := productstatistics.DefaultTotalSalesAmount
		psc.mutation.SetTotalSalesAmount(v)
	}
	if _, ok := psc.mutation.TotalSalesQuantity(); !ok {
		v := productstatistics.DefaultTotalSalesQuantity
		psc.mutation.SetTotalSalesQuantity(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psc *ProductStatisticsCreate) check() error {
	if _, ok := psc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "ProductStatistics.created_at"`)}
	}
	if _, ok := psc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "ProductStatistics.updated_at"`)}
	}
	if _, ok := psc.mutation.TenantCode(); !ok {
		return &ValidationError{Name: "tenant_code", err: errors.New(`generated: missing required field "ProductStatistics.tenant_code"`)}
	}
	if _, ok := psc.mutation.TotalProducts(); !ok {
		return &ValidationError{Name: "total_products", err: errors.New(`generated: missing required field "ProductStatistics.total_products"`)}
	}
	if _, ok := psc.mutation.ActiveProducts(); !ok {
		return &ValidationError{Name: "active_products", err: errors.New(`generated: missing required field "ProductStatistics.active_products"`)}
	}
	if _, ok := psc.mutation.TotalStock(); !ok {
		return &ValidationError{Name: "total_stock", err: errors.New(`generated: missing required field "ProductStatistics.total_stock"`)}
	}
	if _, ok := psc.mutation.TotalStockValue(); !ok {
		return &ValidationError{Name: "total_stock_value", err: errors.New(`generated: missing required field "ProductStatistics.total_stock_value"`)}
	}
	if _, ok := psc.mutation.LowStockProducts(); !ok {
		return &ValidationError{Name: "low_stock_products", err: errors.New(`generated: missing required field "ProductStatistics.low_stock_products"`)}
	}
	if _, ok := psc.mutation.TotalInQuantity(); !ok {
		return &ValidationError{Name: "total_in_quantity", err: errors.New(`generated: missing required field "ProductStatistics.total_in_quantity"`)}
	}
	if _, ok := psc.mutation.TotalInAmount(); !ok {
		return &ValidationError{Name: "total_in_amount", err: errors.New(`generated: missing required field "ProductStatistics.total_in_amount"`)}
	}
	if _, ok := psc.mutation.TotalOutQuantity(); !ok {
		return &ValidationError{Name: "total_out_quantity", err: errors.New(`generated: missing required field "ProductStatistics.total_out_quantity"`)}
	}
	if _, ok := psc.mutation.TotalOutAmount(); !ok {
		return &ValidationError{Name: "total_out_amount", err: errors.New(`generated: missing required field "ProductStatistics.total_out_amount"`)}
	}
	if _, ok := psc.mutation.TotalSalesAmount(); !ok {
		return &ValidationError{Name: "total_sales_amount", err: errors.New(`generated: missing required field "ProductStatistics.total_sales_amount"`)}
	}
	if _, ok := psc.mutation.TotalSalesQuantity(); !ok {
		return &ValidationError{Name: "total_sales_quantity", err: errors.New(`generated: missing required field "ProductStatistics.total_sales_quantity"`)}
	}
	return nil
}

func (psc *ProductStatisticsCreate) sqlSave(ctx context.Context) (*ProductStatistics, error) {
	if err := psc.check(); err != nil {
		return nil, err
	}
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	psc.mutation.id = &_node.ID
	psc.mutation.done = true
	return _node, nil
}

func (psc *ProductStatisticsCreate) createSpec() (*ProductStatistics, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductStatistics{config: psc.config}
		_spec = sqlgraph.NewCreateSpec(productstatistics.Table, sqlgraph.NewFieldSpec(productstatistics.FieldID, field.TypeInt))
	)
	_spec.OnConflict = psc.conflict
	if value, ok := psc.mutation.CreatedAt(); ok {
		_spec.SetField(productstatistics.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := psc.mutation.UpdatedAt(); ok {
		_spec.SetField(productstatistics.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := psc.mutation.TenantCode(); ok {
		_spec.SetField(productstatistics.FieldTenantCode, field.TypeString, value)
		_node.TenantCode = value
	}
	if value, ok := psc.mutation.TotalProducts(); ok {
		_spec.SetField(productstatistics.FieldTotalProducts, field.TypeInt, value)
		_node.TotalProducts = value
	}
	if value, ok := psc.mutation.ActiveProducts(); ok {
		_spec.SetField(productstatistics.FieldActiveProducts, field.TypeInt, value)
		_node.ActiveProducts = value
	}
	if value, ok := psc.mutation.TotalStock(); ok {
		_spec.SetField(productstatistics.FieldTotalStock, field.TypeInt, value)
		_node.TotalStock = value
	}
	if value, ok := psc.mutation.TotalStockValue(); ok {
		_spec.SetField(productstatistics.FieldTotalStockValue, field.TypeOther, value)
		_node.TotalStockValue = value
	}
	if value, ok := psc.mutation.LowStockProducts(); ok {
		_spec.SetField(productstatistics.FieldLowStockProducts, field.TypeInt, value)
		_node.LowStockProducts = value
	}
	if value, ok := psc.mutation.TotalInQuantity(); ok {
		_spec.SetField(productstatistics.FieldTotalInQuantity, field.TypeInt, value)
		_node.TotalInQuantity = value
	}
	if value, ok := psc.mutation.TotalInAmount(); ok {
		_spec.SetField(productstatistics.FieldTotalInAmount, field.TypeOther, value)
		_node.TotalInAmount = value
	}
	if value, ok := psc.mutation.TotalOutQuantity(); ok {
		_spec.SetField(productstatistics.FieldTotalOutQuantity, field.TypeInt, value)
		_node.TotalOutQuantity = value
	}
	if value, ok := psc.mutation.TotalOutAmount(); ok {
		_spec.SetField(productstatistics.FieldTotalOutAmount, field.TypeOther, value)
		_node.TotalOutAmount = value
	}
	if value, ok := psc.mutation.TotalSalesAmount(); ok {
		_spec.SetField(productstatistics.FieldTotalSalesAmount, field.TypeOther, value)
		_node.TotalSalesAmount = value
	}
	if value, ok := psc.mutation.TotalSalesQuantity(); ok {
		_spec.SetField(productstatistics.FieldTotalSalesQuantity, field.TypeInt, value)
		_node.TotalSalesQuantity = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProductStatistics.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProductStatisticsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (psc *ProductStatisticsCreate) OnConflict(opts ...sql.ConflictOption) *ProductStatisticsUpsertOne {
	psc.conflict = opts
	return &ProductStatisticsUpsertOne{
		create: psc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProductStatistics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (psc *ProductStatisticsCreate) OnConflictColumns(columns ...string) *ProductStatisticsUpsertOne {
	psc.conflict = append(psc.conflict, sql.ConflictColumns(columns...))
	return &ProductStatisticsUpsertOne{
		create: psc,
	}
}

type (
	// ProductStatisticsUpsertOne is the builder for "upsert"-ing
	//  one ProductStatistics node.
	ProductStatisticsUpsertOne struct {
		create *ProductStatisticsCreate
	}

	// ProductStatisticsUpsert is the "OnConflict" setter.
	ProductStatisticsUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ProductStatisticsUpsert) SetUpdatedAt(v int64) *ProductStatisticsUpsert {
	u.Set(productstatistics.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProductStatisticsUpsert) UpdateUpdatedAt() *ProductStatisticsUpsert {
	u.SetExcluded(productstatistics.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ProductStatisticsUpsert) AddUpdatedAt(v int64) *ProductStatisticsUpsert {
	u.Add(productstatistics.FieldUpdatedAt, v)
	return u
}

// SetTenantCode sets the "tenant_code" field.
func (u *ProductStatisticsUpsert) SetTenantCode(v string) *ProductStatisticsUpsert {
	u.Set(productstatistics.FieldTenantCode, v)
	return u
}

// UpdateTenantCode sets the "tenant_code" field to the value that was provided on create.
func (u *ProductStatisticsUpsert) UpdateTenantCode() *ProductStatisticsUpsert {
	u.SetExcluded(productstatistics.FieldTenantCode)
	return u
}

// SetTotalProducts sets the "total_products" field.
func (u *ProductStatisticsUpsert) SetTotalProducts(v int) *ProductStatisticsUpsert {
	u.Set(productstatistics.FieldTotalProducts, v)
	return u
}

// UpdateTotalProducts sets the "total_products" field to the value that was provided on create.
func (u *ProductStatisticsUpsert) UpdateTotalProducts() *ProductStatisticsUpsert {
	u.SetExcluded(productstatistics.FieldTotalProducts)
	return u
}

// AddTotalProducts adds v to the "total_products" field.
func (u *ProductStatisticsUpsert) AddTotalProducts(v int) *ProductStatisticsUpsert {
	u.Add(productstatistics.FieldTotalProducts, v)
	return u
}

// SetActiveProducts sets the "active_products" field.
func (u *ProductStatisticsUpsert) SetActiveProducts(v int) *ProductStatisticsUpsert {
	u.Set(productstatistics.FieldActiveProducts, v)
	return u
}

// UpdateActiveProducts sets the "active_products" field to the value that was provided on create.
func (u *ProductStatisticsUpsert) UpdateActiveProducts() *ProductStatisticsUpsert {
	u.SetExcluded(productstatistics.FieldActiveProducts)
	return u
}

// AddActiveProducts adds v to the "active_products" field.
func (u *ProductStatisticsUpsert) AddActiveProducts(v int) *ProductStatisticsUpsert {
	u.Add(productstatistics.FieldActiveProducts, v)
	return u
}

// SetTotalStock sets the "total_stock" field.
func (u *ProductStatisticsUpsert) SetTotalStock(v int) *ProductStatisticsUpsert {
	u.Set(productstatistics.FieldTotalStock, v)
	return u
}

// UpdateTotalStock sets the "total_stock" field to the value that was provided on create.
func (u *ProductStatisticsUpsert) UpdateTotalStock() *ProductStatisticsUpsert {
	u.SetExcluded(productstatistics.FieldTotalStock)
	return u
}

// AddTotalStock adds v to the "total_stock" field.
func (u *ProductStatisticsUpsert) AddTotalStock(v int) *ProductStatisticsUpsert {
	u.Add(productstatistics.FieldTotalStock, v)
	return u
}

// SetTotalStockValue sets the "total_stock_value" field.
func (u *ProductStatisticsUpsert) SetTotalStockValue(v decimal.Decimal) *ProductStatisticsUpsert {
	u.Set(productstatistics.FieldTotalStockValue, v)
	return u
}

// UpdateTotalStockValue sets the "total_stock_value" field to the value that was provided on create.
func (u *ProductStatisticsUpsert) UpdateTotalStockValue() *ProductStatisticsUpsert {
	u.SetExcluded(productstatistics.FieldTotalStockValue)
	return u
}

// SetLowStockProducts sets the "low_stock_products" field.
func (u *ProductStatisticsUpsert) SetLowStockProducts(v int) *ProductStatisticsUpsert {
	u.Set(productstatistics.FieldLowStockProducts, v)
	return u
}

// UpdateLowStockProducts sets the "low_stock_products" field to the value that was provided on create.
func (u *ProductStatisticsUpsert) UpdateLowStockProducts() *ProductStatisticsUpsert {
	u.SetExcluded(productstatistics.FieldLowStockProducts)
	return u
}

// AddLowStockProducts adds v to the "low_stock_products" field.
func (u *ProductStatisticsUpsert) AddLowStockProducts(v int) *ProductStatisticsUpsert {
	u.Add(productstatistics.FieldLowStockProducts, v)
	return u
}

// SetTotalInQuantity sets the "total_in_quantity" field.
func (u *ProductStatisticsUpsert) SetTotalInQuantity(v int) *ProductStatisticsUpsert {
	u.Set(productstatistics.FieldTotalInQuantity, v)
	return u
}

// UpdateTotalInQuantity sets the "total_in_quantity" field to the value that was provided on create.
func (u *ProductStatisticsUpsert) UpdateTotalInQuantity() *ProductStatisticsUpsert {
	u.SetExcluded(productstatistics.FieldTotalInQuantity)
	return u
}

// AddTotalInQuantity adds v to the "total_in_quantity" field.
func (u *ProductStatisticsUpsert) AddTotalInQuantity(v int) *ProductStatisticsUpsert {
	u.Add(productstatistics.FieldTotalInQuantity, v)
	return u
}

// SetTotalInAmount sets the "total_in_amount" field.
func (u *ProductStatisticsUpsert) SetTotalInAmount(v decimal.Decimal) *ProductStatisticsUpsert {
	u.Set(productstatistics.FieldTotalInAmount, v)
	return u
}

// UpdateTotalInAmount sets the "total_in_amount" field to the value that was provided on create.
func (u *ProductStatisticsUpsert) UpdateTotalInAmount() *ProductStatisticsUpsert {
	u.SetExcluded(productstatistics.FieldTotalInAmount)
	return u
}

// SetTotalOutQuantity sets the "total_out_quantity" field.
func (u *ProductStatisticsUpsert) SetTotalOutQuantity(v int) *ProductStatisticsUpsert {
	u.Set(productstatistics.FieldTotalOutQuantity, v)
	return u
}

// UpdateTotalOutQuantity sets the "total_out_quantity" field to the value that was provided on create.
func (u *ProductStatisticsUpsert) UpdateTotalOutQuantity() *ProductStatisticsUpsert {
	u.SetExcluded(productstatistics.FieldTotalOutQuantity)
	return u
}

// AddTotalOutQuantity adds v to the "total_out_quantity" field.
func (u *ProductStatisticsUpsert) AddTotalOutQuantity(v int) *ProductStatisticsUpsert {
	u.Add(productstatistics.FieldTotalOutQuantity, v)
	return u
}

// SetTotalOutAmount sets the "total_out_amount" field.
func (u *ProductStatisticsUpsert) SetTotalOutAmount(v decimal.Decimal) *ProductStatisticsUpsert {
	u.Set(productstatistics.FieldTotalOutAmount, v)
	return u
}

// UpdateTotalOutAmount sets the "total_out_amount" field to the value that was provided on create.
func (u *ProductStatisticsUpsert) UpdateTotalOutAmount() *ProductStatisticsUpsert {
	u.SetExcluded(productstatistics.FieldTotalOutAmount)
	return u
}

// SetTotalSalesAmount sets the "total_sales_amount" field.
func (u *ProductStatisticsUpsert) SetTotalSalesAmount(v decimal.Decimal) *ProductStatisticsUpsert {
	u.Set(productstatistics.FieldTotalSalesAmount, v)
	return u
}

// UpdateTotalSalesAmount sets the "total_sales_amount" field to the value that was provided on create.
func (u *ProductStatisticsUpsert) UpdateTotalSalesAmount() *ProductStatisticsUpsert {
	u.SetExcluded(productstatistics.FieldTotalSalesAmount)
	return u
}

// SetTotalSalesQuantity sets the "total_sales_quantity" field.
func (u *ProductStatisticsUpsert) SetTotalSalesQuantity(v int) *ProductStatisticsUpsert {
	u.Set(productstatistics.FieldTotalSalesQuantity, v)
	return u
}

// UpdateTotalSalesQuantity sets the "total_sales_quantity" field to the value that was provided on create.
func (u *ProductStatisticsUpsert) UpdateTotalSalesQuantity() *ProductStatisticsUpsert {
	u.SetExcluded(productstatistics.FieldTotalSalesQuantity)
	return u
}

// AddTotalSalesQuantity adds v to the "total_sales_quantity" field.
func (u *ProductStatisticsUpsert) AddTotalSalesQuantity(v int) *ProductStatisticsUpsert {
	u.Add(productstatistics.FieldTotalSalesQuantity, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ProductStatistics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProductStatisticsUpsertOne) UpdateNewValues() *ProductStatisticsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(productstatistics.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProductStatistics.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProductStatisticsUpsertOne) Ignore() *ProductStatisticsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProductStatisticsUpsertOne) DoNothing() *ProductStatisticsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProductStatisticsCreate.OnConflict
// documentation for more info.
func (u *ProductStatisticsUpsertOne) Update(set func(*ProductStatisticsUpsert)) *ProductStatisticsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProductStatisticsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProductStatisticsUpsertOne) SetUpdatedAt(v int64) *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ProductStatisticsUpsertOne) AddUpdatedAt(v int64) *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProductStatisticsUpsertOne) UpdateUpdatedAt() *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTenantCode sets the "tenant_code" field.
func (u *ProductStatisticsUpsertOne) SetTenantCode(v string) *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.SetTenantCode(v)
	})
}

// UpdateTenantCode sets the "tenant_code" field to the value that was provided on create.
func (u *ProductStatisticsUpsertOne) UpdateTenantCode() *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.UpdateTenantCode()
	})
}

// SetTotalProducts sets the "total_products" field.
func (u *ProductStatisticsUpsertOne) SetTotalProducts(v int) *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.SetTotalProducts(v)
	})
}

// AddTotalProducts adds v to the "total_products" field.
func (u *ProductStatisticsUpsertOne) AddTotalProducts(v int) *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.AddTotalProducts(v)
	})
}

// UpdateTotalProducts sets the "total_products" field to the value that was provided on create.
func (u *ProductStatisticsUpsertOne) UpdateTotalProducts() *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.UpdateTotalProducts()
	})
}

// SetActiveProducts sets the "active_products" field.
func (u *ProductStatisticsUpsertOne) SetActiveProducts(v int) *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.SetActiveProducts(v)
	})
}

// AddActiveProducts adds v to the "active_products" field.
func (u *ProductStatisticsUpsertOne) AddActiveProducts(v int) *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.AddActiveProducts(v)
	})
}

// UpdateActiveProducts sets the "active_products" field to the value that was provided on create.
func (u *ProductStatisticsUpsertOne) UpdateActiveProducts() *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.UpdateActiveProducts()
	})
}

// SetTotalStock sets the "total_stock" field.
func (u *ProductStatisticsUpsertOne) SetTotalStock(v int) *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.SetTotalStock(v)
	})
}

// AddTotalStock adds v to the "total_stock" field.
func (u *ProductStatisticsUpsertOne) AddTotalStock(v int) *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.AddTotalStock(v)
	})
}

// UpdateTotalStock sets the "total_stock" field to the value that was provided on create.
func (u *ProductStatisticsUpsertOne) UpdateTotalStock() *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.UpdateTotalStock()
	})
}

// SetTotalStockValue sets the "total_stock_value" field.
func (u *ProductStatisticsUpsertOne) SetTotalStockValue(v decimal.Decimal) *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.SetTotalStockValue(v)
	})
}

// UpdateTotalStockValue sets the "total_stock_value" field to the value that was provided on create.
func (u *ProductStatisticsUpsertOne) UpdateTotalStockValue() *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.UpdateTotalStockValue()
	})
}

// SetLowStockProducts sets the "low_stock_products" field.
func (u *ProductStatisticsUpsertOne) SetLowStockProducts(v int) *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.SetLowStockProducts(v)
	})
}

// AddLowStockProducts adds v to the "low_stock_products" field.
func (u *ProductStatisticsUpsertOne) AddLowStockProducts(v int) *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.AddLowStockProducts(v)
	})
}

// UpdateLowStockProducts sets the "low_stock_products" field to the value that was provided on create.
func (u *ProductStatisticsUpsertOne) UpdateLowStockProducts() *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.UpdateLowStockProducts()
	})
}

// SetTotalInQuantity sets the "total_in_quantity" field.
func (u *ProductStatisticsUpsertOne) SetTotalInQuantity(v int) *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.SetTotalInQuantity(v)
	})
}

// AddTotalInQuantity adds v to the "total_in_quantity" field.
func (u *ProductStatisticsUpsertOne) AddTotalInQuantity(v int) *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.AddTotalInQuantity(v)
	})
}

// UpdateTotalInQuantity sets the "total_in_quantity" field to the value that was provided on create.
func (u *ProductStatisticsUpsertOne) UpdateTotalInQuantity() *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.UpdateTotalInQuantity()
	})
}

// SetTotalInAmount sets the "total_in_amount" field.
func (u *ProductStatisticsUpsertOne) SetTotalInAmount(v decimal.Decimal) *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.SetTotalInAmount(v)
	})
}

// UpdateTotalInAmount sets the "total_in_amount" field to the value that was provided on create.
func (u *ProductStatisticsUpsertOne) UpdateTotalInAmount() *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.UpdateTotalInAmount()
	})
}

// SetTotalOutQuantity sets the "total_out_quantity" field.
func (u *ProductStatisticsUpsertOne) SetTotalOutQuantity(v int) *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.SetTotalOutQuantity(v)
	})
}

// AddTotalOutQuantity adds v to the "total_out_quantity" field.
func (u *ProductStatisticsUpsertOne) AddTotalOutQuantity(v int) *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.AddTotalOutQuantity(v)
	})
}

// UpdateTotalOutQuantity sets the "total_out_quantity" field to the value that was provided on create.
func (u *ProductStatisticsUpsertOne) UpdateTotalOutQuantity() *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.UpdateTotalOutQuantity()
	})
}

// SetTotalOutAmount sets the "total_out_amount" field.
func (u *ProductStatisticsUpsertOne) SetTotalOutAmount(v decimal.Decimal) *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.SetTotalOutAmount(v)
	})
}

// UpdateTotalOutAmount sets the "total_out_amount" field to the value that was provided on create.
func (u *ProductStatisticsUpsertOne) UpdateTotalOutAmount() *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.UpdateTotalOutAmount()
	})
}

// SetTotalSalesAmount sets the "total_sales_amount" field.
func (u *ProductStatisticsUpsertOne) SetTotalSalesAmount(v decimal.Decimal) *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.SetTotalSalesAmount(v)
	})
}

// UpdateTotalSalesAmount sets the "total_sales_amount" field to the value that was provided on create.
func (u *ProductStatisticsUpsertOne) UpdateTotalSalesAmount() *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.UpdateTotalSalesAmount()
	})
}

// SetTotalSalesQuantity sets the "total_sales_quantity" field.
func (u *ProductStatisticsUpsertOne) SetTotalSalesQuantity(v int) *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.SetTotalSalesQuantity(v)
	})
}

// AddTotalSalesQuantity adds v to the "total_sales_quantity" field.
func (u *ProductStatisticsUpsertOne) AddTotalSalesQuantity(v int) *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.AddTotalSalesQuantity(v)
	})
}

// UpdateTotalSalesQuantity sets the "total_sales_quantity" field to the value that was provided on create.
func (u *ProductStatisticsUpsertOne) UpdateTotalSalesQuantity() *ProductStatisticsUpsertOne {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.UpdateTotalSalesQuantity()
	})
}

// Exec executes the query.
func (u *ProductStatisticsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for ProductStatisticsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProductStatisticsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProductStatisticsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProductStatisticsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProductStatisticsCreateBulk is the builder for creating many ProductStatistics entities in bulk.
type ProductStatisticsCreateBulk struct {
	config
	err      error
	builders []*ProductStatisticsCreate
	conflict []sql.ConflictOption
}

// Save creates the ProductStatistics entities in the database.
func (pscb *ProductStatisticsCreateBulk) Save(ctx context.Context) ([]*ProductStatistics, error) {
	if pscb.err != nil {
		return nil, pscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*ProductStatistics, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductStatisticsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pscb *ProductStatisticsCreateBulk) SaveX(ctx context.Context) []*ProductStatistics {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pscb *ProductStatisticsCreateBulk) Exec(ctx context.Context) error {
	_, err := pscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pscb *ProductStatisticsCreateBulk) ExecX(ctx context.Context) {
	if err := pscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProductStatistics.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProductStatisticsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pscb *ProductStatisticsCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProductStatisticsUpsertBulk {
	pscb.conflict = opts
	return &ProductStatisticsUpsertBulk{
		create: pscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProductStatistics.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pscb *ProductStatisticsCreateBulk) OnConflictColumns(columns ...string) *ProductStatisticsUpsertBulk {
	pscb.conflict = append(pscb.conflict, sql.ConflictColumns(columns...))
	return &ProductStatisticsUpsertBulk{
		create: pscb,
	}
}

// ProductStatisticsUpsertBulk is the builder for "upsert"-ing
// a bulk of ProductStatistics nodes.
type ProductStatisticsUpsertBulk struct {
	create *ProductStatisticsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ProductStatistics.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProductStatisticsUpsertBulk) UpdateNewValues() *ProductStatisticsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(productstatistics.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProductStatistics.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProductStatisticsUpsertBulk) Ignore() *ProductStatisticsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProductStatisticsUpsertBulk) DoNothing() *ProductStatisticsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProductStatisticsCreateBulk.OnConflict
// documentation for more info.
func (u *ProductStatisticsUpsertBulk) Update(set func(*ProductStatisticsUpsert)) *ProductStatisticsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProductStatisticsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProductStatisticsUpsertBulk) SetUpdatedAt(v int64) *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ProductStatisticsUpsertBulk) AddUpdatedAt(v int64) *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProductStatisticsUpsertBulk) UpdateUpdatedAt() *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTenantCode sets the "tenant_code" field.
func (u *ProductStatisticsUpsertBulk) SetTenantCode(v string) *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.SetTenantCode(v)
	})
}

// UpdateTenantCode sets the "tenant_code" field to the value that was provided on create.
func (u *ProductStatisticsUpsertBulk) UpdateTenantCode() *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.UpdateTenantCode()
	})
}

// SetTotalProducts sets the "total_products" field.
func (u *ProductStatisticsUpsertBulk) SetTotalProducts(v int) *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.SetTotalProducts(v)
	})
}

// AddTotalProducts adds v to the "total_products" field.
func (u *ProductStatisticsUpsertBulk) AddTotalProducts(v int) *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.AddTotalProducts(v)
	})
}

// UpdateTotalProducts sets the "total_products" field to the value that was provided on create.
func (u *ProductStatisticsUpsertBulk) UpdateTotalProducts() *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.UpdateTotalProducts()
	})
}

// SetActiveProducts sets the "active_products" field.
func (u *ProductStatisticsUpsertBulk) SetActiveProducts(v int) *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.SetActiveProducts(v)
	})
}

// AddActiveProducts adds v to the "active_products" field.
func (u *ProductStatisticsUpsertBulk) AddActiveProducts(v int) *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.AddActiveProducts(v)
	})
}

// UpdateActiveProducts sets the "active_products" field to the value that was provided on create.
func (u *ProductStatisticsUpsertBulk) UpdateActiveProducts() *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.UpdateActiveProducts()
	})
}

// SetTotalStock sets the "total_stock" field.
func (u *ProductStatisticsUpsertBulk) SetTotalStock(v int) *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.SetTotalStock(v)
	})
}

// AddTotalStock adds v to the "total_stock" field.
func (u *ProductStatisticsUpsertBulk) AddTotalStock(v int) *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.AddTotalStock(v)
	})
}

// UpdateTotalStock sets the "total_stock" field to the value that was provided on create.
func (u *ProductStatisticsUpsertBulk) UpdateTotalStock() *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.UpdateTotalStock()
	})
}

// SetTotalStockValue sets the "total_stock_value" field.
func (u *ProductStatisticsUpsertBulk) SetTotalStockValue(v decimal.Decimal) *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.SetTotalStockValue(v)
	})
}

// UpdateTotalStockValue sets the "total_stock_value" field to the value that was provided on create.
func (u *ProductStatisticsUpsertBulk) UpdateTotalStockValue() *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.UpdateTotalStockValue()
	})
}

// SetLowStockProducts sets the "low_stock_products" field.
func (u *ProductStatisticsUpsertBulk) SetLowStockProducts(v int) *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.SetLowStockProducts(v)
	})
}

// AddLowStockProducts adds v to the "low_stock_products" field.
func (u *ProductStatisticsUpsertBulk) AddLowStockProducts(v int) *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.AddLowStockProducts(v)
	})
}

// UpdateLowStockProducts sets the "low_stock_products" field to the value that was provided on create.
func (u *ProductStatisticsUpsertBulk) UpdateLowStockProducts() *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.UpdateLowStockProducts()
	})
}

// SetTotalInQuantity sets the "total_in_quantity" field.
func (u *ProductStatisticsUpsertBulk) SetTotalInQuantity(v int) *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.SetTotalInQuantity(v)
	})
}

// AddTotalInQuantity adds v to the "total_in_quantity" field.
func (u *ProductStatisticsUpsertBulk) AddTotalInQuantity(v int) *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.AddTotalInQuantity(v)
	})
}

// UpdateTotalInQuantity sets the "total_in_quantity" field to the value that was provided on create.
func (u *ProductStatisticsUpsertBulk) UpdateTotalInQuantity() *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.UpdateTotalInQuantity()
	})
}

// SetTotalInAmount sets the "total_in_amount" field.
func (u *ProductStatisticsUpsertBulk) SetTotalInAmount(v decimal.Decimal) *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.SetTotalInAmount(v)
	})
}

// UpdateTotalInAmount sets the "total_in_amount" field to the value that was provided on create.
func (u *ProductStatisticsUpsertBulk) UpdateTotalInAmount() *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.UpdateTotalInAmount()
	})
}

// SetTotalOutQuantity sets the "total_out_quantity" field.
func (u *ProductStatisticsUpsertBulk) SetTotalOutQuantity(v int) *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.SetTotalOutQuantity(v)
	})
}

// AddTotalOutQuantity adds v to the "total_out_quantity" field.
func (u *ProductStatisticsUpsertBulk) AddTotalOutQuantity(v int) *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.AddTotalOutQuantity(v)
	})
}

// UpdateTotalOutQuantity sets the "total_out_quantity" field to the value that was provided on create.
func (u *ProductStatisticsUpsertBulk) UpdateTotalOutQuantity() *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.UpdateTotalOutQuantity()
	})
}

// SetTotalOutAmount sets the "total_out_amount" field.
func (u *ProductStatisticsUpsertBulk) SetTotalOutAmount(v decimal.Decimal) *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.SetTotalOutAmount(v)
	})
}

// UpdateTotalOutAmount sets the "total_out_amount" field to the value that was provided on create.
func (u *ProductStatisticsUpsertBulk) UpdateTotalOutAmount() *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.UpdateTotalOutAmount()
	})
}

// SetTotalSalesAmount sets the "total_sales_amount" field.
func (u *ProductStatisticsUpsertBulk) SetTotalSalesAmount(v decimal.Decimal) *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.SetTotalSalesAmount(v)
	})
}

// UpdateTotalSalesAmount sets the "total_sales_amount" field to the value that was provided on create.
func (u *ProductStatisticsUpsertBulk) UpdateTotalSalesAmount() *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.UpdateTotalSalesAmount()
	})
}

// SetTotalSalesQuantity sets the "total_sales_quantity" field.
func (u *ProductStatisticsUpsertBulk) SetTotalSalesQuantity(v int) *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.SetTotalSalesQuantity(v)
	})
}

// AddTotalSalesQuantity adds v to the "total_sales_quantity" field.
func (u *ProductStatisticsUpsertBulk) AddTotalSalesQuantity(v int) *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.AddTotalSalesQuantity(v)
	})
}

// UpdateTotalSalesQuantity sets the "total_sales_quantity" field to the value that was provided on create.
func (u *ProductStatisticsUpsertBulk) UpdateTotalSalesQuantity() *ProductStatisticsUpsertBulk {
	return u.Update(func(s *ProductStatisticsUpsert) {
		s.UpdateTotalSalesQuantity()
	})
}

// Exec executes the query.
func (u *ProductStatisticsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the ProductStatisticsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for ProductStatisticsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProductStatisticsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
