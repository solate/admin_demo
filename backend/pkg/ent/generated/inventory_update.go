// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/inventory"
	"admin_backend/pkg/ent/generated/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

// InventoryUpdate is the builder for updating Inventory entities.
type InventoryUpdate struct {
	config
	hooks     []Hook
	mutation  *InventoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the InventoryUpdate builder.
func (iu *InventoryUpdate) Where(ps ...predicate.Inventory) *InventoryUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *InventoryUpdate) SetUpdatedAt(i int64) *InventoryUpdate {
	iu.mutation.ResetUpdatedAt()
	iu.mutation.SetUpdatedAt(i)
	return iu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableUpdatedAt(i *int64) *InventoryUpdate {
	if i != nil {
		iu.SetUpdatedAt(*i)
	}
	return iu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (iu *InventoryUpdate) AddUpdatedAt(i int64) *InventoryUpdate {
	iu.mutation.AddUpdatedAt(i)
	return iu
}

// SetDeletedAt sets the "deleted_at" field.
func (iu *InventoryUpdate) SetDeletedAt(i int64) *InventoryUpdate {
	iu.mutation.ResetDeletedAt()
	iu.mutation.SetDeletedAt(i)
	return iu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableDeletedAt(i *int64) *InventoryUpdate {
	if i != nil {
		iu.SetDeletedAt(*i)
	}
	return iu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (iu *InventoryUpdate) AddDeletedAt(i int64) *InventoryUpdate {
	iu.mutation.AddDeletedAt(i)
	return iu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iu *InventoryUpdate) ClearDeletedAt() *InventoryUpdate {
	iu.mutation.ClearDeletedAt()
	return iu
}

// SetTenantCode sets the "tenant_code" field.
func (iu *InventoryUpdate) SetTenantCode(s string) *InventoryUpdate {
	iu.mutation.SetTenantCode(s)
	return iu
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableTenantCode(s *string) *InventoryUpdate {
	if s != nil {
		iu.SetTenantCode(*s)
	}
	return iu
}

// SetInventoryID sets the "inventory_id" field.
func (iu *InventoryUpdate) SetInventoryID(s string) *InventoryUpdate {
	iu.mutation.SetInventoryID(s)
	return iu
}

// SetNillableInventoryID sets the "inventory_id" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableInventoryID(s *string) *InventoryUpdate {
	if s != nil {
		iu.SetInventoryID(*s)
	}
	return iu
}

// SetProductID sets the "product_id" field.
func (iu *InventoryUpdate) SetProductID(s string) *InventoryUpdate {
	iu.mutation.SetProductID(s)
	return iu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableProductID(s *string) *InventoryUpdate {
	if s != nil {
		iu.SetProductID(*s)
	}
	return iu
}

// SetOperationType sets the "operation_type" field.
func (iu *InventoryUpdate) SetOperationType(s string) *InventoryUpdate {
	iu.mutation.SetOperationType(s)
	return iu
}

// SetNillableOperationType sets the "operation_type" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableOperationType(s *string) *InventoryUpdate {
	if s != nil {
		iu.SetOperationType(*s)
	}
	return iu
}

// SetQuantity sets the "quantity" field.
func (iu *InventoryUpdate) SetQuantity(i int) *InventoryUpdate {
	iu.mutation.ResetQuantity()
	iu.mutation.SetQuantity(i)
	return iu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableQuantity(i *int) *InventoryUpdate {
	if i != nil {
		iu.SetQuantity(*i)
	}
	return iu
}

// AddQuantity adds i to the "quantity" field.
func (iu *InventoryUpdate) AddQuantity(i int) *InventoryUpdate {
	iu.mutation.AddQuantity(i)
	return iu
}

// SetUnitPrice sets the "unit_price" field.
func (iu *InventoryUpdate) SetUnitPrice(d decimal.Decimal) *InventoryUpdate {
	iu.mutation.SetUnitPrice(d)
	return iu
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableUnitPrice(d *decimal.Decimal) *InventoryUpdate {
	if d != nil {
		iu.SetUnitPrice(*d)
	}
	return iu
}

// SetTotalAmount sets the "total_amount" field.
func (iu *InventoryUpdate) SetTotalAmount(d decimal.Decimal) *InventoryUpdate {
	iu.mutation.SetTotalAmount(d)
	return iu
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableTotalAmount(d *decimal.Decimal) *InventoryUpdate {
	if d != nil {
		iu.SetTotalAmount(*d)
	}
	return iu
}

// SetOperatorID sets the "operator_id" field.
func (iu *InventoryUpdate) SetOperatorID(s string) *InventoryUpdate {
	iu.mutation.SetOperatorID(s)
	return iu
}

// SetNillableOperatorID sets the "operator_id" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableOperatorID(s *string) *InventoryUpdate {
	if s != nil {
		iu.SetOperatorID(*s)
	}
	return iu
}

// SetRemark sets the "remark" field.
func (iu *InventoryUpdate) SetRemark(s string) *InventoryUpdate {
	iu.mutation.SetRemark(s)
	return iu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableRemark(s *string) *InventoryUpdate {
	if s != nil {
		iu.SetRemark(*s)
	}
	return iu
}

// SetOperationTime sets the "operation_time" field.
func (iu *InventoryUpdate) SetOperationTime(i int64) *InventoryUpdate {
	iu.mutation.ResetOperationTime()
	iu.mutation.SetOperationTime(i)
	return iu
}

// SetNillableOperationTime sets the "operation_time" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableOperationTime(i *int64) *InventoryUpdate {
	if i != nil {
		iu.SetOperationTime(*i)
	}
	return iu
}

// AddOperationTime adds i to the "operation_time" field.
func (iu *InventoryUpdate) AddOperationTime(i int64) *InventoryUpdate {
	iu.mutation.AddOperationTime(i)
	return iu
}

// SetBeforeStock sets the "before_stock" field.
func (iu *InventoryUpdate) SetBeforeStock(i int) *InventoryUpdate {
	iu.mutation.ResetBeforeStock()
	iu.mutation.SetBeforeStock(i)
	return iu
}

// SetNillableBeforeStock sets the "before_stock" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableBeforeStock(i *int) *InventoryUpdate {
	if i != nil {
		iu.SetBeforeStock(*i)
	}
	return iu
}

// AddBeforeStock adds i to the "before_stock" field.
func (iu *InventoryUpdate) AddBeforeStock(i int) *InventoryUpdate {
	iu.mutation.AddBeforeStock(i)
	return iu
}

// SetAfterStock sets the "after_stock" field.
func (iu *InventoryUpdate) SetAfterStock(i int) *InventoryUpdate {
	iu.mutation.ResetAfterStock()
	iu.mutation.SetAfterStock(i)
	return iu
}

// SetNillableAfterStock sets the "after_stock" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableAfterStock(i *int) *InventoryUpdate {
	if i != nil {
		iu.SetAfterStock(*i)
	}
	return iu
}

// AddAfterStock adds i to the "after_stock" field.
func (iu *InventoryUpdate) AddAfterStock(i int) *InventoryUpdate {
	iu.mutation.AddAfterStock(i)
	return iu
}

// Mutation returns the InventoryMutation object of the builder.
func (iu *InventoryUpdate) Mutation() *InventoryMutation {
	return iu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InventoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InventoryUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InventoryUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InventoryUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *InventoryUpdate) check() error {
	if v, ok := iu.mutation.ProductID(); ok {
		if err := inventory.ProductIDValidator(v); err != nil {
			return &ValidationError{Name: "product_id", err: fmt.Errorf(`generated: validator failed for field "Inventory.product_id": %w`, err)}
		}
	}
	if v, ok := iu.mutation.OperationType(); ok {
		if err := inventory.OperationTypeValidator(v); err != nil {
			return &ValidationError{Name: "operation_type", err: fmt.Errorf(`generated: validator failed for field "Inventory.operation_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iu *InventoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InventoryUpdate {
	iu.modifiers = append(iu.modifiers, modifiers...)
	return iu
}

func (iu *InventoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(inventory.Table, inventory.Columns, sqlgraph.NewFieldSpec(inventory.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(inventory.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(inventory.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.DeletedAt(); ok {
		_spec.SetField(inventory.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(inventory.FieldDeletedAt, field.TypeInt64, value)
	}
	if iu.mutation.DeletedAtCleared() {
		_spec.ClearField(inventory.FieldDeletedAt, field.TypeInt64)
	}
	if value, ok := iu.mutation.TenantCode(); ok {
		_spec.SetField(inventory.FieldTenantCode, field.TypeString, value)
	}
	if value, ok := iu.mutation.InventoryID(); ok {
		_spec.SetField(inventory.FieldInventoryID, field.TypeString, value)
	}
	if value, ok := iu.mutation.ProductID(); ok {
		_spec.SetField(inventory.FieldProductID, field.TypeString, value)
	}
	if value, ok := iu.mutation.OperationType(); ok {
		_spec.SetField(inventory.FieldOperationType, field.TypeString, value)
	}
	if value, ok := iu.mutation.Quantity(); ok {
		_spec.SetField(inventory.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedQuantity(); ok {
		_spec.AddField(inventory.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := iu.mutation.UnitPrice(); ok {
		_spec.SetField(inventory.FieldUnitPrice, field.TypeOther, value)
	}
	if value, ok := iu.mutation.TotalAmount(); ok {
		_spec.SetField(inventory.FieldTotalAmount, field.TypeOther, value)
	}
	if value, ok := iu.mutation.OperatorID(); ok {
		_spec.SetField(inventory.FieldOperatorID, field.TypeString, value)
	}
	if value, ok := iu.mutation.Remark(); ok {
		_spec.SetField(inventory.FieldRemark, field.TypeString, value)
	}
	if value, ok := iu.mutation.OperationTime(); ok {
		_spec.SetField(inventory.FieldOperationTime, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.AddedOperationTime(); ok {
		_spec.AddField(inventory.FieldOperationTime, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.BeforeStock(); ok {
		_spec.SetField(inventory.FieldBeforeStock, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedBeforeStock(); ok {
		_spec.AddField(inventory.FieldBeforeStock, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AfterStock(); ok {
		_spec.SetField(inventory.FieldAfterStock, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedAfterStock(); ok {
		_spec.AddField(inventory.FieldAfterStock, field.TypeInt, value)
	}
	_spec.AddModifiers(iu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inventory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InventoryUpdateOne is the builder for updating a single Inventory entity.
type InventoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *InventoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *InventoryUpdateOne) SetUpdatedAt(i int64) *InventoryUpdateOne {
	iuo.mutation.ResetUpdatedAt()
	iuo.mutation.SetUpdatedAt(i)
	return iuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableUpdatedAt(i *int64) *InventoryUpdateOne {
	if i != nil {
		iuo.SetUpdatedAt(*i)
	}
	return iuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (iuo *InventoryUpdateOne) AddUpdatedAt(i int64) *InventoryUpdateOne {
	iuo.mutation.AddUpdatedAt(i)
	return iuo
}

// SetDeletedAt sets the "deleted_at" field.
func (iuo *InventoryUpdateOne) SetDeletedAt(i int64) *InventoryUpdateOne {
	iuo.mutation.ResetDeletedAt()
	iuo.mutation.SetDeletedAt(i)
	return iuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableDeletedAt(i *int64) *InventoryUpdateOne {
	if i != nil {
		iuo.SetDeletedAt(*i)
	}
	return iuo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (iuo *InventoryUpdateOne) AddDeletedAt(i int64) *InventoryUpdateOne {
	iuo.mutation.AddDeletedAt(i)
	return iuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iuo *InventoryUpdateOne) ClearDeletedAt() *InventoryUpdateOne {
	iuo.mutation.ClearDeletedAt()
	return iuo
}

// SetTenantCode sets the "tenant_code" field.
func (iuo *InventoryUpdateOne) SetTenantCode(s string) *InventoryUpdateOne {
	iuo.mutation.SetTenantCode(s)
	return iuo
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableTenantCode(s *string) *InventoryUpdateOne {
	if s != nil {
		iuo.SetTenantCode(*s)
	}
	return iuo
}

// SetInventoryID sets the "inventory_id" field.
func (iuo *InventoryUpdateOne) SetInventoryID(s string) *InventoryUpdateOne {
	iuo.mutation.SetInventoryID(s)
	return iuo
}

// SetNillableInventoryID sets the "inventory_id" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableInventoryID(s *string) *InventoryUpdateOne {
	if s != nil {
		iuo.SetInventoryID(*s)
	}
	return iuo
}

// SetProductID sets the "product_id" field.
func (iuo *InventoryUpdateOne) SetProductID(s string) *InventoryUpdateOne {
	iuo.mutation.SetProductID(s)
	return iuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableProductID(s *string) *InventoryUpdateOne {
	if s != nil {
		iuo.SetProductID(*s)
	}
	return iuo
}

// SetOperationType sets the "operation_type" field.
func (iuo *InventoryUpdateOne) SetOperationType(s string) *InventoryUpdateOne {
	iuo.mutation.SetOperationType(s)
	return iuo
}

// SetNillableOperationType sets the "operation_type" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableOperationType(s *string) *InventoryUpdateOne {
	if s != nil {
		iuo.SetOperationType(*s)
	}
	return iuo
}

// SetQuantity sets the "quantity" field.
func (iuo *InventoryUpdateOne) SetQuantity(i int) *InventoryUpdateOne {
	iuo.mutation.ResetQuantity()
	iuo.mutation.SetQuantity(i)
	return iuo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableQuantity(i *int) *InventoryUpdateOne {
	if i != nil {
		iuo.SetQuantity(*i)
	}
	return iuo
}

// AddQuantity adds i to the "quantity" field.
func (iuo *InventoryUpdateOne) AddQuantity(i int) *InventoryUpdateOne {
	iuo.mutation.AddQuantity(i)
	return iuo
}

// SetUnitPrice sets the "unit_price" field.
func (iuo *InventoryUpdateOne) SetUnitPrice(d decimal.Decimal) *InventoryUpdateOne {
	iuo.mutation.SetUnitPrice(d)
	return iuo
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableUnitPrice(d *decimal.Decimal) *InventoryUpdateOne {
	if d != nil {
		iuo.SetUnitPrice(*d)
	}
	return iuo
}

// SetTotalAmount sets the "total_amount" field.
func (iuo *InventoryUpdateOne) SetTotalAmount(d decimal.Decimal) *InventoryUpdateOne {
	iuo.mutation.SetTotalAmount(d)
	return iuo
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableTotalAmount(d *decimal.Decimal) *InventoryUpdateOne {
	if d != nil {
		iuo.SetTotalAmount(*d)
	}
	return iuo
}

// SetOperatorID sets the "operator_id" field.
func (iuo *InventoryUpdateOne) SetOperatorID(s string) *InventoryUpdateOne {
	iuo.mutation.SetOperatorID(s)
	return iuo
}

// SetNillableOperatorID sets the "operator_id" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableOperatorID(s *string) *InventoryUpdateOne {
	if s != nil {
		iuo.SetOperatorID(*s)
	}
	return iuo
}

// SetRemark sets the "remark" field.
func (iuo *InventoryUpdateOne) SetRemark(s string) *InventoryUpdateOne {
	iuo.mutation.SetRemark(s)
	return iuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableRemark(s *string) *InventoryUpdateOne {
	if s != nil {
		iuo.SetRemark(*s)
	}
	return iuo
}

// SetOperationTime sets the "operation_time" field.
func (iuo *InventoryUpdateOne) SetOperationTime(i int64) *InventoryUpdateOne {
	iuo.mutation.ResetOperationTime()
	iuo.mutation.SetOperationTime(i)
	return iuo
}

// SetNillableOperationTime sets the "operation_time" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableOperationTime(i *int64) *InventoryUpdateOne {
	if i != nil {
		iuo.SetOperationTime(*i)
	}
	return iuo
}

// AddOperationTime adds i to the "operation_time" field.
func (iuo *InventoryUpdateOne) AddOperationTime(i int64) *InventoryUpdateOne {
	iuo.mutation.AddOperationTime(i)
	return iuo
}

// SetBeforeStock sets the "before_stock" field.
func (iuo *InventoryUpdateOne) SetBeforeStock(i int) *InventoryUpdateOne {
	iuo.mutation.ResetBeforeStock()
	iuo.mutation.SetBeforeStock(i)
	return iuo
}

// SetNillableBeforeStock sets the "before_stock" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableBeforeStock(i *int) *InventoryUpdateOne {
	if i != nil {
		iuo.SetBeforeStock(*i)
	}
	return iuo
}

// AddBeforeStock adds i to the "before_stock" field.
func (iuo *InventoryUpdateOne) AddBeforeStock(i int) *InventoryUpdateOne {
	iuo.mutation.AddBeforeStock(i)
	return iuo
}

// SetAfterStock sets the "after_stock" field.
func (iuo *InventoryUpdateOne) SetAfterStock(i int) *InventoryUpdateOne {
	iuo.mutation.ResetAfterStock()
	iuo.mutation.SetAfterStock(i)
	return iuo
}

// SetNillableAfterStock sets the "after_stock" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableAfterStock(i *int) *InventoryUpdateOne {
	if i != nil {
		iuo.SetAfterStock(*i)
	}
	return iuo
}

// AddAfterStock adds i to the "after_stock" field.
func (iuo *InventoryUpdateOne) AddAfterStock(i int) *InventoryUpdateOne {
	iuo.mutation.AddAfterStock(i)
	return iuo
}

// Mutation returns the InventoryMutation object of the builder.
func (iuo *InventoryUpdateOne) Mutation() *InventoryMutation {
	return iuo.mutation
}

// Where appends a list predicates to the InventoryUpdate builder.
func (iuo *InventoryUpdateOne) Where(ps ...predicate.Inventory) *InventoryUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InventoryUpdateOne) Select(field string, fields ...string) *InventoryUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Inventory entity.
func (iuo *InventoryUpdateOne) Save(ctx context.Context) (*Inventory, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InventoryUpdateOne) SaveX(ctx context.Context) *Inventory {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InventoryUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InventoryUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *InventoryUpdateOne) check() error {
	if v, ok := iuo.mutation.ProductID(); ok {
		if err := inventory.ProductIDValidator(v); err != nil {
			return &ValidationError{Name: "product_id", err: fmt.Errorf(`generated: validator failed for field "Inventory.product_id": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.OperationType(); ok {
		if err := inventory.OperationTypeValidator(v); err != nil {
			return &ValidationError{Name: "operation_type", err: fmt.Errorf(`generated: validator failed for field "Inventory.operation_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iuo *InventoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InventoryUpdateOne {
	iuo.modifiers = append(iuo.modifiers, modifiers...)
	return iuo
}

func (iuo *InventoryUpdateOne) sqlSave(ctx context.Context) (_node *Inventory, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(inventory.Table, inventory.Columns, sqlgraph.NewFieldSpec(inventory.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Inventory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, inventory.FieldID)
		for _, f := range fields {
			if !inventory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != inventory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(inventory.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(inventory.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.DeletedAt(); ok {
		_spec.SetField(inventory.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(inventory.FieldDeletedAt, field.TypeInt64, value)
	}
	if iuo.mutation.DeletedAtCleared() {
		_spec.ClearField(inventory.FieldDeletedAt, field.TypeInt64)
	}
	if value, ok := iuo.mutation.TenantCode(); ok {
		_spec.SetField(inventory.FieldTenantCode, field.TypeString, value)
	}
	if value, ok := iuo.mutation.InventoryID(); ok {
		_spec.SetField(inventory.FieldInventoryID, field.TypeString, value)
	}
	if value, ok := iuo.mutation.ProductID(); ok {
		_spec.SetField(inventory.FieldProductID, field.TypeString, value)
	}
	if value, ok := iuo.mutation.OperationType(); ok {
		_spec.SetField(inventory.FieldOperationType, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Quantity(); ok {
		_spec.SetField(inventory.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedQuantity(); ok {
		_spec.AddField(inventory.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.UnitPrice(); ok {
		_spec.SetField(inventory.FieldUnitPrice, field.TypeOther, value)
	}
	if value, ok := iuo.mutation.TotalAmount(); ok {
		_spec.SetField(inventory.FieldTotalAmount, field.TypeOther, value)
	}
	if value, ok := iuo.mutation.OperatorID(); ok {
		_spec.SetField(inventory.FieldOperatorID, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Remark(); ok {
		_spec.SetField(inventory.FieldRemark, field.TypeString, value)
	}
	if value, ok := iuo.mutation.OperationTime(); ok {
		_spec.SetField(inventory.FieldOperationTime, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.AddedOperationTime(); ok {
		_spec.AddField(inventory.FieldOperationTime, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.BeforeStock(); ok {
		_spec.SetField(inventory.FieldBeforeStock, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedBeforeStock(); ok {
		_spec.AddField(inventory.FieldBeforeStock, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AfterStock(); ok {
		_spec.SetField(inventory.FieldAfterStock, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedAfterStock(); ok {
		_spec.AddField(inventory.FieldAfterStock, field.TypeInt, value)
	}
	_spec.AddModifiers(iuo.modifiers...)
	_node = &Inventory{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inventory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
