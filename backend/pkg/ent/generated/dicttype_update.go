// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/dicttype"
	"admin_backend/pkg/ent/generated/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DictTypeUpdate is the builder for updating DictType entities.
type DictTypeUpdate struct {
	config
	hooks     []Hook
	mutation  *DictTypeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DictTypeUpdate builder.
func (dtu *DictTypeUpdate) Where(ps ...predicate.DictType) *DictTypeUpdate {
	dtu.mutation.Where(ps...)
	return dtu
}

// SetUpdatedAt sets the "updated_at" field.
func (dtu *DictTypeUpdate) SetUpdatedAt(i int64) *DictTypeUpdate {
	dtu.mutation.ResetUpdatedAt()
	dtu.mutation.SetUpdatedAt(i)
	return dtu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dtu *DictTypeUpdate) SetNillableUpdatedAt(i *int64) *DictTypeUpdate {
	if i != nil {
		dtu.SetUpdatedAt(*i)
	}
	return dtu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (dtu *DictTypeUpdate) AddUpdatedAt(i int64) *DictTypeUpdate {
	dtu.mutation.AddUpdatedAt(i)
	return dtu
}

// SetDeletedAt sets the "deleted_at" field.
func (dtu *DictTypeUpdate) SetDeletedAt(i int64) *DictTypeUpdate {
	dtu.mutation.ResetDeletedAt()
	dtu.mutation.SetDeletedAt(i)
	return dtu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dtu *DictTypeUpdate) SetNillableDeletedAt(i *int64) *DictTypeUpdate {
	if i != nil {
		dtu.SetDeletedAt(*i)
	}
	return dtu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (dtu *DictTypeUpdate) AddDeletedAt(i int64) *DictTypeUpdate {
	dtu.mutation.AddDeletedAt(i)
	return dtu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (dtu *DictTypeUpdate) ClearDeletedAt() *DictTypeUpdate {
	dtu.mutation.ClearDeletedAt()
	return dtu
}

// SetTenantCode sets the "tenant_code" field.
func (dtu *DictTypeUpdate) SetTenantCode(s string) *DictTypeUpdate {
	dtu.mutation.SetTenantCode(s)
	return dtu
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (dtu *DictTypeUpdate) SetNillableTenantCode(s *string) *DictTypeUpdate {
	if s != nil {
		dtu.SetTenantCode(*s)
	}
	return dtu
}

// SetTypeID sets the "type_id" field.
func (dtu *DictTypeUpdate) SetTypeID(s string) *DictTypeUpdate {
	dtu.mutation.SetTypeID(s)
	return dtu
}

// SetNillableTypeID sets the "type_id" field if the given value is not nil.
func (dtu *DictTypeUpdate) SetNillableTypeID(s *string) *DictTypeUpdate {
	if s != nil {
		dtu.SetTypeID(*s)
	}
	return dtu
}

// SetName sets the "name" field.
func (dtu *DictTypeUpdate) SetName(s string) *DictTypeUpdate {
	dtu.mutation.SetName(s)
	return dtu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dtu *DictTypeUpdate) SetNillableName(s *string) *DictTypeUpdate {
	if s != nil {
		dtu.SetName(*s)
	}
	return dtu
}

// SetCode sets the "code" field.
func (dtu *DictTypeUpdate) SetCode(s string) *DictTypeUpdate {
	dtu.mutation.SetCode(s)
	return dtu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (dtu *DictTypeUpdate) SetNillableCode(s *string) *DictTypeUpdate {
	if s != nil {
		dtu.SetCode(*s)
	}
	return dtu
}

// SetDescription sets the "description" field.
func (dtu *DictTypeUpdate) SetDescription(s string) *DictTypeUpdate {
	dtu.mutation.SetDescription(s)
	return dtu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dtu *DictTypeUpdate) SetNillableDescription(s *string) *DictTypeUpdate {
	if s != nil {
		dtu.SetDescription(*s)
	}
	return dtu
}

// ClearDescription clears the value of the "description" field.
func (dtu *DictTypeUpdate) ClearDescription() *DictTypeUpdate {
	dtu.mutation.ClearDescription()
	return dtu
}

// SetStatus sets the "status" field.
func (dtu *DictTypeUpdate) SetStatus(i int) *DictTypeUpdate {
	dtu.mutation.ResetStatus()
	dtu.mutation.SetStatus(i)
	return dtu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dtu *DictTypeUpdate) SetNillableStatus(i *int) *DictTypeUpdate {
	if i != nil {
		dtu.SetStatus(*i)
	}
	return dtu
}

// AddStatus adds i to the "status" field.
func (dtu *DictTypeUpdate) AddStatus(i int) *DictTypeUpdate {
	dtu.mutation.AddStatus(i)
	return dtu
}

// Mutation returns the DictTypeMutation object of the builder.
func (dtu *DictTypeUpdate) Mutation() *DictTypeMutation {
	return dtu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dtu *DictTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dtu.sqlSave, dtu.mutation, dtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dtu *DictTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := dtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dtu *DictTypeUpdate) Exec(ctx context.Context) error {
	_, err := dtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtu *DictTypeUpdate) ExecX(ctx context.Context) {
	if err := dtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dtu *DictTypeUpdate) check() error {
	if v, ok := dtu.mutation.TenantCode(); ok {
		if err := dicttype.TenantCodeValidator(v); err != nil {
			return &ValidationError{Name: "tenant_code", err: fmt.Errorf(`generated: validator failed for field "DictType.tenant_code": %w`, err)}
		}
	}
	if v, ok := dtu.mutation.Name(); ok {
		if err := dicttype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "DictType.name": %w`, err)}
		}
	}
	if v, ok := dtu.mutation.Code(); ok {
		if err := dicttype.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`generated: validator failed for field "DictType.code": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dtu *DictTypeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DictTypeUpdate {
	dtu.modifiers = append(dtu.modifiers, modifiers...)
	return dtu
}

func (dtu *DictTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(dicttype.Table, dicttype.Columns, sqlgraph.NewFieldSpec(dicttype.FieldID, field.TypeInt))
	if ps := dtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dtu.mutation.UpdatedAt(); ok {
		_spec.SetField(dicttype.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := dtu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(dicttype.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := dtu.mutation.DeletedAt(); ok {
		_spec.SetField(dicttype.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := dtu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(dicttype.FieldDeletedAt, field.TypeInt64, value)
	}
	if dtu.mutation.DeletedAtCleared() {
		_spec.ClearField(dicttype.FieldDeletedAt, field.TypeInt64)
	}
	if value, ok := dtu.mutation.TenantCode(); ok {
		_spec.SetField(dicttype.FieldTenantCode, field.TypeString, value)
	}
	if value, ok := dtu.mutation.TypeID(); ok {
		_spec.SetField(dicttype.FieldTypeID, field.TypeString, value)
	}
	if value, ok := dtu.mutation.Name(); ok {
		_spec.SetField(dicttype.FieldName, field.TypeString, value)
	}
	if value, ok := dtu.mutation.Code(); ok {
		_spec.SetField(dicttype.FieldCode, field.TypeString, value)
	}
	if value, ok := dtu.mutation.Description(); ok {
		_spec.SetField(dicttype.FieldDescription, field.TypeString, value)
	}
	if dtu.mutation.DescriptionCleared() {
		_spec.ClearField(dicttype.FieldDescription, field.TypeString)
	}
	if value, ok := dtu.mutation.Status(); ok {
		_spec.SetField(dicttype.FieldStatus, field.TypeInt, value)
	}
	if value, ok := dtu.mutation.AddedStatus(); ok {
		_spec.AddField(dicttype.FieldStatus, field.TypeInt, value)
	}
	_spec.AddModifiers(dtu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, dtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dicttype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dtu.mutation.done = true
	return n, nil
}

// DictTypeUpdateOne is the builder for updating a single DictType entity.
type DictTypeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DictTypeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (dtuo *DictTypeUpdateOne) SetUpdatedAt(i int64) *DictTypeUpdateOne {
	dtuo.mutation.ResetUpdatedAt()
	dtuo.mutation.SetUpdatedAt(i)
	return dtuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dtuo *DictTypeUpdateOne) SetNillableUpdatedAt(i *int64) *DictTypeUpdateOne {
	if i != nil {
		dtuo.SetUpdatedAt(*i)
	}
	return dtuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (dtuo *DictTypeUpdateOne) AddUpdatedAt(i int64) *DictTypeUpdateOne {
	dtuo.mutation.AddUpdatedAt(i)
	return dtuo
}

// SetDeletedAt sets the "deleted_at" field.
func (dtuo *DictTypeUpdateOne) SetDeletedAt(i int64) *DictTypeUpdateOne {
	dtuo.mutation.ResetDeletedAt()
	dtuo.mutation.SetDeletedAt(i)
	return dtuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dtuo *DictTypeUpdateOne) SetNillableDeletedAt(i *int64) *DictTypeUpdateOne {
	if i != nil {
		dtuo.SetDeletedAt(*i)
	}
	return dtuo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (dtuo *DictTypeUpdateOne) AddDeletedAt(i int64) *DictTypeUpdateOne {
	dtuo.mutation.AddDeletedAt(i)
	return dtuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (dtuo *DictTypeUpdateOne) ClearDeletedAt() *DictTypeUpdateOne {
	dtuo.mutation.ClearDeletedAt()
	return dtuo
}

// SetTenantCode sets the "tenant_code" field.
func (dtuo *DictTypeUpdateOne) SetTenantCode(s string) *DictTypeUpdateOne {
	dtuo.mutation.SetTenantCode(s)
	return dtuo
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (dtuo *DictTypeUpdateOne) SetNillableTenantCode(s *string) *DictTypeUpdateOne {
	if s != nil {
		dtuo.SetTenantCode(*s)
	}
	return dtuo
}

// SetTypeID sets the "type_id" field.
func (dtuo *DictTypeUpdateOne) SetTypeID(s string) *DictTypeUpdateOne {
	dtuo.mutation.SetTypeID(s)
	return dtuo
}

// SetNillableTypeID sets the "type_id" field if the given value is not nil.
func (dtuo *DictTypeUpdateOne) SetNillableTypeID(s *string) *DictTypeUpdateOne {
	if s != nil {
		dtuo.SetTypeID(*s)
	}
	return dtuo
}

// SetName sets the "name" field.
func (dtuo *DictTypeUpdateOne) SetName(s string) *DictTypeUpdateOne {
	dtuo.mutation.SetName(s)
	return dtuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dtuo *DictTypeUpdateOne) SetNillableName(s *string) *DictTypeUpdateOne {
	if s != nil {
		dtuo.SetName(*s)
	}
	return dtuo
}

// SetCode sets the "code" field.
func (dtuo *DictTypeUpdateOne) SetCode(s string) *DictTypeUpdateOne {
	dtuo.mutation.SetCode(s)
	return dtuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (dtuo *DictTypeUpdateOne) SetNillableCode(s *string) *DictTypeUpdateOne {
	if s != nil {
		dtuo.SetCode(*s)
	}
	return dtuo
}

// SetDescription sets the "description" field.
func (dtuo *DictTypeUpdateOne) SetDescription(s string) *DictTypeUpdateOne {
	dtuo.mutation.SetDescription(s)
	return dtuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dtuo *DictTypeUpdateOne) SetNillableDescription(s *string) *DictTypeUpdateOne {
	if s != nil {
		dtuo.SetDescription(*s)
	}
	return dtuo
}

// ClearDescription clears the value of the "description" field.
func (dtuo *DictTypeUpdateOne) ClearDescription() *DictTypeUpdateOne {
	dtuo.mutation.ClearDescription()
	return dtuo
}

// SetStatus sets the "status" field.
func (dtuo *DictTypeUpdateOne) SetStatus(i int) *DictTypeUpdateOne {
	dtuo.mutation.ResetStatus()
	dtuo.mutation.SetStatus(i)
	return dtuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dtuo *DictTypeUpdateOne) SetNillableStatus(i *int) *DictTypeUpdateOne {
	if i != nil {
		dtuo.SetStatus(*i)
	}
	return dtuo
}

// AddStatus adds i to the "status" field.
func (dtuo *DictTypeUpdateOne) AddStatus(i int) *DictTypeUpdateOne {
	dtuo.mutation.AddStatus(i)
	return dtuo
}

// Mutation returns the DictTypeMutation object of the builder.
func (dtuo *DictTypeUpdateOne) Mutation() *DictTypeMutation {
	return dtuo.mutation
}

// Where appends a list predicates to the DictTypeUpdate builder.
func (dtuo *DictTypeUpdateOne) Where(ps ...predicate.DictType) *DictTypeUpdateOne {
	dtuo.mutation.Where(ps...)
	return dtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dtuo *DictTypeUpdateOne) Select(field string, fields ...string) *DictTypeUpdateOne {
	dtuo.fields = append([]string{field}, fields...)
	return dtuo
}

// Save executes the query and returns the updated DictType entity.
func (dtuo *DictTypeUpdateOne) Save(ctx context.Context) (*DictType, error) {
	return withHooks(ctx, dtuo.sqlSave, dtuo.mutation, dtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dtuo *DictTypeUpdateOne) SaveX(ctx context.Context) *DictType {
	node, err := dtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dtuo *DictTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := dtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtuo *DictTypeUpdateOne) ExecX(ctx context.Context) {
	if err := dtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dtuo *DictTypeUpdateOne) check() error {
	if v, ok := dtuo.mutation.TenantCode(); ok {
		if err := dicttype.TenantCodeValidator(v); err != nil {
			return &ValidationError{Name: "tenant_code", err: fmt.Errorf(`generated: validator failed for field "DictType.tenant_code": %w`, err)}
		}
	}
	if v, ok := dtuo.mutation.Name(); ok {
		if err := dicttype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "DictType.name": %w`, err)}
		}
	}
	if v, ok := dtuo.mutation.Code(); ok {
		if err := dicttype.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`generated: validator failed for field "DictType.code": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dtuo *DictTypeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DictTypeUpdateOne {
	dtuo.modifiers = append(dtuo.modifiers, modifiers...)
	return dtuo
}

func (dtuo *DictTypeUpdateOne) sqlSave(ctx context.Context) (_node *DictType, err error) {
	if err := dtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dicttype.Table, dicttype.Columns, sqlgraph.NewFieldSpec(dicttype.FieldID, field.TypeInt))
	id, ok := dtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "DictType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dicttype.FieldID)
		for _, f := range fields {
			if !dicttype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != dicttype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(dicttype.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := dtuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(dicttype.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := dtuo.mutation.DeletedAt(); ok {
		_spec.SetField(dicttype.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := dtuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(dicttype.FieldDeletedAt, field.TypeInt64, value)
	}
	if dtuo.mutation.DeletedAtCleared() {
		_spec.ClearField(dicttype.FieldDeletedAt, field.TypeInt64)
	}
	if value, ok := dtuo.mutation.TenantCode(); ok {
		_spec.SetField(dicttype.FieldTenantCode, field.TypeString, value)
	}
	if value, ok := dtuo.mutation.TypeID(); ok {
		_spec.SetField(dicttype.FieldTypeID, field.TypeString, value)
	}
	if value, ok := dtuo.mutation.Name(); ok {
		_spec.SetField(dicttype.FieldName, field.TypeString, value)
	}
	if value, ok := dtuo.mutation.Code(); ok {
		_spec.SetField(dicttype.FieldCode, field.TypeString, value)
	}
	if value, ok := dtuo.mutation.Description(); ok {
		_spec.SetField(dicttype.FieldDescription, field.TypeString, value)
	}
	if dtuo.mutation.DescriptionCleared() {
		_spec.ClearField(dicttype.FieldDescription, field.TypeString)
	}
	if value, ok := dtuo.mutation.Status(); ok {
		_spec.SetField(dicttype.FieldStatus, field.TypeInt, value)
	}
	if value, ok := dtuo.mutation.AddedStatus(); ok {
		_spec.AddField(dicttype.FieldStatus, field.TypeInt, value)
	}
	_spec.AddModifiers(dtuo.modifiers...)
	_node = &DictType{config: dtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dicttype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dtuo.mutation.done = true
	return _node, nil
}
