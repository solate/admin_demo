// Code generated by ent, DO NOT EDIT.

package sysuser

import (
	"admin_backend/pkg/ent/generated/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldDeletedAt, v))
}

// TenantCode applies equality check predicate on the "tenant_code" field. It's identical to TenantCodeEQ.
func TenantCode(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldTenantCode, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldUserID, v))
}

// UserName applies equality check predicate on the "user_name" field. It's identical to UserNameEQ.
func UserName(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldUserName, v))
}

// PwdHashed applies equality check predicate on the "pwd_hashed" field. It's identical to PwdHashedEQ.
func PwdHashed(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldPwdHashed, v))
}

// PwdSalt applies equality check predicate on the "pwd_salt" field. It's identical to PwdSaltEQ.
func PwdSalt(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldPwdSalt, v))
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldToken, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldName, v))
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldAvatar, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldPhone, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldEmail, v))
}

// Sex applies equality check predicate on the "sex" field. It's identical to SexEQ.
func Sex(v int) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldSex, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldNotNull(FieldDeletedAt))
}

// TenantCodeEQ applies the EQ predicate on the "tenant_code" field.
func TenantCodeEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldTenantCode, v))
}

// TenantCodeNEQ applies the NEQ predicate on the "tenant_code" field.
func TenantCodeNEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldTenantCode, v))
}

// TenantCodeIn applies the In predicate on the "tenant_code" field.
func TenantCodeIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldTenantCode, vs...))
}

// TenantCodeNotIn applies the NotIn predicate on the "tenant_code" field.
func TenantCodeNotIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldTenantCode, vs...))
}

// TenantCodeGT applies the GT predicate on the "tenant_code" field.
func TenantCodeGT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldTenantCode, v))
}

// TenantCodeGTE applies the GTE predicate on the "tenant_code" field.
func TenantCodeGTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldTenantCode, v))
}

// TenantCodeLT applies the LT predicate on the "tenant_code" field.
func TenantCodeLT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldTenantCode, v))
}

// TenantCodeLTE applies the LTE predicate on the "tenant_code" field.
func TenantCodeLTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldTenantCode, v))
}

// TenantCodeContains applies the Contains predicate on the "tenant_code" field.
func TenantCodeContains(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContains(FieldTenantCode, v))
}

// TenantCodeHasPrefix applies the HasPrefix predicate on the "tenant_code" field.
func TenantCodeHasPrefix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasPrefix(FieldTenantCode, v))
}

// TenantCodeHasSuffix applies the HasSuffix predicate on the "tenant_code" field.
func TenantCodeHasSuffix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasSuffix(FieldTenantCode, v))
}

// TenantCodeEqualFold applies the EqualFold predicate on the "tenant_code" field.
func TenantCodeEqualFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEqualFold(FieldTenantCode, v))
}

// TenantCodeContainsFold applies the ContainsFold predicate on the "tenant_code" field.
func TenantCodeContainsFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContainsFold(FieldTenantCode, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContainsFold(FieldUserID, v))
}

// UserNameEQ applies the EQ predicate on the "user_name" field.
func UserNameEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldUserName, v))
}

// UserNameNEQ applies the NEQ predicate on the "user_name" field.
func UserNameNEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldUserName, v))
}

// UserNameIn applies the In predicate on the "user_name" field.
func UserNameIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldUserName, vs...))
}

// UserNameNotIn applies the NotIn predicate on the "user_name" field.
func UserNameNotIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldUserName, vs...))
}

// UserNameGT applies the GT predicate on the "user_name" field.
func UserNameGT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldUserName, v))
}

// UserNameGTE applies the GTE predicate on the "user_name" field.
func UserNameGTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldUserName, v))
}

// UserNameLT applies the LT predicate on the "user_name" field.
func UserNameLT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldUserName, v))
}

// UserNameLTE applies the LTE predicate on the "user_name" field.
func UserNameLTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldUserName, v))
}

// UserNameContains applies the Contains predicate on the "user_name" field.
func UserNameContains(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContains(FieldUserName, v))
}

// UserNameHasPrefix applies the HasPrefix predicate on the "user_name" field.
func UserNameHasPrefix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasPrefix(FieldUserName, v))
}

// UserNameHasSuffix applies the HasSuffix predicate on the "user_name" field.
func UserNameHasSuffix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasSuffix(FieldUserName, v))
}

// UserNameEqualFold applies the EqualFold predicate on the "user_name" field.
func UserNameEqualFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEqualFold(FieldUserName, v))
}

// UserNameContainsFold applies the ContainsFold predicate on the "user_name" field.
func UserNameContainsFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContainsFold(FieldUserName, v))
}

// PwdHashedEQ applies the EQ predicate on the "pwd_hashed" field.
func PwdHashedEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldPwdHashed, v))
}

// PwdHashedNEQ applies the NEQ predicate on the "pwd_hashed" field.
func PwdHashedNEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldPwdHashed, v))
}

// PwdHashedIn applies the In predicate on the "pwd_hashed" field.
func PwdHashedIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldPwdHashed, vs...))
}

// PwdHashedNotIn applies the NotIn predicate on the "pwd_hashed" field.
func PwdHashedNotIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldPwdHashed, vs...))
}

// PwdHashedGT applies the GT predicate on the "pwd_hashed" field.
func PwdHashedGT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldPwdHashed, v))
}

// PwdHashedGTE applies the GTE predicate on the "pwd_hashed" field.
func PwdHashedGTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldPwdHashed, v))
}

// PwdHashedLT applies the LT predicate on the "pwd_hashed" field.
func PwdHashedLT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldPwdHashed, v))
}

// PwdHashedLTE applies the LTE predicate on the "pwd_hashed" field.
func PwdHashedLTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldPwdHashed, v))
}

// PwdHashedContains applies the Contains predicate on the "pwd_hashed" field.
func PwdHashedContains(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContains(FieldPwdHashed, v))
}

// PwdHashedHasPrefix applies the HasPrefix predicate on the "pwd_hashed" field.
func PwdHashedHasPrefix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasPrefix(FieldPwdHashed, v))
}

// PwdHashedHasSuffix applies the HasSuffix predicate on the "pwd_hashed" field.
func PwdHashedHasSuffix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasSuffix(FieldPwdHashed, v))
}

// PwdHashedEqualFold applies the EqualFold predicate on the "pwd_hashed" field.
func PwdHashedEqualFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEqualFold(FieldPwdHashed, v))
}

// PwdHashedContainsFold applies the ContainsFold predicate on the "pwd_hashed" field.
func PwdHashedContainsFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContainsFold(FieldPwdHashed, v))
}

// PwdSaltEQ applies the EQ predicate on the "pwd_salt" field.
func PwdSaltEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldPwdSalt, v))
}

// PwdSaltNEQ applies the NEQ predicate on the "pwd_salt" field.
func PwdSaltNEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldPwdSalt, v))
}

// PwdSaltIn applies the In predicate on the "pwd_salt" field.
func PwdSaltIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldPwdSalt, vs...))
}

// PwdSaltNotIn applies the NotIn predicate on the "pwd_salt" field.
func PwdSaltNotIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldPwdSalt, vs...))
}

// PwdSaltGT applies the GT predicate on the "pwd_salt" field.
func PwdSaltGT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldPwdSalt, v))
}

// PwdSaltGTE applies the GTE predicate on the "pwd_salt" field.
func PwdSaltGTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldPwdSalt, v))
}

// PwdSaltLT applies the LT predicate on the "pwd_salt" field.
func PwdSaltLT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldPwdSalt, v))
}

// PwdSaltLTE applies the LTE predicate on the "pwd_salt" field.
func PwdSaltLTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldPwdSalt, v))
}

// PwdSaltContains applies the Contains predicate on the "pwd_salt" field.
func PwdSaltContains(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContains(FieldPwdSalt, v))
}

// PwdSaltHasPrefix applies the HasPrefix predicate on the "pwd_salt" field.
func PwdSaltHasPrefix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasPrefix(FieldPwdSalt, v))
}

// PwdSaltHasSuffix applies the HasSuffix predicate on the "pwd_salt" field.
func PwdSaltHasSuffix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasSuffix(FieldPwdSalt, v))
}

// PwdSaltEqualFold applies the EqualFold predicate on the "pwd_salt" field.
func PwdSaltEqualFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEqualFold(FieldPwdSalt, v))
}

// PwdSaltContainsFold applies the ContainsFold predicate on the "pwd_salt" field.
func PwdSaltContainsFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContainsFold(FieldPwdSalt, v))
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldToken, v))
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldToken, v))
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldToken, vs...))
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldToken, vs...))
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldToken, v))
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldToken, v))
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldToken, v))
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldToken, v))
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContains(FieldToken, v))
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasPrefix(FieldToken, v))
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasSuffix(FieldToken, v))
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEqualFold(FieldToken, v))
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContainsFold(FieldToken, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContainsFold(FieldName, v))
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldAvatar, v))
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldAvatar, v))
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldAvatar, vs...))
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldAvatar, vs...))
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldAvatar, v))
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldAvatar, v))
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldAvatar, v))
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldAvatar, v))
}

// AvatarContains applies the Contains predicate on the "avatar" field.
func AvatarContains(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContains(FieldAvatar, v))
}

// AvatarHasPrefix applies the HasPrefix predicate on the "avatar" field.
func AvatarHasPrefix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasPrefix(FieldAvatar, v))
}

// AvatarHasSuffix applies the HasSuffix predicate on the "avatar" field.
func AvatarHasSuffix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasSuffix(FieldAvatar, v))
}

// AvatarEqualFold applies the EqualFold predicate on the "avatar" field.
func AvatarEqualFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEqualFold(FieldAvatar, v))
}

// AvatarContainsFold applies the ContainsFold predicate on the "avatar" field.
func AvatarContainsFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContainsFold(FieldAvatar, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContainsFold(FieldPhone, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContainsFold(FieldEmail, v))
}

// SexEQ applies the EQ predicate on the "sex" field.
func SexEQ(v int) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldSex, v))
}

// SexNEQ applies the NEQ predicate on the "sex" field.
func SexNEQ(v int) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldSex, v))
}

// SexIn applies the In predicate on the "sex" field.
func SexIn(vs ...int) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldSex, vs...))
}

// SexNotIn applies the NotIn predicate on the "sex" field.
func SexNotIn(vs ...int) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldSex, vs...))
}

// SexGT applies the GT predicate on the "sex" field.
func SexGT(v int) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldSex, v))
}

// SexGTE applies the GTE predicate on the "sex" field.
func SexGTE(v int) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldSex, v))
}

// SexLT applies the LT predicate on the "sex" field.
func SexLT(v int) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldSex, v))
}

// SexLTE applies the LTE predicate on the "sex" field.
func SexLTE(v int) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldSex, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldStatus, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SysUser) predicate.SysUser {
	return predicate.SysUser(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SysUser) predicate.SysUser {
	return predicate.SysUser(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SysUser) predicate.SysUser {
	return predicate.SysUser(sql.NotPredicates(p))
}
