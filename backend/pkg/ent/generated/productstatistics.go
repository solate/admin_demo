// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/productstatistics"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
)

// 商品统计
type ProductStatistics struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// 修改时间
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// 租户code
	TenantCode string `json:"tenant_code,omitempty"`
	// 商品总数
	TotalProducts int `json:"total_products,omitempty"`
	// 启用商品数
	ActiveProducts int `json:"active_products,omitempty"`
	// 总库存数量
	TotalStock int `json:"total_stock,omitempty"`
	// 总库存价值
	TotalStockValue decimal.Decimal `json:"total_stock_value,omitempty"`
	// 低库存商品数
	LowStockProducts int `json:"low_stock_products,omitempty"`
	// 总入库数量
	TotalInQuantity int `json:"total_in_quantity,omitempty"`
	// 总入库金额
	TotalInAmount decimal.Decimal `json:"total_in_amount,omitempty"`
	// 总出库数量
	TotalOutQuantity int `json:"total_out_quantity,omitempty"`
	// 总出库金额
	TotalOutAmount decimal.Decimal `json:"total_out_amount,omitempty"`
	// 总销售金额
	TotalSalesAmount decimal.Decimal `json:"total_sales_amount,omitempty"`
	// 总销售数量
	TotalSalesQuantity int `json:"total_sales_quantity,omitempty"`
	selectValues       sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductStatistics) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case productstatistics.FieldTotalStockValue, productstatistics.FieldTotalInAmount, productstatistics.FieldTotalOutAmount, productstatistics.FieldTotalSalesAmount:
			values[i] = new(decimal.Decimal)
		case productstatistics.FieldID, productstatistics.FieldCreatedAt, productstatistics.FieldUpdatedAt, productstatistics.FieldTotalProducts, productstatistics.FieldActiveProducts, productstatistics.FieldTotalStock, productstatistics.FieldLowStockProducts, productstatistics.FieldTotalInQuantity, productstatistics.FieldTotalOutQuantity, productstatistics.FieldTotalSalesQuantity:
			values[i] = new(sql.NullInt64)
		case productstatistics.FieldTenantCode:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductStatistics fields.
func (ps *ProductStatistics) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productstatistics.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ps.ID = int(value.Int64)
		case productstatistics.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ps.CreatedAt = value.Int64
			}
		case productstatistics.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ps.UpdatedAt = value.Int64
			}
		case productstatistics.FieldTenantCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_code", values[i])
			} else if value.Valid {
				ps.TenantCode = value.String
			}
		case productstatistics.FieldTotalProducts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_products", values[i])
			} else if value.Valid {
				ps.TotalProducts = int(value.Int64)
			}
		case productstatistics.FieldActiveProducts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field active_products", values[i])
			} else if value.Valid {
				ps.ActiveProducts = int(value.Int64)
			}
		case productstatistics.FieldTotalStock:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_stock", values[i])
			} else if value.Valid {
				ps.TotalStock = int(value.Int64)
			}
		case productstatistics.FieldTotalStockValue:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field total_stock_value", values[i])
			} else if value != nil {
				ps.TotalStockValue = *value
			}
		case productstatistics.FieldLowStockProducts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field low_stock_products", values[i])
			} else if value.Valid {
				ps.LowStockProducts = int(value.Int64)
			}
		case productstatistics.FieldTotalInQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_in_quantity", values[i])
			} else if value.Valid {
				ps.TotalInQuantity = int(value.Int64)
			}
		case productstatistics.FieldTotalInAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field total_in_amount", values[i])
			} else if value != nil {
				ps.TotalInAmount = *value
			}
		case productstatistics.FieldTotalOutQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_out_quantity", values[i])
			} else if value.Valid {
				ps.TotalOutQuantity = int(value.Int64)
			}
		case productstatistics.FieldTotalOutAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field total_out_amount", values[i])
			} else if value != nil {
				ps.TotalOutAmount = *value
			}
		case productstatistics.FieldTotalSalesAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field total_sales_amount", values[i])
			} else if value != nil {
				ps.TotalSalesAmount = *value
			}
		case productstatistics.FieldTotalSalesQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_sales_quantity", values[i])
			} else if value.Valid {
				ps.TotalSalesQuantity = int(value.Int64)
			}
		default:
			ps.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProductStatistics.
// This includes values selected through modifiers, order, etc.
func (ps *ProductStatistics) Value(name string) (ent.Value, error) {
	return ps.selectValues.Get(name)
}

// Update returns a builder for updating this ProductStatistics.
// Note that you need to call ProductStatistics.Unwrap() before calling this method if this ProductStatistics
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *ProductStatistics) Update() *ProductStatisticsUpdateOne {
	return NewProductStatisticsClient(ps.config).UpdateOne(ps)
}

// Unwrap unwraps the ProductStatistics entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *ProductStatistics) Unwrap() *ProductStatistics {
	_tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("generated: ProductStatistics is not a transactional entity")
	}
	ps.config.driver = _tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *ProductStatistics) String() string {
	var builder strings.Builder
	builder.WriteString("ProductStatistics(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ps.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", ps.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", ps.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("tenant_code=")
	builder.WriteString(ps.TenantCode)
	builder.WriteString(", ")
	builder.WriteString("total_products=")
	builder.WriteString(fmt.Sprintf("%v", ps.TotalProducts))
	builder.WriteString(", ")
	builder.WriteString("active_products=")
	builder.WriteString(fmt.Sprintf("%v", ps.ActiveProducts))
	builder.WriteString(", ")
	builder.WriteString("total_stock=")
	builder.WriteString(fmt.Sprintf("%v", ps.TotalStock))
	builder.WriteString(", ")
	builder.WriteString("total_stock_value=")
	builder.WriteString(fmt.Sprintf("%v", ps.TotalStockValue))
	builder.WriteString(", ")
	builder.WriteString("low_stock_products=")
	builder.WriteString(fmt.Sprintf("%v", ps.LowStockProducts))
	builder.WriteString(", ")
	builder.WriteString("total_in_quantity=")
	builder.WriteString(fmt.Sprintf("%v", ps.TotalInQuantity))
	builder.WriteString(", ")
	builder.WriteString("total_in_amount=")
	builder.WriteString(fmt.Sprintf("%v", ps.TotalInAmount))
	builder.WriteString(", ")
	builder.WriteString("total_out_quantity=")
	builder.WriteString(fmt.Sprintf("%v", ps.TotalOutQuantity))
	builder.WriteString(", ")
	builder.WriteString("total_out_amount=")
	builder.WriteString(fmt.Sprintf("%v", ps.TotalOutAmount))
	builder.WriteString(", ")
	builder.WriteString("total_sales_amount=")
	builder.WriteString(fmt.Sprintf("%v", ps.TotalSalesAmount))
	builder.WriteString(", ")
	builder.WriteString("total_sales_quantity=")
	builder.WriteString(fmt.Sprintf("%v", ps.TotalSalesQuantity))
	builder.WriteByte(')')
	return builder.String()
}

// ProductStatisticsSlice is a parsable slice of ProductStatistics.
type ProductStatisticsSlice []*ProductStatistics
