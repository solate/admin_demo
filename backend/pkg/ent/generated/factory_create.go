// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/factory"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FactoryCreate is the builder for creating a Factory entity.
type FactoryCreate struct {
	config
	mutation *FactoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (fc *FactoryCreate) SetCreatedAt(i int64) *FactoryCreate {
	fc.mutation.SetCreatedAt(i)
	return fc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fc *FactoryCreate) SetNillableCreatedAt(i *int64) *FactoryCreate {
	if i != nil {
		fc.SetCreatedAt(*i)
	}
	return fc
}

// SetUpdatedAt sets the "updated_at" field.
func (fc *FactoryCreate) SetUpdatedAt(i int64) *FactoryCreate {
	fc.mutation.SetUpdatedAt(i)
	return fc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fc *FactoryCreate) SetNillableUpdatedAt(i *int64) *FactoryCreate {
	if i != nil {
		fc.SetUpdatedAt(*i)
	}
	return fc
}

// SetDeletedAt sets the "deleted_at" field.
func (fc *FactoryCreate) SetDeletedAt(i int64) *FactoryCreate {
	fc.mutation.SetDeletedAt(i)
	return fc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fc *FactoryCreate) SetNillableDeletedAt(i *int64) *FactoryCreate {
	if i != nil {
		fc.SetDeletedAt(*i)
	}
	return fc
}

// SetTenantCode sets the "tenant_code" field.
func (fc *FactoryCreate) SetTenantCode(s string) *FactoryCreate {
	fc.mutation.SetTenantCode(s)
	return fc
}

// SetFactoryID sets the "factory_id" field.
func (fc *FactoryCreate) SetFactoryID(s string) *FactoryCreate {
	fc.mutation.SetFactoryID(s)
	return fc
}

// SetFactoryName sets the "factory_name" field.
func (fc *FactoryCreate) SetFactoryName(s string) *FactoryCreate {
	fc.mutation.SetFactoryName(s)
	return fc
}

// SetAddress sets the "address" field.
func (fc *FactoryCreate) SetAddress(s string) *FactoryCreate {
	fc.mutation.SetAddress(s)
	return fc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (fc *FactoryCreate) SetNillableAddress(s *string) *FactoryCreate {
	if s != nil {
		fc.SetAddress(*s)
	}
	return fc
}

// SetContactPhone sets the "contact_phone" field.
func (fc *FactoryCreate) SetContactPhone(s string) *FactoryCreate {
	fc.mutation.SetContactPhone(s)
	return fc
}

// SetNillableContactPhone sets the "contact_phone" field if the given value is not nil.
func (fc *FactoryCreate) SetNillableContactPhone(s *string) *FactoryCreate {
	if s != nil {
		fc.SetContactPhone(*s)
	}
	return fc
}

// SetStatus sets the "status" field.
func (fc *FactoryCreate) SetStatus(i int) *FactoryCreate {
	fc.mutation.SetStatus(i)
	return fc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fc *FactoryCreate) SetNillableStatus(i *int) *FactoryCreate {
	if i != nil {
		fc.SetStatus(*i)
	}
	return fc
}

// Mutation returns the FactoryMutation object of the builder.
func (fc *FactoryCreate) Mutation() *FactoryMutation {
	return fc.mutation
}

// Save creates the Factory in the database.
func (fc *FactoryCreate) Save(ctx context.Context) (*Factory, error) {
	fc.defaults()
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FactoryCreate) SaveX(ctx context.Context) *Factory {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FactoryCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FactoryCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FactoryCreate) defaults() {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		v := factory.DefaultCreatedAt
		fc.mutation.SetCreatedAt(v)
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		v := factory.DefaultUpdatedAt
		fc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fc.mutation.Address(); !ok {
		v := factory.DefaultAddress
		fc.mutation.SetAddress(v)
	}
	if _, ok := fc.mutation.ContactPhone(); !ok {
		v := factory.DefaultContactPhone
		fc.mutation.SetContactPhone(v)
	}
	if _, ok := fc.mutation.Status(); !ok {
		v := factory.DefaultStatus
		fc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FactoryCreate) check() error {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Factory.created_at"`)}
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "Factory.updated_at"`)}
	}
	if _, ok := fc.mutation.TenantCode(); !ok {
		return &ValidationError{Name: "tenant_code", err: errors.New(`generated: missing required field "Factory.tenant_code"`)}
	}
	if _, ok := fc.mutation.FactoryID(); !ok {
		return &ValidationError{Name: "factory_id", err: errors.New(`generated: missing required field "Factory.factory_id"`)}
	}
	if _, ok := fc.mutation.FactoryName(); !ok {
		return &ValidationError{Name: "factory_name", err: errors.New(`generated: missing required field "Factory.factory_name"`)}
	}
	if v, ok := fc.mutation.FactoryName(); ok {
		if err := factory.FactoryNameValidator(v); err != nil {
			return &ValidationError{Name: "factory_name", err: fmt.Errorf(`generated: validator failed for field "Factory.factory_name": %w`, err)}
		}
	}
	if _, ok := fc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`generated: missing required field "Factory.address"`)}
	}
	if _, ok := fc.mutation.ContactPhone(); !ok {
		return &ValidationError{Name: "contact_phone", err: errors.New(`generated: missing required field "Factory.contact_phone"`)}
	}
	if _, ok := fc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "Factory.status"`)}
	}
	return nil
}

func (fc *FactoryCreate) sqlSave(ctx context.Context) (*Factory, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FactoryCreate) createSpec() (*Factory, *sqlgraph.CreateSpec) {
	var (
		_node = &Factory{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(factory.Table, sqlgraph.NewFieldSpec(factory.FieldID, field.TypeInt))
	)
	_spec.OnConflict = fc.conflict
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.SetField(factory.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.SetField(factory.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := fc.mutation.DeletedAt(); ok {
		_spec.SetField(factory.FieldDeletedAt, field.TypeInt64, value)
		_node.DeletedAt = &value
	}
	if value, ok := fc.mutation.TenantCode(); ok {
		_spec.SetField(factory.FieldTenantCode, field.TypeString, value)
		_node.TenantCode = value
	}
	if value, ok := fc.mutation.FactoryID(); ok {
		_spec.SetField(factory.FieldFactoryID, field.TypeString, value)
		_node.FactoryID = value
	}
	if value, ok := fc.mutation.FactoryName(); ok {
		_spec.SetField(factory.FieldFactoryName, field.TypeString, value)
		_node.FactoryName = value
	}
	if value, ok := fc.mutation.Address(); ok {
		_spec.SetField(factory.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := fc.mutation.ContactPhone(); ok {
		_spec.SetField(factory.FieldContactPhone, field.TypeString, value)
		_node.ContactPhone = value
	}
	if value, ok := fc.mutation.Status(); ok {
		_spec.SetField(factory.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Factory.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FactoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (fc *FactoryCreate) OnConflict(opts ...sql.ConflictOption) *FactoryUpsertOne {
	fc.conflict = opts
	return &FactoryUpsertOne{
		create: fc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Factory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fc *FactoryCreate) OnConflictColumns(columns ...string) *FactoryUpsertOne {
	fc.conflict = append(fc.conflict, sql.ConflictColumns(columns...))
	return &FactoryUpsertOne{
		create: fc,
	}
}

type (
	// FactoryUpsertOne is the builder for "upsert"-ing
	//  one Factory node.
	FactoryUpsertOne struct {
		create *FactoryCreate
	}

	// FactoryUpsert is the "OnConflict" setter.
	FactoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *FactoryUpsert) SetUpdatedAt(v int64) *FactoryUpsert {
	u.Set(factory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FactoryUpsert) UpdateUpdatedAt() *FactoryUpsert {
	u.SetExcluded(factory.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FactoryUpsert) AddUpdatedAt(v int64) *FactoryUpsert {
	u.Add(factory.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FactoryUpsert) SetDeletedAt(v int64) *FactoryUpsert {
	u.Set(factory.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FactoryUpsert) UpdateDeletedAt() *FactoryUpsert {
	u.SetExcluded(factory.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FactoryUpsert) AddDeletedAt(v int64) *FactoryUpsert {
	u.Add(factory.FieldDeletedAt, v)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *FactoryUpsert) ClearDeletedAt() *FactoryUpsert {
	u.SetNull(factory.FieldDeletedAt)
	return u
}

// SetTenantCode sets the "tenant_code" field.
func (u *FactoryUpsert) SetTenantCode(v string) *FactoryUpsert {
	u.Set(factory.FieldTenantCode, v)
	return u
}

// UpdateTenantCode sets the "tenant_code" field to the value that was provided on create.
func (u *FactoryUpsert) UpdateTenantCode() *FactoryUpsert {
	u.SetExcluded(factory.FieldTenantCode)
	return u
}

// SetFactoryID sets the "factory_id" field.
func (u *FactoryUpsert) SetFactoryID(v string) *FactoryUpsert {
	u.Set(factory.FieldFactoryID, v)
	return u
}

// UpdateFactoryID sets the "factory_id" field to the value that was provided on create.
func (u *FactoryUpsert) UpdateFactoryID() *FactoryUpsert {
	u.SetExcluded(factory.FieldFactoryID)
	return u
}

// SetFactoryName sets the "factory_name" field.
func (u *FactoryUpsert) SetFactoryName(v string) *FactoryUpsert {
	u.Set(factory.FieldFactoryName, v)
	return u
}

// UpdateFactoryName sets the "factory_name" field to the value that was provided on create.
func (u *FactoryUpsert) UpdateFactoryName() *FactoryUpsert {
	u.SetExcluded(factory.FieldFactoryName)
	return u
}

// SetAddress sets the "address" field.
func (u *FactoryUpsert) SetAddress(v string) *FactoryUpsert {
	u.Set(factory.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *FactoryUpsert) UpdateAddress() *FactoryUpsert {
	u.SetExcluded(factory.FieldAddress)
	return u
}

// SetContactPhone sets the "contact_phone" field.
func (u *FactoryUpsert) SetContactPhone(v string) *FactoryUpsert {
	u.Set(factory.FieldContactPhone, v)
	return u
}

// UpdateContactPhone sets the "contact_phone" field to the value that was provided on create.
func (u *FactoryUpsert) UpdateContactPhone() *FactoryUpsert {
	u.SetExcluded(factory.FieldContactPhone)
	return u
}

// SetStatus sets the "status" field.
func (u *FactoryUpsert) SetStatus(v int) *FactoryUpsert {
	u.Set(factory.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *FactoryUpsert) UpdateStatus() *FactoryUpsert {
	u.SetExcluded(factory.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *FactoryUpsert) AddStatus(v int) *FactoryUpsert {
	u.Add(factory.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Factory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FactoryUpsertOne) UpdateNewValues() *FactoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(factory.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Factory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FactoryUpsertOne) Ignore() *FactoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FactoryUpsertOne) DoNothing() *FactoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FactoryCreate.OnConflict
// documentation for more info.
func (u *FactoryUpsertOne) Update(set func(*FactoryUpsert)) *FactoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FactoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FactoryUpsertOne) SetUpdatedAt(v int64) *FactoryUpsertOne {
	return u.Update(func(s *FactoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FactoryUpsertOne) AddUpdatedAt(v int64) *FactoryUpsertOne {
	return u.Update(func(s *FactoryUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FactoryUpsertOne) UpdateUpdatedAt() *FactoryUpsertOne {
	return u.Update(func(s *FactoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FactoryUpsertOne) SetDeletedAt(v int64) *FactoryUpsertOne {
	return u.Update(func(s *FactoryUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FactoryUpsertOne) AddDeletedAt(v int64) *FactoryUpsertOne {
	return u.Update(func(s *FactoryUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FactoryUpsertOne) UpdateDeletedAt() *FactoryUpsertOne {
	return u.Update(func(s *FactoryUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *FactoryUpsertOne) ClearDeletedAt() *FactoryUpsertOne {
	return u.Update(func(s *FactoryUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTenantCode sets the "tenant_code" field.
func (u *FactoryUpsertOne) SetTenantCode(v string) *FactoryUpsertOne {
	return u.Update(func(s *FactoryUpsert) {
		s.SetTenantCode(v)
	})
}

// UpdateTenantCode sets the "tenant_code" field to the value that was provided on create.
func (u *FactoryUpsertOne) UpdateTenantCode() *FactoryUpsertOne {
	return u.Update(func(s *FactoryUpsert) {
		s.UpdateTenantCode()
	})
}

// SetFactoryID sets the "factory_id" field.
func (u *FactoryUpsertOne) SetFactoryID(v string) *FactoryUpsertOne {
	return u.Update(func(s *FactoryUpsert) {
		s.SetFactoryID(v)
	})
}

// UpdateFactoryID sets the "factory_id" field to the value that was provided on create.
func (u *FactoryUpsertOne) UpdateFactoryID() *FactoryUpsertOne {
	return u.Update(func(s *FactoryUpsert) {
		s.UpdateFactoryID()
	})
}

// SetFactoryName sets the "factory_name" field.
func (u *FactoryUpsertOne) SetFactoryName(v string) *FactoryUpsertOne {
	return u.Update(func(s *FactoryUpsert) {
		s.SetFactoryName(v)
	})
}

// UpdateFactoryName sets the "factory_name" field to the value that was provided on create.
func (u *FactoryUpsertOne) UpdateFactoryName() *FactoryUpsertOne {
	return u.Update(func(s *FactoryUpsert) {
		s.UpdateFactoryName()
	})
}

// SetAddress sets the "address" field.
func (u *FactoryUpsertOne) SetAddress(v string) *FactoryUpsertOne {
	return u.Update(func(s *FactoryUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *FactoryUpsertOne) UpdateAddress() *FactoryUpsertOne {
	return u.Update(func(s *FactoryUpsert) {
		s.UpdateAddress()
	})
}

// SetContactPhone sets the "contact_phone" field.
func (u *FactoryUpsertOne) SetContactPhone(v string) *FactoryUpsertOne {
	return u.Update(func(s *FactoryUpsert) {
		s.SetContactPhone(v)
	})
}

// UpdateContactPhone sets the "contact_phone" field to the value that was provided on create.
func (u *FactoryUpsertOne) UpdateContactPhone() *FactoryUpsertOne {
	return u.Update(func(s *FactoryUpsert) {
		s.UpdateContactPhone()
	})
}

// SetStatus sets the "status" field.
func (u *FactoryUpsertOne) SetStatus(v int) *FactoryUpsertOne {
	return u.Update(func(s *FactoryUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *FactoryUpsertOne) AddStatus(v int) *FactoryUpsertOne {
	return u.Update(func(s *FactoryUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *FactoryUpsertOne) UpdateStatus() *FactoryUpsertOne {
	return u.Update(func(s *FactoryUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *FactoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for FactoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FactoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FactoryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FactoryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FactoryCreateBulk is the builder for creating many Factory entities in bulk.
type FactoryCreateBulk struct {
	config
	err      error
	builders []*FactoryCreate
	conflict []sql.ConflictOption
}

// Save creates the Factory entities in the database.
func (fcb *FactoryCreateBulk) Save(ctx context.Context) ([]*Factory, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Factory, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FactoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FactoryCreateBulk) SaveX(ctx context.Context) []*Factory {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FactoryCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FactoryCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Factory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FactoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (fcb *FactoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *FactoryUpsertBulk {
	fcb.conflict = opts
	return &FactoryUpsertBulk{
		create: fcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Factory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fcb *FactoryCreateBulk) OnConflictColumns(columns ...string) *FactoryUpsertBulk {
	fcb.conflict = append(fcb.conflict, sql.ConflictColumns(columns...))
	return &FactoryUpsertBulk{
		create: fcb,
	}
}

// FactoryUpsertBulk is the builder for "upsert"-ing
// a bulk of Factory nodes.
type FactoryUpsertBulk struct {
	create *FactoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Factory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FactoryUpsertBulk) UpdateNewValues() *FactoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(factory.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Factory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FactoryUpsertBulk) Ignore() *FactoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FactoryUpsertBulk) DoNothing() *FactoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FactoryCreateBulk.OnConflict
// documentation for more info.
func (u *FactoryUpsertBulk) Update(set func(*FactoryUpsert)) *FactoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FactoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FactoryUpsertBulk) SetUpdatedAt(v int64) *FactoryUpsertBulk {
	return u.Update(func(s *FactoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FactoryUpsertBulk) AddUpdatedAt(v int64) *FactoryUpsertBulk {
	return u.Update(func(s *FactoryUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FactoryUpsertBulk) UpdateUpdatedAt() *FactoryUpsertBulk {
	return u.Update(func(s *FactoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FactoryUpsertBulk) SetDeletedAt(v int64) *FactoryUpsertBulk {
	return u.Update(func(s *FactoryUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FactoryUpsertBulk) AddDeletedAt(v int64) *FactoryUpsertBulk {
	return u.Update(func(s *FactoryUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FactoryUpsertBulk) UpdateDeletedAt() *FactoryUpsertBulk {
	return u.Update(func(s *FactoryUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *FactoryUpsertBulk) ClearDeletedAt() *FactoryUpsertBulk {
	return u.Update(func(s *FactoryUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTenantCode sets the "tenant_code" field.
func (u *FactoryUpsertBulk) SetTenantCode(v string) *FactoryUpsertBulk {
	return u.Update(func(s *FactoryUpsert) {
		s.SetTenantCode(v)
	})
}

// UpdateTenantCode sets the "tenant_code" field to the value that was provided on create.
func (u *FactoryUpsertBulk) UpdateTenantCode() *FactoryUpsertBulk {
	return u.Update(func(s *FactoryUpsert) {
		s.UpdateTenantCode()
	})
}

// SetFactoryID sets the "factory_id" field.
func (u *FactoryUpsertBulk) SetFactoryID(v string) *FactoryUpsertBulk {
	return u.Update(func(s *FactoryUpsert) {
		s.SetFactoryID(v)
	})
}

// UpdateFactoryID sets the "factory_id" field to the value that was provided on create.
func (u *FactoryUpsertBulk) UpdateFactoryID() *FactoryUpsertBulk {
	return u.Update(func(s *FactoryUpsert) {
		s.UpdateFactoryID()
	})
}

// SetFactoryName sets the "factory_name" field.
func (u *FactoryUpsertBulk) SetFactoryName(v string) *FactoryUpsertBulk {
	return u.Update(func(s *FactoryUpsert) {
		s.SetFactoryName(v)
	})
}

// UpdateFactoryName sets the "factory_name" field to the value that was provided on create.
func (u *FactoryUpsertBulk) UpdateFactoryName() *FactoryUpsertBulk {
	return u.Update(func(s *FactoryUpsert) {
		s.UpdateFactoryName()
	})
}

// SetAddress sets the "address" field.
func (u *FactoryUpsertBulk) SetAddress(v string) *FactoryUpsertBulk {
	return u.Update(func(s *FactoryUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *FactoryUpsertBulk) UpdateAddress() *FactoryUpsertBulk {
	return u.Update(func(s *FactoryUpsert) {
		s.UpdateAddress()
	})
}

// SetContactPhone sets the "contact_phone" field.
func (u *FactoryUpsertBulk) SetContactPhone(v string) *FactoryUpsertBulk {
	return u.Update(func(s *FactoryUpsert) {
		s.SetContactPhone(v)
	})
}

// UpdateContactPhone sets the "contact_phone" field to the value that was provided on create.
func (u *FactoryUpsertBulk) UpdateContactPhone() *FactoryUpsertBulk {
	return u.Update(func(s *FactoryUpsert) {
		s.UpdateContactPhone()
	})
}

// SetStatus sets the "status" field.
func (u *FactoryUpsertBulk) SetStatus(v int) *FactoryUpsertBulk {
	return u.Update(func(s *FactoryUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *FactoryUpsertBulk) AddStatus(v int) *FactoryUpsertBulk {
	return u.Update(func(s *FactoryUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *FactoryUpsertBulk) UpdateStatus() *FactoryUpsertBulk {
	return u.Update(func(s *FactoryUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *FactoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the FactoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for FactoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FactoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
