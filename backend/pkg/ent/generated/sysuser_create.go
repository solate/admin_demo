// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/sysuser"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysUserCreate is the builder for creating a SysUser entity.
type SysUserCreate struct {
	config
	mutation *SysUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (suc *SysUserCreate) SetCreatedAt(i int64) *SysUserCreate {
	suc.mutation.SetCreatedAt(i)
	return suc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableCreatedAt(i *int64) *SysUserCreate {
	if i != nil {
		suc.SetCreatedAt(*i)
	}
	return suc
}

// SetUpdatedAt sets the "updated_at" field.
func (suc *SysUserCreate) SetUpdatedAt(i int64) *SysUserCreate {
	suc.mutation.SetUpdatedAt(i)
	return suc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableUpdatedAt(i *int64) *SysUserCreate {
	if i != nil {
		suc.SetUpdatedAt(*i)
	}
	return suc
}

// SetDeletedAt sets the "deleted_at" field.
func (suc *SysUserCreate) SetDeletedAt(i int64) *SysUserCreate {
	suc.mutation.SetDeletedAt(i)
	return suc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableDeletedAt(i *int64) *SysUserCreate {
	if i != nil {
		suc.SetDeletedAt(*i)
	}
	return suc
}

// SetTenantCode sets the "tenant_code" field.
func (suc *SysUserCreate) SetTenantCode(s string) *SysUserCreate {
	suc.mutation.SetTenantCode(s)
	return suc
}

// SetUserID sets the "user_id" field.
func (suc *SysUserCreate) SetUserID(s string) *SysUserCreate {
	suc.mutation.SetUserID(s)
	return suc
}

// SetUserName sets the "user_name" field.
func (suc *SysUserCreate) SetUserName(s string) *SysUserCreate {
	suc.mutation.SetUserName(s)
	return suc
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableUserName(s *string) *SysUserCreate {
	if s != nil {
		suc.SetUserName(*s)
	}
	return suc
}

// SetPwdHashed sets the "pwd_hashed" field.
func (suc *SysUserCreate) SetPwdHashed(s string) *SysUserCreate {
	suc.mutation.SetPwdHashed(s)
	return suc
}

// SetNillablePwdHashed sets the "pwd_hashed" field if the given value is not nil.
func (suc *SysUserCreate) SetNillablePwdHashed(s *string) *SysUserCreate {
	if s != nil {
		suc.SetPwdHashed(*s)
	}
	return suc
}

// SetPwdSalt sets the "pwd_salt" field.
func (suc *SysUserCreate) SetPwdSalt(s string) *SysUserCreate {
	suc.mutation.SetPwdSalt(s)
	return suc
}

// SetNillablePwdSalt sets the "pwd_salt" field if the given value is not nil.
func (suc *SysUserCreate) SetNillablePwdSalt(s *string) *SysUserCreate {
	if s != nil {
		suc.SetPwdSalt(*s)
	}
	return suc
}

// SetToken sets the "token" field.
func (suc *SysUserCreate) SetToken(s string) *SysUserCreate {
	suc.mutation.SetToken(s)
	return suc
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableToken(s *string) *SysUserCreate {
	if s != nil {
		suc.SetToken(*s)
	}
	return suc
}

// SetName sets the "name" field.
func (suc *SysUserCreate) SetName(s string) *SysUserCreate {
	suc.mutation.SetName(s)
	return suc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableName(s *string) *SysUserCreate {
	if s != nil {
		suc.SetName(*s)
	}
	return suc
}

// SetAvatar sets the "avatar" field.
func (suc *SysUserCreate) SetAvatar(s string) *SysUserCreate {
	suc.mutation.SetAvatar(s)
	return suc
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableAvatar(s *string) *SysUserCreate {
	if s != nil {
		suc.SetAvatar(*s)
	}
	return suc
}

// SetPhone sets the "phone" field.
func (suc *SysUserCreate) SetPhone(s string) *SysUserCreate {
	suc.mutation.SetPhone(s)
	return suc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (suc *SysUserCreate) SetNillablePhone(s *string) *SysUserCreate {
	if s != nil {
		suc.SetPhone(*s)
	}
	return suc
}

// SetEmail sets the "email" field.
func (suc *SysUserCreate) SetEmail(s string) *SysUserCreate {
	suc.mutation.SetEmail(s)
	return suc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableEmail(s *string) *SysUserCreate {
	if s != nil {
		suc.SetEmail(*s)
	}
	return suc
}

// SetSex sets the "sex" field.
func (suc *SysUserCreate) SetSex(i int) *SysUserCreate {
	suc.mutation.SetSex(i)
	return suc
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableSex(i *int) *SysUserCreate {
	if i != nil {
		suc.SetSex(*i)
	}
	return suc
}

// SetStatus sets the "status" field.
func (suc *SysUserCreate) SetStatus(i int) *SysUserCreate {
	suc.mutation.SetStatus(i)
	return suc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableStatus(i *int) *SysUserCreate {
	if i != nil {
		suc.SetStatus(*i)
	}
	return suc
}

// Mutation returns the SysUserMutation object of the builder.
func (suc *SysUserCreate) Mutation() *SysUserMutation {
	return suc.mutation
}

// Save creates the SysUser in the database.
func (suc *SysUserCreate) Save(ctx context.Context) (*SysUser, error) {
	suc.defaults()
	return withHooks(ctx, suc.sqlSave, suc.mutation, suc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (suc *SysUserCreate) SaveX(ctx context.Context) *SysUser {
	v, err := suc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (suc *SysUserCreate) Exec(ctx context.Context) error {
	_, err := suc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suc *SysUserCreate) ExecX(ctx context.Context) {
	if err := suc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suc *SysUserCreate) defaults() {
	if _, ok := suc.mutation.CreatedAt(); !ok {
		v := sysuser.DefaultCreatedAt
		suc.mutation.SetCreatedAt(v)
	}
	if _, ok := suc.mutation.UpdatedAt(); !ok {
		v := sysuser.DefaultUpdatedAt
		suc.mutation.SetUpdatedAt(v)
	}
	if _, ok := suc.mutation.UserName(); !ok {
		v := sysuser.DefaultUserName
		suc.mutation.SetUserName(v)
	}
	if _, ok := suc.mutation.PwdHashed(); !ok {
		v := sysuser.DefaultPwdHashed
		suc.mutation.SetPwdHashed(v)
	}
	if _, ok := suc.mutation.PwdSalt(); !ok {
		v := sysuser.DefaultPwdSalt
		suc.mutation.SetPwdSalt(v)
	}
	if _, ok := suc.mutation.Token(); !ok {
		v := sysuser.DefaultToken
		suc.mutation.SetToken(v)
	}
	if _, ok := suc.mutation.Name(); !ok {
		v := sysuser.DefaultName
		suc.mutation.SetName(v)
	}
	if _, ok := suc.mutation.Avatar(); !ok {
		v := sysuser.DefaultAvatar
		suc.mutation.SetAvatar(v)
	}
	if _, ok := suc.mutation.Phone(); !ok {
		v := sysuser.DefaultPhone
		suc.mutation.SetPhone(v)
	}
	if _, ok := suc.mutation.Email(); !ok {
		v := sysuser.DefaultEmail
		suc.mutation.SetEmail(v)
	}
	if _, ok := suc.mutation.Sex(); !ok {
		v := sysuser.DefaultSex
		suc.mutation.SetSex(v)
	}
	if _, ok := suc.mutation.Status(); !ok {
		v := sysuser.DefaultStatus
		suc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suc *SysUserCreate) check() error {
	if _, ok := suc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "SysUser.created_at"`)}
	}
	if _, ok := suc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "SysUser.updated_at"`)}
	}
	if _, ok := suc.mutation.TenantCode(); !ok {
		return &ValidationError{Name: "tenant_code", err: errors.New(`generated: missing required field "SysUser.tenant_code"`)}
	}
	if _, ok := suc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`generated: missing required field "SysUser.user_id"`)}
	}
	if _, ok := suc.mutation.UserName(); !ok {
		return &ValidationError{Name: "user_name", err: errors.New(`generated: missing required field "SysUser.user_name"`)}
	}
	if v, ok := suc.mutation.UserName(); ok {
		if err := sysuser.UserNameValidator(v); err != nil {
			return &ValidationError{Name: "user_name", err: fmt.Errorf(`generated: validator failed for field "SysUser.user_name": %w`, err)}
		}
	}
	if _, ok := suc.mutation.PwdHashed(); !ok {
		return &ValidationError{Name: "pwd_hashed", err: errors.New(`generated: missing required field "SysUser.pwd_hashed"`)}
	}
	if v, ok := suc.mutation.PwdHashed(); ok {
		if err := sysuser.PwdHashedValidator(v); err != nil {
			return &ValidationError{Name: "pwd_hashed", err: fmt.Errorf(`generated: validator failed for field "SysUser.pwd_hashed": %w`, err)}
		}
	}
	if _, ok := suc.mutation.PwdSalt(); !ok {
		return &ValidationError{Name: "pwd_salt", err: errors.New(`generated: missing required field "SysUser.pwd_salt"`)}
	}
	if v, ok := suc.mutation.PwdSalt(); ok {
		if err := sysuser.PwdSaltValidator(v); err != nil {
			return &ValidationError{Name: "pwd_salt", err: fmt.Errorf(`generated: validator failed for field "SysUser.pwd_salt": %w`, err)}
		}
	}
	if _, ok := suc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`generated: missing required field "SysUser.token"`)}
	}
	if _, ok := suc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "SysUser.name"`)}
	}
	if _, ok := suc.mutation.Avatar(); !ok {
		return &ValidationError{Name: "avatar", err: errors.New(`generated: missing required field "SysUser.avatar"`)}
	}
	if _, ok := suc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`generated: missing required field "SysUser.phone"`)}
	}
	if _, ok := suc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`generated: missing required field "SysUser.email"`)}
	}
	if _, ok := suc.mutation.Sex(); !ok {
		return &ValidationError{Name: "sex", err: errors.New(`generated: missing required field "SysUser.sex"`)}
	}
	if _, ok := suc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "SysUser.status"`)}
	}
	return nil
}

func (suc *SysUserCreate) sqlSave(ctx context.Context) (*SysUser, error) {
	if err := suc.check(); err != nil {
		return nil, err
	}
	_node, _spec := suc.createSpec()
	if err := sqlgraph.CreateNode(ctx, suc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	suc.mutation.id = &_node.ID
	suc.mutation.done = true
	return _node, nil
}

func (suc *SysUserCreate) createSpec() (*SysUser, *sqlgraph.CreateSpec) {
	var (
		_node = &SysUser{config: suc.config}
		_spec = sqlgraph.NewCreateSpec(sysuser.Table, sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt))
	)
	_spec.OnConflict = suc.conflict
	if value, ok := suc.mutation.CreatedAt(); ok {
		_spec.SetField(sysuser.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := suc.mutation.UpdatedAt(); ok {
		_spec.SetField(sysuser.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := suc.mutation.DeletedAt(); ok {
		_spec.SetField(sysuser.FieldDeletedAt, field.TypeInt64, value)
		_node.DeletedAt = &value
	}
	if value, ok := suc.mutation.TenantCode(); ok {
		_spec.SetField(sysuser.FieldTenantCode, field.TypeString, value)
		_node.TenantCode = value
	}
	if value, ok := suc.mutation.UserID(); ok {
		_spec.SetField(sysuser.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := suc.mutation.UserName(); ok {
		_spec.SetField(sysuser.FieldUserName, field.TypeString, value)
		_node.UserName = value
	}
	if value, ok := suc.mutation.PwdHashed(); ok {
		_spec.SetField(sysuser.FieldPwdHashed, field.TypeString, value)
		_node.PwdHashed = value
	}
	if value, ok := suc.mutation.PwdSalt(); ok {
		_spec.SetField(sysuser.FieldPwdSalt, field.TypeString, value)
		_node.PwdSalt = value
	}
	if value, ok := suc.mutation.Token(); ok {
		_spec.SetField(sysuser.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := suc.mutation.Name(); ok {
		_spec.SetField(sysuser.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := suc.mutation.Avatar(); ok {
		_spec.SetField(sysuser.FieldAvatar, field.TypeString, value)
		_node.Avatar = value
	}
	if value, ok := suc.mutation.Phone(); ok {
		_spec.SetField(sysuser.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := suc.mutation.Email(); ok {
		_spec.SetField(sysuser.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := suc.mutation.Sex(); ok {
		_spec.SetField(sysuser.FieldSex, field.TypeInt, value)
		_node.Sex = value
	}
	if value, ok := suc.mutation.Status(); ok {
		_spec.SetField(sysuser.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysUser.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysUserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (suc *SysUserCreate) OnConflict(opts ...sql.ConflictOption) *SysUserUpsertOne {
	suc.conflict = opts
	return &SysUserUpsertOne{
		create: suc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (suc *SysUserCreate) OnConflictColumns(columns ...string) *SysUserUpsertOne {
	suc.conflict = append(suc.conflict, sql.ConflictColumns(columns...))
	return &SysUserUpsertOne{
		create: suc,
	}
}

type (
	// SysUserUpsertOne is the builder for "upsert"-ing
	//  one SysUser node.
	SysUserUpsertOne struct {
		create *SysUserCreate
	}

	// SysUserUpsert is the "OnConflict" setter.
	SysUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *SysUserUpsert) SetUpdatedAt(v int64) *SysUserUpsert {
	u.Set(sysuser.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateUpdatedAt() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SysUserUpsert) AddUpdatedAt(v int64) *SysUserUpsert {
	u.Add(sysuser.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysUserUpsert) SetDeletedAt(v int64) *SysUserUpsert {
	u.Set(sysuser.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateDeletedAt() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SysUserUpsert) AddDeletedAt(v int64) *SysUserUpsert {
	u.Add(sysuser.FieldDeletedAt, v)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysUserUpsert) ClearDeletedAt() *SysUserUpsert {
	u.SetNull(sysuser.FieldDeletedAt)
	return u
}

// SetTenantCode sets the "tenant_code" field.
func (u *SysUserUpsert) SetTenantCode(v string) *SysUserUpsert {
	u.Set(sysuser.FieldTenantCode, v)
	return u
}

// UpdateTenantCode sets the "tenant_code" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateTenantCode() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldTenantCode)
	return u
}

// SetUserID sets the "user_id" field.
func (u *SysUserUpsert) SetUserID(v string) *SysUserUpsert {
	u.Set(sysuser.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateUserID() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldUserID)
	return u
}

// SetUserName sets the "user_name" field.
func (u *SysUserUpsert) SetUserName(v string) *SysUserUpsert {
	u.Set(sysuser.FieldUserName, v)
	return u
}

// UpdateUserName sets the "user_name" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateUserName() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldUserName)
	return u
}

// SetPwdHashed sets the "pwd_hashed" field.
func (u *SysUserUpsert) SetPwdHashed(v string) *SysUserUpsert {
	u.Set(sysuser.FieldPwdHashed, v)
	return u
}

// UpdatePwdHashed sets the "pwd_hashed" field to the value that was provided on create.
func (u *SysUserUpsert) UpdatePwdHashed() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldPwdHashed)
	return u
}

// SetPwdSalt sets the "pwd_salt" field.
func (u *SysUserUpsert) SetPwdSalt(v string) *SysUserUpsert {
	u.Set(sysuser.FieldPwdSalt, v)
	return u
}

// UpdatePwdSalt sets the "pwd_salt" field to the value that was provided on create.
func (u *SysUserUpsert) UpdatePwdSalt() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldPwdSalt)
	return u
}

// SetToken sets the "token" field.
func (u *SysUserUpsert) SetToken(v string) *SysUserUpsert {
	u.Set(sysuser.FieldToken, v)
	return u
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateToken() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldToken)
	return u
}

// SetName sets the "name" field.
func (u *SysUserUpsert) SetName(v string) *SysUserUpsert {
	u.Set(sysuser.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateName() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldName)
	return u
}

// SetAvatar sets the "avatar" field.
func (u *SysUserUpsert) SetAvatar(v string) *SysUserUpsert {
	u.Set(sysuser.FieldAvatar, v)
	return u
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateAvatar() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldAvatar)
	return u
}

// SetPhone sets the "phone" field.
func (u *SysUserUpsert) SetPhone(v string) *SysUserUpsert {
	u.Set(sysuser.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *SysUserUpsert) UpdatePhone() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldPhone)
	return u
}

// SetEmail sets the "email" field.
func (u *SysUserUpsert) SetEmail(v string) *SysUserUpsert {
	u.Set(sysuser.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateEmail() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldEmail)
	return u
}

// SetSex sets the "sex" field.
func (u *SysUserUpsert) SetSex(v int) *SysUserUpsert {
	u.Set(sysuser.FieldSex, v)
	return u
}

// UpdateSex sets the "sex" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateSex() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldSex)
	return u
}

// AddSex adds v to the "sex" field.
func (u *SysUserUpsert) AddSex(v int) *SysUserUpsert {
	u.Add(sysuser.FieldSex, v)
	return u
}

// SetStatus sets the "status" field.
func (u *SysUserUpsert) SetStatus(v int) *SysUserUpsert {
	u.Set(sysuser.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SysUserUpsert) UpdateStatus() *SysUserUpsert {
	u.SetExcluded(sysuser.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *SysUserUpsert) AddStatus(v int) *SysUserUpsert {
	u.Add(sysuser.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SysUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SysUserUpsertOne) UpdateNewValues() *SysUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(sysuser.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysUser.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SysUserUpsertOne) Ignore() *SysUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysUserUpsertOne) DoNothing() *SysUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysUserCreate.OnConflict
// documentation for more info.
func (u *SysUserUpsertOne) Update(set func(*SysUserUpsert)) *SysUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysUserUpsertOne) SetUpdatedAt(v int64) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SysUserUpsertOne) AddUpdatedAt(v int64) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateUpdatedAt() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysUserUpsertOne) SetDeletedAt(v int64) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SysUserUpsertOne) AddDeletedAt(v int64) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateDeletedAt() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysUserUpsertOne) ClearDeletedAt() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTenantCode sets the "tenant_code" field.
func (u *SysUserUpsertOne) SetTenantCode(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetTenantCode(v)
	})
}

// UpdateTenantCode sets the "tenant_code" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateTenantCode() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateTenantCode()
	})
}

// SetUserID sets the "user_id" field.
func (u *SysUserUpsertOne) SetUserID(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateUserID() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateUserID()
	})
}

// SetUserName sets the "user_name" field.
func (u *SysUserUpsertOne) SetUserName(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetUserName(v)
	})
}

// UpdateUserName sets the "user_name" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateUserName() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateUserName()
	})
}

// SetPwdHashed sets the "pwd_hashed" field.
func (u *SysUserUpsertOne) SetPwdHashed(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetPwdHashed(v)
	})
}

// UpdatePwdHashed sets the "pwd_hashed" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdatePwdHashed() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdatePwdHashed()
	})
}

// SetPwdSalt sets the "pwd_salt" field.
func (u *SysUserUpsertOne) SetPwdSalt(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetPwdSalt(v)
	})
}

// UpdatePwdSalt sets the "pwd_salt" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdatePwdSalt() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdatePwdSalt()
	})
}

// SetToken sets the "token" field.
func (u *SysUserUpsertOne) SetToken(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetToken(v)
	})
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateToken() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateToken()
	})
}

// SetName sets the "name" field.
func (u *SysUserUpsertOne) SetName(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateName() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateName()
	})
}

// SetAvatar sets the "avatar" field.
func (u *SysUserUpsertOne) SetAvatar(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateAvatar() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateAvatar()
	})
}

// SetPhone sets the "phone" field.
func (u *SysUserUpsertOne) SetPhone(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdatePhone() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdatePhone()
	})
}

// SetEmail sets the "email" field.
func (u *SysUserUpsertOne) SetEmail(v string) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateEmail() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateEmail()
	})
}

// SetSex sets the "sex" field.
func (u *SysUserUpsertOne) SetSex(v int) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetSex(v)
	})
}

// AddSex adds v to the "sex" field.
func (u *SysUserUpsertOne) AddSex(v int) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.AddSex(v)
	})
}

// UpdateSex sets the "sex" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateSex() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateSex()
	})
}

// SetStatus sets the "status" field.
func (u *SysUserUpsertOne) SetStatus(v int) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *SysUserUpsertOne) AddStatus(v int) *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SysUserUpsertOne) UpdateStatus() *SysUserUpsertOne {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *SysUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for SysUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SysUserUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SysUserUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SysUserCreateBulk is the builder for creating many SysUser entities in bulk.
type SysUserCreateBulk struct {
	config
	err      error
	builders []*SysUserCreate
	conflict []sql.ConflictOption
}

// Save creates the SysUser entities in the database.
func (sucb *SysUserCreateBulk) Save(ctx context.Context) ([]*SysUser, error) {
	if sucb.err != nil {
		return nil, sucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sucb.builders))
	nodes := make([]*SysUser, len(sucb.builders))
	mutators := make([]Mutator, len(sucb.builders))
	for i := range sucb.builders {
		func(i int, root context.Context) {
			builder := sucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sucb *SysUserCreateBulk) SaveX(ctx context.Context) []*SysUser {
	v, err := sucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sucb *SysUserCreateBulk) Exec(ctx context.Context) error {
	_, err := sucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sucb *SysUserCreateBulk) ExecX(ctx context.Context) {
	if err := sucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysUserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sucb *SysUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *SysUserUpsertBulk {
	sucb.conflict = opts
	return &SysUserUpsertBulk{
		create: sucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sucb *SysUserCreateBulk) OnConflictColumns(columns ...string) *SysUserUpsertBulk {
	sucb.conflict = append(sucb.conflict, sql.ConflictColumns(columns...))
	return &SysUserUpsertBulk{
		create: sucb,
	}
}

// SysUserUpsertBulk is the builder for "upsert"-ing
// a bulk of SysUser nodes.
type SysUserUpsertBulk struct {
	create *SysUserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SysUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SysUserUpsertBulk) UpdateNewValues() *SysUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(sysuser.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SysUserUpsertBulk) Ignore() *SysUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysUserUpsertBulk) DoNothing() *SysUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysUserCreateBulk.OnConflict
// documentation for more info.
func (u *SysUserUpsertBulk) Update(set func(*SysUserUpsert)) *SysUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysUserUpsertBulk) SetUpdatedAt(v int64) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *SysUserUpsertBulk) AddUpdatedAt(v int64) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateUpdatedAt() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysUserUpsertBulk) SetDeletedAt(v int64) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *SysUserUpsertBulk) AddDeletedAt(v int64) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateDeletedAt() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysUserUpsertBulk) ClearDeletedAt() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTenantCode sets the "tenant_code" field.
func (u *SysUserUpsertBulk) SetTenantCode(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetTenantCode(v)
	})
}

// UpdateTenantCode sets the "tenant_code" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateTenantCode() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateTenantCode()
	})
}

// SetUserID sets the "user_id" field.
func (u *SysUserUpsertBulk) SetUserID(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateUserID() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateUserID()
	})
}

// SetUserName sets the "user_name" field.
func (u *SysUserUpsertBulk) SetUserName(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetUserName(v)
	})
}

// UpdateUserName sets the "user_name" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateUserName() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateUserName()
	})
}

// SetPwdHashed sets the "pwd_hashed" field.
func (u *SysUserUpsertBulk) SetPwdHashed(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetPwdHashed(v)
	})
}

// UpdatePwdHashed sets the "pwd_hashed" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdatePwdHashed() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdatePwdHashed()
	})
}

// SetPwdSalt sets the "pwd_salt" field.
func (u *SysUserUpsertBulk) SetPwdSalt(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetPwdSalt(v)
	})
}

// UpdatePwdSalt sets the "pwd_salt" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdatePwdSalt() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdatePwdSalt()
	})
}

// SetToken sets the "token" field.
func (u *SysUserUpsertBulk) SetToken(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetToken(v)
	})
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateToken() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateToken()
	})
}

// SetName sets the "name" field.
func (u *SysUserUpsertBulk) SetName(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateName() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateName()
	})
}

// SetAvatar sets the "avatar" field.
func (u *SysUserUpsertBulk) SetAvatar(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateAvatar() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateAvatar()
	})
}

// SetPhone sets the "phone" field.
func (u *SysUserUpsertBulk) SetPhone(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdatePhone() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdatePhone()
	})
}

// SetEmail sets the "email" field.
func (u *SysUserUpsertBulk) SetEmail(v string) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateEmail() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateEmail()
	})
}

// SetSex sets the "sex" field.
func (u *SysUserUpsertBulk) SetSex(v int) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetSex(v)
	})
}

// AddSex adds v to the "sex" field.
func (u *SysUserUpsertBulk) AddSex(v int) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.AddSex(v)
	})
}

// UpdateSex sets the "sex" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateSex() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateSex()
	})
}

// SetStatus sets the "status" field.
func (u *SysUserUpsertBulk) SetStatus(v int) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *SysUserUpsertBulk) AddStatus(v int) *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SysUserUpsertBulk) UpdateStatus() *SysUserUpsertBulk {
	return u.Update(func(s *SysUserUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *SysUserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the SysUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for SysUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
