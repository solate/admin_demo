// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/dicttype"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 字典类型
type DictType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// 修改时间
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt *int64 `json:"deleted_at,omitempty"`
	// 租户编码
	TenantCode string `json:"tenant_code,omitempty"`
	// 字典类型ID
	TypeID string `json:"type_id,omitempty"`
	// 字典类型名称
	Name string `json:"name,omitempty"`
	// 字典类型编码
	Code string `json:"code,omitempty"`
	// 字典类型描述
	Description string `json:"description,omitempty"`
	// 状态: 1:启用, 2:禁用
	Status       int `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DictType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dicttype.FieldID, dicttype.FieldCreatedAt, dicttype.FieldUpdatedAt, dicttype.FieldDeletedAt, dicttype.FieldStatus:
			values[i] = new(sql.NullInt64)
		case dicttype.FieldTenantCode, dicttype.FieldTypeID, dicttype.FieldName, dicttype.FieldCode, dicttype.FieldDescription:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DictType fields.
func (dt *DictType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dicttype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dt.ID = int(value.Int64)
		case dicttype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dt.CreatedAt = value.Int64
			}
		case dicttype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				dt.UpdatedAt = value.Int64
			}
		case dicttype.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				dt.DeletedAt = new(int64)
				*dt.DeletedAt = value.Int64
			}
		case dicttype.FieldTenantCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_code", values[i])
			} else if value.Valid {
				dt.TenantCode = value.String
			}
		case dicttype.FieldTypeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type_id", values[i])
			} else if value.Valid {
				dt.TypeID = value.String
			}
		case dicttype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				dt.Name = value.String
			}
		case dicttype.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				dt.Code = value.String
			}
		case dicttype.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				dt.Description = value.String
			}
		case dicttype.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				dt.Status = int(value.Int64)
			}
		default:
			dt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DictType.
// This includes values selected through modifiers, order, etc.
func (dt *DictType) Value(name string) (ent.Value, error) {
	return dt.selectValues.Get(name)
}

// Update returns a builder for updating this DictType.
// Note that you need to call DictType.Unwrap() before calling this method if this DictType
// was returned from a transaction, and the transaction was committed or rolled back.
func (dt *DictType) Update() *DictTypeUpdateOne {
	return NewDictTypeClient(dt.config).UpdateOne(dt)
}

// Unwrap unwraps the DictType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dt *DictType) Unwrap() *DictType {
	_tx, ok := dt.config.driver.(*txDriver)
	if !ok {
		panic("generated: DictType is not a transactional entity")
	}
	dt.config.driver = _tx.drv
	return dt
}

// String implements the fmt.Stringer.
func (dt *DictType) String() string {
	var builder strings.Builder
	builder.WriteString("DictType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", dt.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", dt.UpdatedAt))
	builder.WriteString(", ")
	if v := dt.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("tenant_code=")
	builder.WriteString(dt.TenantCode)
	builder.WriteString(", ")
	builder.WriteString("type_id=")
	builder.WriteString(dt.TypeID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(dt.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(dt.Code)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(dt.Description)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", dt.Status))
	builder.WriteByte(')')
	return builder.String()
}

// DictTypes is a parsable slice of DictType.
type DictTypes []*DictType
