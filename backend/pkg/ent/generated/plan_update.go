// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/plan"
	"admin_backend/pkg/ent/generated/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlanUpdate is the builder for updating Plan entities.
type PlanUpdate struct {
	config
	hooks     []Hook
	mutation  *PlanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PlanUpdate builder.
func (pu *PlanUpdate) Where(ps ...predicate.Plan) *PlanUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PlanUpdate) SetUpdatedAt(i int64) *PlanUpdate {
	pu.mutation.ResetUpdatedAt()
	pu.mutation.SetUpdatedAt(i)
	return pu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableUpdatedAt(i *int64) *PlanUpdate {
	if i != nil {
		pu.SetUpdatedAt(*i)
	}
	return pu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (pu *PlanUpdate) AddUpdatedAt(i int64) *PlanUpdate {
	pu.mutation.AddUpdatedAt(i)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PlanUpdate) SetDeletedAt(i int64) *PlanUpdate {
	pu.mutation.ResetDeletedAt()
	pu.mutation.SetDeletedAt(i)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableDeletedAt(i *int64) *PlanUpdate {
	if i != nil {
		pu.SetDeletedAt(*i)
	}
	return pu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (pu *PlanUpdate) AddDeletedAt(i int64) *PlanUpdate {
	pu.mutation.AddDeletedAt(i)
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *PlanUpdate) ClearDeletedAt() *PlanUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetTenantCode sets the "tenant_code" field.
func (pu *PlanUpdate) SetTenantCode(s string) *PlanUpdate {
	pu.mutation.SetTenantCode(s)
	return pu
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableTenantCode(s *string) *PlanUpdate {
	if s != nil {
		pu.SetTenantCode(*s)
	}
	return pu
}

// SetPlanID sets the "plan_id" field.
func (pu *PlanUpdate) SetPlanID(s string) *PlanUpdate {
	pu.mutation.SetPlanID(s)
	return pu
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (pu *PlanUpdate) SetNillablePlanID(s *string) *PlanUpdate {
	if s != nil {
		pu.SetPlanID(*s)
	}
	return pu
}

// SetName sets the "name" field.
func (pu *PlanUpdate) SetName(s string) *PlanUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableName(s *string) *PlanUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetDescription sets the "description" field.
func (pu *PlanUpdate) SetDescription(s string) *PlanUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableDescription(s *string) *PlanUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *PlanUpdate) ClearDescription() *PlanUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetGroup sets the "group" field.
func (pu *PlanUpdate) SetGroup(s string) *PlanUpdate {
	pu.mutation.SetGroup(s)
	return pu
}

// SetNillableGroup sets the "group" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableGroup(s *string) *PlanUpdate {
	if s != nil {
		pu.SetGroup(*s)
	}
	return pu
}

// SetCronSpec sets the "cron_spec" field.
func (pu *PlanUpdate) SetCronSpec(s string) *PlanUpdate {
	pu.mutation.SetCronSpec(s)
	return pu
}

// SetNillableCronSpec sets the "cron_spec" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableCronSpec(s *string) *PlanUpdate {
	if s != nil {
		pu.SetCronSpec(*s)
	}
	return pu
}

// SetStatus sets the "status" field.
func (pu *PlanUpdate) SetStatus(i int) *PlanUpdate {
	pu.mutation.ResetStatus()
	pu.mutation.SetStatus(i)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableStatus(i *int) *PlanUpdate {
	if i != nil {
		pu.SetStatus(*i)
	}
	return pu
}

// AddStatus adds i to the "status" field.
func (pu *PlanUpdate) AddStatus(i int) *PlanUpdate {
	pu.mutation.AddStatus(i)
	return pu
}

// SetPlanType sets the "plan_type" field.
func (pu *PlanUpdate) SetPlanType(s string) *PlanUpdate {
	pu.mutation.SetPlanType(s)
	return pu
}

// SetNillablePlanType sets the "plan_type" field if the given value is not nil.
func (pu *PlanUpdate) SetNillablePlanType(s *string) *PlanUpdate {
	if s != nil {
		pu.SetPlanType(*s)
	}
	return pu
}

// SetPriority sets the "priority" field.
func (pu *PlanUpdate) SetPriority(i int) *PlanUpdate {
	pu.mutation.ResetPriority()
	pu.mutation.SetPriority(i)
	return pu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (pu *PlanUpdate) SetNillablePriority(i *int) *PlanUpdate {
	if i != nil {
		pu.SetPriority(*i)
	}
	return pu
}

// AddPriority adds i to the "priority" field.
func (pu *PlanUpdate) AddPriority(i int) *PlanUpdate {
	pu.mutation.AddPriority(i)
	return pu
}

// SetTimeout sets the "timeout" field.
func (pu *PlanUpdate) SetTimeout(i int) *PlanUpdate {
	pu.mutation.ResetTimeout()
	pu.mutation.SetTimeout(i)
	return pu
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableTimeout(i *int) *PlanUpdate {
	if i != nil {
		pu.SetTimeout(*i)
	}
	return pu
}

// AddTimeout adds i to the "timeout" field.
func (pu *PlanUpdate) AddTimeout(i int) *PlanUpdate {
	pu.mutation.AddTimeout(i)
	return pu
}

// SetRetryTimes sets the "retry_times" field.
func (pu *PlanUpdate) SetRetryTimes(i int) *PlanUpdate {
	pu.mutation.ResetRetryTimes()
	pu.mutation.SetRetryTimes(i)
	return pu
}

// SetNillableRetryTimes sets the "retry_times" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableRetryTimes(i *int) *PlanUpdate {
	if i != nil {
		pu.SetRetryTimes(*i)
	}
	return pu
}

// AddRetryTimes adds i to the "retry_times" field.
func (pu *PlanUpdate) AddRetryTimes(i int) *PlanUpdate {
	pu.mutation.AddRetryTimes(i)
	return pu
}

// SetRetryInterval sets the "retry_interval" field.
func (pu *PlanUpdate) SetRetryInterval(i int) *PlanUpdate {
	pu.mutation.ResetRetryInterval()
	pu.mutation.SetRetryInterval(i)
	return pu
}

// SetNillableRetryInterval sets the "retry_interval" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableRetryInterval(i *int) *PlanUpdate {
	if i != nil {
		pu.SetRetryInterval(*i)
	}
	return pu
}

// AddRetryInterval adds i to the "retry_interval" field.
func (pu *PlanUpdate) AddRetryInterval(i int) *PlanUpdate {
	pu.mutation.AddRetryInterval(i)
	return pu
}

// SetStartTime sets the "start_time" field.
func (pu *PlanUpdate) SetStartTime(i int64) *PlanUpdate {
	pu.mutation.ResetStartTime()
	pu.mutation.SetStartTime(i)
	return pu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableStartTime(i *int64) *PlanUpdate {
	if i != nil {
		pu.SetStartTime(*i)
	}
	return pu
}

// AddStartTime adds i to the "start_time" field.
func (pu *PlanUpdate) AddStartTime(i int64) *PlanUpdate {
	pu.mutation.AddStartTime(i)
	return pu
}

// ClearStartTime clears the value of the "start_time" field.
func (pu *PlanUpdate) ClearStartTime() *PlanUpdate {
	pu.mutation.ClearStartTime()
	return pu
}

// SetEndTime sets the "end_time" field.
func (pu *PlanUpdate) SetEndTime(i int64) *PlanUpdate {
	pu.mutation.ResetEndTime()
	pu.mutation.SetEndTime(i)
	return pu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableEndTime(i *int64) *PlanUpdate {
	if i != nil {
		pu.SetEndTime(*i)
	}
	return pu
}

// AddEndTime adds i to the "end_time" field.
func (pu *PlanUpdate) AddEndTime(i int64) *PlanUpdate {
	pu.mutation.AddEndTime(i)
	return pu
}

// ClearEndTime clears the value of the "end_time" field.
func (pu *PlanUpdate) ClearEndTime() *PlanUpdate {
	pu.mutation.ClearEndTime()
	return pu
}

// SetCommand sets the "command" field.
func (pu *PlanUpdate) SetCommand(s string) *PlanUpdate {
	pu.mutation.SetCommand(s)
	return pu
}

// SetNillableCommand sets the "command" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableCommand(s *string) *PlanUpdate {
	if s != nil {
		pu.SetCommand(*s)
	}
	return pu
}

// SetParams sets the "params" field.
func (pu *PlanUpdate) SetParams(s string) *PlanUpdate {
	pu.mutation.SetParams(s)
	return pu
}

// SetNillableParams sets the "params" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableParams(s *string) *PlanUpdate {
	if s != nil {
		pu.SetParams(*s)
	}
	return pu
}

// ClearParams clears the value of the "params" field.
func (pu *PlanUpdate) ClearParams() *PlanUpdate {
	pu.mutation.ClearParams()
	return pu
}

// Mutation returns the PlanMutation object of the builder.
func (pu *PlanUpdate) Mutation() *PlanMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlanUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlanUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlanUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlanUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PlanUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PlanUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PlanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(plan.Table, plan.Columns, sqlgraph.NewFieldSpec(plan.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(plan.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(plan.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(plan.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(plan.FieldDeletedAt, field.TypeInt64, value)
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.ClearField(plan.FieldDeletedAt, field.TypeInt64)
	}
	if value, ok := pu.mutation.TenantCode(); ok {
		_spec.SetField(plan.FieldTenantCode, field.TypeString, value)
	}
	if value, ok := pu.mutation.PlanID(); ok {
		_spec.SetField(plan.FieldPlanID, field.TypeString, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(plan.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(plan.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(plan.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.Group(); ok {
		_spec.SetField(plan.FieldGroup, field.TypeString, value)
	}
	if value, ok := pu.mutation.CronSpec(); ok {
		_spec.SetField(plan.FieldCronSpec, field.TypeString, value)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(plan.FieldStatus, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedStatus(); ok {
		_spec.AddField(plan.FieldStatus, field.TypeInt, value)
	}
	if value, ok := pu.mutation.PlanType(); ok {
		_spec.SetField(plan.FieldPlanType, field.TypeString, value)
	}
	if value, ok := pu.mutation.Priority(); ok {
		_spec.SetField(plan.FieldPriority, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedPriority(); ok {
		_spec.AddField(plan.FieldPriority, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Timeout(); ok {
		_spec.SetField(plan.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedTimeout(); ok {
		_spec.AddField(plan.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := pu.mutation.RetryTimes(); ok {
		_spec.SetField(plan.FieldRetryTimes, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedRetryTimes(); ok {
		_spec.AddField(plan.FieldRetryTimes, field.TypeInt, value)
	}
	if value, ok := pu.mutation.RetryInterval(); ok {
		_spec.SetField(plan.FieldRetryInterval, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedRetryInterval(); ok {
		_spec.AddField(plan.FieldRetryInterval, field.TypeInt, value)
	}
	if value, ok := pu.mutation.StartTime(); ok {
		_spec.SetField(plan.FieldStartTime, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedStartTime(); ok {
		_spec.AddField(plan.FieldStartTime, field.TypeInt64, value)
	}
	if pu.mutation.StartTimeCleared() {
		_spec.ClearField(plan.FieldStartTime, field.TypeInt64)
	}
	if value, ok := pu.mutation.EndTime(); ok {
		_spec.SetField(plan.FieldEndTime, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedEndTime(); ok {
		_spec.AddField(plan.FieldEndTime, field.TypeInt64, value)
	}
	if pu.mutation.EndTimeCleared() {
		_spec.ClearField(plan.FieldEndTime, field.TypeInt64)
	}
	if value, ok := pu.mutation.Command(); ok {
		_spec.SetField(plan.FieldCommand, field.TypeString, value)
	}
	if value, ok := pu.mutation.Params(); ok {
		_spec.SetField(plan.FieldParams, field.TypeString, value)
	}
	if pu.mutation.ParamsCleared() {
		_spec.ClearField(plan.FieldParams, field.TypeString)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PlanUpdateOne is the builder for updating a single Plan entity.
type PlanUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PlanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PlanUpdateOne) SetUpdatedAt(i int64) *PlanUpdateOne {
	puo.mutation.ResetUpdatedAt()
	puo.mutation.SetUpdatedAt(i)
	return puo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableUpdatedAt(i *int64) *PlanUpdateOne {
	if i != nil {
		puo.SetUpdatedAt(*i)
	}
	return puo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (puo *PlanUpdateOne) AddUpdatedAt(i int64) *PlanUpdateOne {
	puo.mutation.AddUpdatedAt(i)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PlanUpdateOne) SetDeletedAt(i int64) *PlanUpdateOne {
	puo.mutation.ResetDeletedAt()
	puo.mutation.SetDeletedAt(i)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableDeletedAt(i *int64) *PlanUpdateOne {
	if i != nil {
		puo.SetDeletedAt(*i)
	}
	return puo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (puo *PlanUpdateOne) AddDeletedAt(i int64) *PlanUpdateOne {
	puo.mutation.AddDeletedAt(i)
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *PlanUpdateOne) ClearDeletedAt() *PlanUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetTenantCode sets the "tenant_code" field.
func (puo *PlanUpdateOne) SetTenantCode(s string) *PlanUpdateOne {
	puo.mutation.SetTenantCode(s)
	return puo
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableTenantCode(s *string) *PlanUpdateOne {
	if s != nil {
		puo.SetTenantCode(*s)
	}
	return puo
}

// SetPlanID sets the "plan_id" field.
func (puo *PlanUpdateOne) SetPlanID(s string) *PlanUpdateOne {
	puo.mutation.SetPlanID(s)
	return puo
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillablePlanID(s *string) *PlanUpdateOne {
	if s != nil {
		puo.SetPlanID(*s)
	}
	return puo
}

// SetName sets the "name" field.
func (puo *PlanUpdateOne) SetName(s string) *PlanUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableName(s *string) *PlanUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetDescription sets the "description" field.
func (puo *PlanUpdateOne) SetDescription(s string) *PlanUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableDescription(s *string) *PlanUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *PlanUpdateOne) ClearDescription() *PlanUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetGroup sets the "group" field.
func (puo *PlanUpdateOne) SetGroup(s string) *PlanUpdateOne {
	puo.mutation.SetGroup(s)
	return puo
}

// SetNillableGroup sets the "group" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableGroup(s *string) *PlanUpdateOne {
	if s != nil {
		puo.SetGroup(*s)
	}
	return puo
}

// SetCronSpec sets the "cron_spec" field.
func (puo *PlanUpdateOne) SetCronSpec(s string) *PlanUpdateOne {
	puo.mutation.SetCronSpec(s)
	return puo
}

// SetNillableCronSpec sets the "cron_spec" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableCronSpec(s *string) *PlanUpdateOne {
	if s != nil {
		puo.SetCronSpec(*s)
	}
	return puo
}

// SetStatus sets the "status" field.
func (puo *PlanUpdateOne) SetStatus(i int) *PlanUpdateOne {
	puo.mutation.ResetStatus()
	puo.mutation.SetStatus(i)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableStatus(i *int) *PlanUpdateOne {
	if i != nil {
		puo.SetStatus(*i)
	}
	return puo
}

// AddStatus adds i to the "status" field.
func (puo *PlanUpdateOne) AddStatus(i int) *PlanUpdateOne {
	puo.mutation.AddStatus(i)
	return puo
}

// SetPlanType sets the "plan_type" field.
func (puo *PlanUpdateOne) SetPlanType(s string) *PlanUpdateOne {
	puo.mutation.SetPlanType(s)
	return puo
}

// SetNillablePlanType sets the "plan_type" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillablePlanType(s *string) *PlanUpdateOne {
	if s != nil {
		puo.SetPlanType(*s)
	}
	return puo
}

// SetPriority sets the "priority" field.
func (puo *PlanUpdateOne) SetPriority(i int) *PlanUpdateOne {
	puo.mutation.ResetPriority()
	puo.mutation.SetPriority(i)
	return puo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillablePriority(i *int) *PlanUpdateOne {
	if i != nil {
		puo.SetPriority(*i)
	}
	return puo
}

// AddPriority adds i to the "priority" field.
func (puo *PlanUpdateOne) AddPriority(i int) *PlanUpdateOne {
	puo.mutation.AddPriority(i)
	return puo
}

// SetTimeout sets the "timeout" field.
func (puo *PlanUpdateOne) SetTimeout(i int) *PlanUpdateOne {
	puo.mutation.ResetTimeout()
	puo.mutation.SetTimeout(i)
	return puo
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableTimeout(i *int) *PlanUpdateOne {
	if i != nil {
		puo.SetTimeout(*i)
	}
	return puo
}

// AddTimeout adds i to the "timeout" field.
func (puo *PlanUpdateOne) AddTimeout(i int) *PlanUpdateOne {
	puo.mutation.AddTimeout(i)
	return puo
}

// SetRetryTimes sets the "retry_times" field.
func (puo *PlanUpdateOne) SetRetryTimes(i int) *PlanUpdateOne {
	puo.mutation.ResetRetryTimes()
	puo.mutation.SetRetryTimes(i)
	return puo
}

// SetNillableRetryTimes sets the "retry_times" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableRetryTimes(i *int) *PlanUpdateOne {
	if i != nil {
		puo.SetRetryTimes(*i)
	}
	return puo
}

// AddRetryTimes adds i to the "retry_times" field.
func (puo *PlanUpdateOne) AddRetryTimes(i int) *PlanUpdateOne {
	puo.mutation.AddRetryTimes(i)
	return puo
}

// SetRetryInterval sets the "retry_interval" field.
func (puo *PlanUpdateOne) SetRetryInterval(i int) *PlanUpdateOne {
	puo.mutation.ResetRetryInterval()
	puo.mutation.SetRetryInterval(i)
	return puo
}

// SetNillableRetryInterval sets the "retry_interval" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableRetryInterval(i *int) *PlanUpdateOne {
	if i != nil {
		puo.SetRetryInterval(*i)
	}
	return puo
}

// AddRetryInterval adds i to the "retry_interval" field.
func (puo *PlanUpdateOne) AddRetryInterval(i int) *PlanUpdateOne {
	puo.mutation.AddRetryInterval(i)
	return puo
}

// SetStartTime sets the "start_time" field.
func (puo *PlanUpdateOne) SetStartTime(i int64) *PlanUpdateOne {
	puo.mutation.ResetStartTime()
	puo.mutation.SetStartTime(i)
	return puo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableStartTime(i *int64) *PlanUpdateOne {
	if i != nil {
		puo.SetStartTime(*i)
	}
	return puo
}

// AddStartTime adds i to the "start_time" field.
func (puo *PlanUpdateOne) AddStartTime(i int64) *PlanUpdateOne {
	puo.mutation.AddStartTime(i)
	return puo
}

// ClearStartTime clears the value of the "start_time" field.
func (puo *PlanUpdateOne) ClearStartTime() *PlanUpdateOne {
	puo.mutation.ClearStartTime()
	return puo
}

// SetEndTime sets the "end_time" field.
func (puo *PlanUpdateOne) SetEndTime(i int64) *PlanUpdateOne {
	puo.mutation.ResetEndTime()
	puo.mutation.SetEndTime(i)
	return puo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableEndTime(i *int64) *PlanUpdateOne {
	if i != nil {
		puo.SetEndTime(*i)
	}
	return puo
}

// AddEndTime adds i to the "end_time" field.
func (puo *PlanUpdateOne) AddEndTime(i int64) *PlanUpdateOne {
	puo.mutation.AddEndTime(i)
	return puo
}

// ClearEndTime clears the value of the "end_time" field.
func (puo *PlanUpdateOne) ClearEndTime() *PlanUpdateOne {
	puo.mutation.ClearEndTime()
	return puo
}

// SetCommand sets the "command" field.
func (puo *PlanUpdateOne) SetCommand(s string) *PlanUpdateOne {
	puo.mutation.SetCommand(s)
	return puo
}

// SetNillableCommand sets the "command" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableCommand(s *string) *PlanUpdateOne {
	if s != nil {
		puo.SetCommand(*s)
	}
	return puo
}

// SetParams sets the "params" field.
func (puo *PlanUpdateOne) SetParams(s string) *PlanUpdateOne {
	puo.mutation.SetParams(s)
	return puo
}

// SetNillableParams sets the "params" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableParams(s *string) *PlanUpdateOne {
	if s != nil {
		puo.SetParams(*s)
	}
	return puo
}

// ClearParams clears the value of the "params" field.
func (puo *PlanUpdateOne) ClearParams() *PlanUpdateOne {
	puo.mutation.ClearParams()
	return puo
}

// Mutation returns the PlanMutation object of the builder.
func (puo *PlanUpdateOne) Mutation() *PlanMutation {
	return puo.mutation
}

// Where appends a list predicates to the PlanUpdate builder.
func (puo *PlanUpdateOne) Where(ps ...predicate.Plan) *PlanUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlanUpdateOne) Select(field string, fields ...string) *PlanUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Plan entity.
func (puo *PlanUpdateOne) Save(ctx context.Context) (*Plan, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlanUpdateOne) SaveX(ctx context.Context) *Plan {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlanUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlanUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PlanUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PlanUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PlanUpdateOne) sqlSave(ctx context.Context) (_node *Plan, err error) {
	_spec := sqlgraph.NewUpdateSpec(plan.Table, plan.Columns, sqlgraph.NewFieldSpec(plan.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Plan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, plan.FieldID)
		for _, f := range fields {
			if !plan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != plan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(plan.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(plan.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(plan.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(plan.FieldDeletedAt, field.TypeInt64, value)
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.ClearField(plan.FieldDeletedAt, field.TypeInt64)
	}
	if value, ok := puo.mutation.TenantCode(); ok {
		_spec.SetField(plan.FieldTenantCode, field.TypeString, value)
	}
	if value, ok := puo.mutation.PlanID(); ok {
		_spec.SetField(plan.FieldPlanID, field.TypeString, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(plan.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(plan.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(plan.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.Group(); ok {
		_spec.SetField(plan.FieldGroup, field.TypeString, value)
	}
	if value, ok := puo.mutation.CronSpec(); ok {
		_spec.SetField(plan.FieldCronSpec, field.TypeString, value)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(plan.FieldStatus, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedStatus(); ok {
		_spec.AddField(plan.FieldStatus, field.TypeInt, value)
	}
	if value, ok := puo.mutation.PlanType(); ok {
		_spec.SetField(plan.FieldPlanType, field.TypeString, value)
	}
	if value, ok := puo.mutation.Priority(); ok {
		_spec.SetField(plan.FieldPriority, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedPriority(); ok {
		_spec.AddField(plan.FieldPriority, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Timeout(); ok {
		_spec.SetField(plan.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedTimeout(); ok {
		_spec.AddField(plan.FieldTimeout, field.TypeInt, value)
	}
	if value, ok := puo.mutation.RetryTimes(); ok {
		_spec.SetField(plan.FieldRetryTimes, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedRetryTimes(); ok {
		_spec.AddField(plan.FieldRetryTimes, field.TypeInt, value)
	}
	if value, ok := puo.mutation.RetryInterval(); ok {
		_spec.SetField(plan.FieldRetryInterval, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedRetryInterval(); ok {
		_spec.AddField(plan.FieldRetryInterval, field.TypeInt, value)
	}
	if value, ok := puo.mutation.StartTime(); ok {
		_spec.SetField(plan.FieldStartTime, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedStartTime(); ok {
		_spec.AddField(plan.FieldStartTime, field.TypeInt64, value)
	}
	if puo.mutation.StartTimeCleared() {
		_spec.ClearField(plan.FieldStartTime, field.TypeInt64)
	}
	if value, ok := puo.mutation.EndTime(); ok {
		_spec.SetField(plan.FieldEndTime, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedEndTime(); ok {
		_spec.AddField(plan.FieldEndTime, field.TypeInt64, value)
	}
	if puo.mutation.EndTimeCleared() {
		_spec.ClearField(plan.FieldEndTime, field.TypeInt64)
	}
	if value, ok := puo.mutation.Command(); ok {
		_spec.SetField(plan.FieldCommand, field.TypeString, value)
	}
	if value, ok := puo.mutation.Params(); ok {
		_spec.SetField(plan.FieldParams, field.TypeString, value)
	}
	if puo.mutation.ParamsCleared() {
		_spec.ClearField(plan.FieldParams, field.TypeString)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Plan{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
