// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/dictitem"
	"admin_backend/pkg/ent/generated/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DictItemUpdate is the builder for updating DictItem entities.
type DictItemUpdate struct {
	config
	hooks     []Hook
	mutation  *DictItemMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DictItemUpdate builder.
func (diu *DictItemUpdate) Where(ps ...predicate.DictItem) *DictItemUpdate {
	diu.mutation.Where(ps...)
	return diu
}

// SetUpdatedAt sets the "updated_at" field.
func (diu *DictItemUpdate) SetUpdatedAt(i int64) *DictItemUpdate {
	diu.mutation.ResetUpdatedAt()
	diu.mutation.SetUpdatedAt(i)
	return diu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (diu *DictItemUpdate) SetNillableUpdatedAt(i *int64) *DictItemUpdate {
	if i != nil {
		diu.SetUpdatedAt(*i)
	}
	return diu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (diu *DictItemUpdate) AddUpdatedAt(i int64) *DictItemUpdate {
	diu.mutation.AddUpdatedAt(i)
	return diu
}

// SetDeletedAt sets the "deleted_at" field.
func (diu *DictItemUpdate) SetDeletedAt(i int64) *DictItemUpdate {
	diu.mutation.ResetDeletedAt()
	diu.mutation.SetDeletedAt(i)
	return diu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (diu *DictItemUpdate) SetNillableDeletedAt(i *int64) *DictItemUpdate {
	if i != nil {
		diu.SetDeletedAt(*i)
	}
	return diu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (diu *DictItemUpdate) AddDeletedAt(i int64) *DictItemUpdate {
	diu.mutation.AddDeletedAt(i)
	return diu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (diu *DictItemUpdate) ClearDeletedAt() *DictItemUpdate {
	diu.mutation.ClearDeletedAt()
	return diu
}

// SetTenantCode sets the "tenant_code" field.
func (diu *DictItemUpdate) SetTenantCode(s string) *DictItemUpdate {
	diu.mutation.SetTenantCode(s)
	return diu
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (diu *DictItemUpdate) SetNillableTenantCode(s *string) *DictItemUpdate {
	if s != nil {
		diu.SetTenantCode(*s)
	}
	return diu
}

// SetItemID sets the "item_id" field.
func (diu *DictItemUpdate) SetItemID(s string) *DictItemUpdate {
	diu.mutation.SetItemID(s)
	return diu
}

// SetNillableItemID sets the "item_id" field if the given value is not nil.
func (diu *DictItemUpdate) SetNillableItemID(s *string) *DictItemUpdate {
	if s != nil {
		diu.SetItemID(*s)
	}
	return diu
}

// SetTypeCode sets the "type_code" field.
func (diu *DictItemUpdate) SetTypeCode(s string) *DictItemUpdate {
	diu.mutation.SetTypeCode(s)
	return diu
}

// SetNillableTypeCode sets the "type_code" field if the given value is not nil.
func (diu *DictItemUpdate) SetNillableTypeCode(s *string) *DictItemUpdate {
	if s != nil {
		diu.SetTypeCode(*s)
	}
	return diu
}

// SetLabel sets the "label" field.
func (diu *DictItemUpdate) SetLabel(s string) *DictItemUpdate {
	diu.mutation.SetLabel(s)
	return diu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (diu *DictItemUpdate) SetNillableLabel(s *string) *DictItemUpdate {
	if s != nil {
		diu.SetLabel(*s)
	}
	return diu
}

// SetValue sets the "value" field.
func (diu *DictItemUpdate) SetValue(s string) *DictItemUpdate {
	diu.mutation.SetValue(s)
	return diu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (diu *DictItemUpdate) SetNillableValue(s *string) *DictItemUpdate {
	if s != nil {
		diu.SetValue(*s)
	}
	return diu
}

// SetDescription sets the "description" field.
func (diu *DictItemUpdate) SetDescription(s string) *DictItemUpdate {
	diu.mutation.SetDescription(s)
	return diu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (diu *DictItemUpdate) SetNillableDescription(s *string) *DictItemUpdate {
	if s != nil {
		diu.SetDescription(*s)
	}
	return diu
}

// ClearDescription clears the value of the "description" field.
func (diu *DictItemUpdate) ClearDescription() *DictItemUpdate {
	diu.mutation.ClearDescription()
	return diu
}

// SetSort sets the "sort" field.
func (diu *DictItemUpdate) SetSort(i int) *DictItemUpdate {
	diu.mutation.ResetSort()
	diu.mutation.SetSort(i)
	return diu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (diu *DictItemUpdate) SetNillableSort(i *int) *DictItemUpdate {
	if i != nil {
		diu.SetSort(*i)
	}
	return diu
}

// AddSort adds i to the "sort" field.
func (diu *DictItemUpdate) AddSort(i int) *DictItemUpdate {
	diu.mutation.AddSort(i)
	return diu
}

// SetStatus sets the "status" field.
func (diu *DictItemUpdate) SetStatus(i int) *DictItemUpdate {
	diu.mutation.ResetStatus()
	diu.mutation.SetStatus(i)
	return diu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (diu *DictItemUpdate) SetNillableStatus(i *int) *DictItemUpdate {
	if i != nil {
		diu.SetStatus(*i)
	}
	return diu
}

// AddStatus adds i to the "status" field.
func (diu *DictItemUpdate) AddStatus(i int) *DictItemUpdate {
	diu.mutation.AddStatus(i)
	return diu
}

// Mutation returns the DictItemMutation object of the builder.
func (diu *DictItemUpdate) Mutation() *DictItemMutation {
	return diu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (diu *DictItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, diu.sqlSave, diu.mutation, diu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (diu *DictItemUpdate) SaveX(ctx context.Context) int {
	affected, err := diu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (diu *DictItemUpdate) Exec(ctx context.Context) error {
	_, err := diu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (diu *DictItemUpdate) ExecX(ctx context.Context) {
	if err := diu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (diu *DictItemUpdate) check() error {
	if v, ok := diu.mutation.TenantCode(); ok {
		if err := dictitem.TenantCodeValidator(v); err != nil {
			return &ValidationError{Name: "tenant_code", err: fmt.Errorf(`generated: validator failed for field "DictItem.tenant_code": %w`, err)}
		}
	}
	if v, ok := diu.mutation.TypeCode(); ok {
		if err := dictitem.TypeCodeValidator(v); err != nil {
			return &ValidationError{Name: "type_code", err: fmt.Errorf(`generated: validator failed for field "DictItem.type_code": %w`, err)}
		}
	}
	if v, ok := diu.mutation.Label(); ok {
		if err := dictitem.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf(`generated: validator failed for field "DictItem.label": %w`, err)}
		}
	}
	if v, ok := diu.mutation.Value(); ok {
		if err := dictitem.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`generated: validator failed for field "DictItem.value": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (diu *DictItemUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DictItemUpdate {
	diu.modifiers = append(diu.modifiers, modifiers...)
	return diu
}

func (diu *DictItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := diu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(dictitem.Table, dictitem.Columns, sqlgraph.NewFieldSpec(dictitem.FieldID, field.TypeInt))
	if ps := diu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := diu.mutation.UpdatedAt(); ok {
		_spec.SetField(dictitem.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := diu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(dictitem.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := diu.mutation.DeletedAt(); ok {
		_spec.SetField(dictitem.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := diu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(dictitem.FieldDeletedAt, field.TypeInt64, value)
	}
	if diu.mutation.DeletedAtCleared() {
		_spec.ClearField(dictitem.FieldDeletedAt, field.TypeInt64)
	}
	if value, ok := diu.mutation.TenantCode(); ok {
		_spec.SetField(dictitem.FieldTenantCode, field.TypeString, value)
	}
	if value, ok := diu.mutation.ItemID(); ok {
		_spec.SetField(dictitem.FieldItemID, field.TypeString, value)
	}
	if value, ok := diu.mutation.TypeCode(); ok {
		_spec.SetField(dictitem.FieldTypeCode, field.TypeString, value)
	}
	if value, ok := diu.mutation.Label(); ok {
		_spec.SetField(dictitem.FieldLabel, field.TypeString, value)
	}
	if value, ok := diu.mutation.Value(); ok {
		_spec.SetField(dictitem.FieldValue, field.TypeString, value)
	}
	if value, ok := diu.mutation.Description(); ok {
		_spec.SetField(dictitem.FieldDescription, field.TypeString, value)
	}
	if diu.mutation.DescriptionCleared() {
		_spec.ClearField(dictitem.FieldDescription, field.TypeString)
	}
	if value, ok := diu.mutation.Sort(); ok {
		_spec.SetField(dictitem.FieldSort, field.TypeInt, value)
	}
	if value, ok := diu.mutation.AddedSort(); ok {
		_spec.AddField(dictitem.FieldSort, field.TypeInt, value)
	}
	if value, ok := diu.mutation.Status(); ok {
		_spec.SetField(dictitem.FieldStatus, field.TypeInt, value)
	}
	if value, ok := diu.mutation.AddedStatus(); ok {
		_spec.AddField(dictitem.FieldStatus, field.TypeInt, value)
	}
	_spec.AddModifiers(diu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, diu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	diu.mutation.done = true
	return n, nil
}

// DictItemUpdateOne is the builder for updating a single DictItem entity.
type DictItemUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DictItemMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (diuo *DictItemUpdateOne) SetUpdatedAt(i int64) *DictItemUpdateOne {
	diuo.mutation.ResetUpdatedAt()
	diuo.mutation.SetUpdatedAt(i)
	return diuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (diuo *DictItemUpdateOne) SetNillableUpdatedAt(i *int64) *DictItemUpdateOne {
	if i != nil {
		diuo.SetUpdatedAt(*i)
	}
	return diuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (diuo *DictItemUpdateOne) AddUpdatedAt(i int64) *DictItemUpdateOne {
	diuo.mutation.AddUpdatedAt(i)
	return diuo
}

// SetDeletedAt sets the "deleted_at" field.
func (diuo *DictItemUpdateOne) SetDeletedAt(i int64) *DictItemUpdateOne {
	diuo.mutation.ResetDeletedAt()
	diuo.mutation.SetDeletedAt(i)
	return diuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (diuo *DictItemUpdateOne) SetNillableDeletedAt(i *int64) *DictItemUpdateOne {
	if i != nil {
		diuo.SetDeletedAt(*i)
	}
	return diuo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (diuo *DictItemUpdateOne) AddDeletedAt(i int64) *DictItemUpdateOne {
	diuo.mutation.AddDeletedAt(i)
	return diuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (diuo *DictItemUpdateOne) ClearDeletedAt() *DictItemUpdateOne {
	diuo.mutation.ClearDeletedAt()
	return diuo
}

// SetTenantCode sets the "tenant_code" field.
func (diuo *DictItemUpdateOne) SetTenantCode(s string) *DictItemUpdateOne {
	diuo.mutation.SetTenantCode(s)
	return diuo
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (diuo *DictItemUpdateOne) SetNillableTenantCode(s *string) *DictItemUpdateOne {
	if s != nil {
		diuo.SetTenantCode(*s)
	}
	return diuo
}

// SetItemID sets the "item_id" field.
func (diuo *DictItemUpdateOne) SetItemID(s string) *DictItemUpdateOne {
	diuo.mutation.SetItemID(s)
	return diuo
}

// SetNillableItemID sets the "item_id" field if the given value is not nil.
func (diuo *DictItemUpdateOne) SetNillableItemID(s *string) *DictItemUpdateOne {
	if s != nil {
		diuo.SetItemID(*s)
	}
	return diuo
}

// SetTypeCode sets the "type_code" field.
func (diuo *DictItemUpdateOne) SetTypeCode(s string) *DictItemUpdateOne {
	diuo.mutation.SetTypeCode(s)
	return diuo
}

// SetNillableTypeCode sets the "type_code" field if the given value is not nil.
func (diuo *DictItemUpdateOne) SetNillableTypeCode(s *string) *DictItemUpdateOne {
	if s != nil {
		diuo.SetTypeCode(*s)
	}
	return diuo
}

// SetLabel sets the "label" field.
func (diuo *DictItemUpdateOne) SetLabel(s string) *DictItemUpdateOne {
	diuo.mutation.SetLabel(s)
	return diuo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (diuo *DictItemUpdateOne) SetNillableLabel(s *string) *DictItemUpdateOne {
	if s != nil {
		diuo.SetLabel(*s)
	}
	return diuo
}

// SetValue sets the "value" field.
func (diuo *DictItemUpdateOne) SetValue(s string) *DictItemUpdateOne {
	diuo.mutation.SetValue(s)
	return diuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (diuo *DictItemUpdateOne) SetNillableValue(s *string) *DictItemUpdateOne {
	if s != nil {
		diuo.SetValue(*s)
	}
	return diuo
}

// SetDescription sets the "description" field.
func (diuo *DictItemUpdateOne) SetDescription(s string) *DictItemUpdateOne {
	diuo.mutation.SetDescription(s)
	return diuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (diuo *DictItemUpdateOne) SetNillableDescription(s *string) *DictItemUpdateOne {
	if s != nil {
		diuo.SetDescription(*s)
	}
	return diuo
}

// ClearDescription clears the value of the "description" field.
func (diuo *DictItemUpdateOne) ClearDescription() *DictItemUpdateOne {
	diuo.mutation.ClearDescription()
	return diuo
}

// SetSort sets the "sort" field.
func (diuo *DictItemUpdateOne) SetSort(i int) *DictItemUpdateOne {
	diuo.mutation.ResetSort()
	diuo.mutation.SetSort(i)
	return diuo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (diuo *DictItemUpdateOne) SetNillableSort(i *int) *DictItemUpdateOne {
	if i != nil {
		diuo.SetSort(*i)
	}
	return diuo
}

// AddSort adds i to the "sort" field.
func (diuo *DictItemUpdateOne) AddSort(i int) *DictItemUpdateOne {
	diuo.mutation.AddSort(i)
	return diuo
}

// SetStatus sets the "status" field.
func (diuo *DictItemUpdateOne) SetStatus(i int) *DictItemUpdateOne {
	diuo.mutation.ResetStatus()
	diuo.mutation.SetStatus(i)
	return diuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (diuo *DictItemUpdateOne) SetNillableStatus(i *int) *DictItemUpdateOne {
	if i != nil {
		diuo.SetStatus(*i)
	}
	return diuo
}

// AddStatus adds i to the "status" field.
func (diuo *DictItemUpdateOne) AddStatus(i int) *DictItemUpdateOne {
	diuo.mutation.AddStatus(i)
	return diuo
}

// Mutation returns the DictItemMutation object of the builder.
func (diuo *DictItemUpdateOne) Mutation() *DictItemMutation {
	return diuo.mutation
}

// Where appends a list predicates to the DictItemUpdate builder.
func (diuo *DictItemUpdateOne) Where(ps ...predicate.DictItem) *DictItemUpdateOne {
	diuo.mutation.Where(ps...)
	return diuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (diuo *DictItemUpdateOne) Select(field string, fields ...string) *DictItemUpdateOne {
	diuo.fields = append([]string{field}, fields...)
	return diuo
}

// Save executes the query and returns the updated DictItem entity.
func (diuo *DictItemUpdateOne) Save(ctx context.Context) (*DictItem, error) {
	return withHooks(ctx, diuo.sqlSave, diuo.mutation, diuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (diuo *DictItemUpdateOne) SaveX(ctx context.Context) *DictItem {
	node, err := diuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (diuo *DictItemUpdateOne) Exec(ctx context.Context) error {
	_, err := diuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (diuo *DictItemUpdateOne) ExecX(ctx context.Context) {
	if err := diuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (diuo *DictItemUpdateOne) check() error {
	if v, ok := diuo.mutation.TenantCode(); ok {
		if err := dictitem.TenantCodeValidator(v); err != nil {
			return &ValidationError{Name: "tenant_code", err: fmt.Errorf(`generated: validator failed for field "DictItem.tenant_code": %w`, err)}
		}
	}
	if v, ok := diuo.mutation.TypeCode(); ok {
		if err := dictitem.TypeCodeValidator(v); err != nil {
			return &ValidationError{Name: "type_code", err: fmt.Errorf(`generated: validator failed for field "DictItem.type_code": %w`, err)}
		}
	}
	if v, ok := diuo.mutation.Label(); ok {
		if err := dictitem.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf(`generated: validator failed for field "DictItem.label": %w`, err)}
		}
	}
	if v, ok := diuo.mutation.Value(); ok {
		if err := dictitem.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`generated: validator failed for field "DictItem.value": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (diuo *DictItemUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DictItemUpdateOne {
	diuo.modifiers = append(diuo.modifiers, modifiers...)
	return diuo
}

func (diuo *DictItemUpdateOne) sqlSave(ctx context.Context) (_node *DictItem, err error) {
	if err := diuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dictitem.Table, dictitem.Columns, sqlgraph.NewFieldSpec(dictitem.FieldID, field.TypeInt))
	id, ok := diuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "DictItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := diuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dictitem.FieldID)
		for _, f := range fields {
			if !dictitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != dictitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := diuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := diuo.mutation.UpdatedAt(); ok {
		_spec.SetField(dictitem.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := diuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(dictitem.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := diuo.mutation.DeletedAt(); ok {
		_spec.SetField(dictitem.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := diuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(dictitem.FieldDeletedAt, field.TypeInt64, value)
	}
	if diuo.mutation.DeletedAtCleared() {
		_spec.ClearField(dictitem.FieldDeletedAt, field.TypeInt64)
	}
	if value, ok := diuo.mutation.TenantCode(); ok {
		_spec.SetField(dictitem.FieldTenantCode, field.TypeString, value)
	}
	if value, ok := diuo.mutation.ItemID(); ok {
		_spec.SetField(dictitem.FieldItemID, field.TypeString, value)
	}
	if value, ok := diuo.mutation.TypeCode(); ok {
		_spec.SetField(dictitem.FieldTypeCode, field.TypeString, value)
	}
	if value, ok := diuo.mutation.Label(); ok {
		_spec.SetField(dictitem.FieldLabel, field.TypeString, value)
	}
	if value, ok := diuo.mutation.Value(); ok {
		_spec.SetField(dictitem.FieldValue, field.TypeString, value)
	}
	if value, ok := diuo.mutation.Description(); ok {
		_spec.SetField(dictitem.FieldDescription, field.TypeString, value)
	}
	if diuo.mutation.DescriptionCleared() {
		_spec.ClearField(dictitem.FieldDescription, field.TypeString)
	}
	if value, ok := diuo.mutation.Sort(); ok {
		_spec.SetField(dictitem.FieldSort, field.TypeInt, value)
	}
	if value, ok := diuo.mutation.AddedSort(); ok {
		_spec.AddField(dictitem.FieldSort, field.TypeInt, value)
	}
	if value, ok := diuo.mutation.Status(); ok {
		_spec.SetField(dictitem.FieldStatus, field.TypeInt, value)
	}
	if value, ok := diuo.mutation.AddedStatus(); ok {
		_spec.AddField(dictitem.FieldStatus, field.TypeInt, value)
	}
	_spec.AddModifiers(diuo.modifiers...)
	_node = &DictItem{config: diuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, diuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	diuo.mutation.done = true
	return _node, nil
}
