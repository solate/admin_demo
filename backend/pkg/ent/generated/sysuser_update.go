// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/predicate"
	"admin_backend/pkg/ent/generated/sysuser"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysUserUpdate is the builder for updating SysUser entities.
type SysUserUpdate struct {
	config
	hooks     []Hook
	mutation  *SysUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SysUserUpdate builder.
func (suu *SysUserUpdate) Where(ps ...predicate.SysUser) *SysUserUpdate {
	suu.mutation.Where(ps...)
	return suu
}

// SetUpdatedAt sets the "updated_at" field.
func (suu *SysUserUpdate) SetUpdatedAt(i int64) *SysUserUpdate {
	suu.mutation.ResetUpdatedAt()
	suu.mutation.SetUpdatedAt(i)
	return suu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableUpdatedAt(i *int64) *SysUserUpdate {
	if i != nil {
		suu.SetUpdatedAt(*i)
	}
	return suu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (suu *SysUserUpdate) AddUpdatedAt(i int64) *SysUserUpdate {
	suu.mutation.AddUpdatedAt(i)
	return suu
}

// SetDeletedAt sets the "deleted_at" field.
func (suu *SysUserUpdate) SetDeletedAt(i int64) *SysUserUpdate {
	suu.mutation.ResetDeletedAt()
	suu.mutation.SetDeletedAt(i)
	return suu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableDeletedAt(i *int64) *SysUserUpdate {
	if i != nil {
		suu.SetDeletedAt(*i)
	}
	return suu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (suu *SysUserUpdate) AddDeletedAt(i int64) *SysUserUpdate {
	suu.mutation.AddDeletedAt(i)
	return suu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suu *SysUserUpdate) ClearDeletedAt() *SysUserUpdate {
	suu.mutation.ClearDeletedAt()
	return suu
}

// SetTenantCode sets the "tenant_code" field.
func (suu *SysUserUpdate) SetTenantCode(s string) *SysUserUpdate {
	suu.mutation.SetTenantCode(s)
	return suu
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableTenantCode(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetTenantCode(*s)
	}
	return suu
}

// SetUserID sets the "user_id" field.
func (suu *SysUserUpdate) SetUserID(s string) *SysUserUpdate {
	suu.mutation.SetUserID(s)
	return suu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableUserID(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetUserID(*s)
	}
	return suu
}

// SetUserName sets the "user_name" field.
func (suu *SysUserUpdate) SetUserName(s string) *SysUserUpdate {
	suu.mutation.SetUserName(s)
	return suu
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableUserName(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetUserName(*s)
	}
	return suu
}

// SetPwdHashed sets the "pwd_hashed" field.
func (suu *SysUserUpdate) SetPwdHashed(s string) *SysUserUpdate {
	suu.mutation.SetPwdHashed(s)
	return suu
}

// SetNillablePwdHashed sets the "pwd_hashed" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillablePwdHashed(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetPwdHashed(*s)
	}
	return suu
}

// SetPwdSalt sets the "pwd_salt" field.
func (suu *SysUserUpdate) SetPwdSalt(s string) *SysUserUpdate {
	suu.mutation.SetPwdSalt(s)
	return suu
}

// SetNillablePwdSalt sets the "pwd_salt" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillablePwdSalt(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetPwdSalt(*s)
	}
	return suu
}

// SetToken sets the "token" field.
func (suu *SysUserUpdate) SetToken(s string) *SysUserUpdate {
	suu.mutation.SetToken(s)
	return suu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableToken(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetToken(*s)
	}
	return suu
}

// SetName sets the "name" field.
func (suu *SysUserUpdate) SetName(s string) *SysUserUpdate {
	suu.mutation.SetName(s)
	return suu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableName(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetName(*s)
	}
	return suu
}

// SetAvatar sets the "avatar" field.
func (suu *SysUserUpdate) SetAvatar(s string) *SysUserUpdate {
	suu.mutation.SetAvatar(s)
	return suu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableAvatar(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetAvatar(*s)
	}
	return suu
}

// SetPhone sets the "phone" field.
func (suu *SysUserUpdate) SetPhone(s string) *SysUserUpdate {
	suu.mutation.SetPhone(s)
	return suu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillablePhone(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetPhone(*s)
	}
	return suu
}

// SetEmail sets the "email" field.
func (suu *SysUserUpdate) SetEmail(s string) *SysUserUpdate {
	suu.mutation.SetEmail(s)
	return suu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableEmail(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetEmail(*s)
	}
	return suu
}

// SetSex sets the "sex" field.
func (suu *SysUserUpdate) SetSex(i int) *SysUserUpdate {
	suu.mutation.ResetSex()
	suu.mutation.SetSex(i)
	return suu
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableSex(i *int) *SysUserUpdate {
	if i != nil {
		suu.SetSex(*i)
	}
	return suu
}

// AddSex adds i to the "sex" field.
func (suu *SysUserUpdate) AddSex(i int) *SysUserUpdate {
	suu.mutation.AddSex(i)
	return suu
}

// SetStatus sets the "status" field.
func (suu *SysUserUpdate) SetStatus(i int) *SysUserUpdate {
	suu.mutation.ResetStatus()
	suu.mutation.SetStatus(i)
	return suu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableStatus(i *int) *SysUserUpdate {
	if i != nil {
		suu.SetStatus(*i)
	}
	return suu
}

// AddStatus adds i to the "status" field.
func (suu *SysUserUpdate) AddStatus(i int) *SysUserUpdate {
	suu.mutation.AddStatus(i)
	return suu
}

// Mutation returns the SysUserMutation object of the builder.
func (suu *SysUserUpdate) Mutation() *SysUserMutation {
	return suu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (suu *SysUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, suu.sqlSave, suu.mutation, suu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suu *SysUserUpdate) SaveX(ctx context.Context) int {
	affected, err := suu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (suu *SysUserUpdate) Exec(ctx context.Context) error {
	_, err := suu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suu *SysUserUpdate) ExecX(ctx context.Context) {
	if err := suu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suu *SysUserUpdate) check() error {
	if v, ok := suu.mutation.UserName(); ok {
		if err := sysuser.UserNameValidator(v); err != nil {
			return &ValidationError{Name: "user_name", err: fmt.Errorf(`generated: validator failed for field "SysUser.user_name": %w`, err)}
		}
	}
	if v, ok := suu.mutation.PwdHashed(); ok {
		if err := sysuser.PwdHashedValidator(v); err != nil {
			return &ValidationError{Name: "pwd_hashed", err: fmt.Errorf(`generated: validator failed for field "SysUser.pwd_hashed": %w`, err)}
		}
	}
	if v, ok := suu.mutation.PwdSalt(); ok {
		if err := sysuser.PwdSaltValidator(v); err != nil {
			return &ValidationError{Name: "pwd_salt", err: fmt.Errorf(`generated: validator failed for field "SysUser.pwd_salt": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suu *SysUserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SysUserUpdate {
	suu.modifiers = append(suu.modifiers, modifiers...)
	return suu
}

func (suu *SysUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := suu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sysuser.Table, sysuser.Columns, sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt))
	if ps := suu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suu.mutation.UpdatedAt(); ok {
		_spec.SetField(sysuser.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := suu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(sysuser.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := suu.mutation.DeletedAt(); ok {
		_spec.SetField(sysuser.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := suu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(sysuser.FieldDeletedAt, field.TypeInt64, value)
	}
	if suu.mutation.DeletedAtCleared() {
		_spec.ClearField(sysuser.FieldDeletedAt, field.TypeInt64)
	}
	if value, ok := suu.mutation.TenantCode(); ok {
		_spec.SetField(sysuser.FieldTenantCode, field.TypeString, value)
	}
	if value, ok := suu.mutation.UserID(); ok {
		_spec.SetField(sysuser.FieldUserID, field.TypeString, value)
	}
	if value, ok := suu.mutation.UserName(); ok {
		_spec.SetField(sysuser.FieldUserName, field.TypeString, value)
	}
	if value, ok := suu.mutation.PwdHashed(); ok {
		_spec.SetField(sysuser.FieldPwdHashed, field.TypeString, value)
	}
	if value, ok := suu.mutation.PwdSalt(); ok {
		_spec.SetField(sysuser.FieldPwdSalt, field.TypeString, value)
	}
	if value, ok := suu.mutation.Token(); ok {
		_spec.SetField(sysuser.FieldToken, field.TypeString, value)
	}
	if value, ok := suu.mutation.Name(); ok {
		_spec.SetField(sysuser.FieldName, field.TypeString, value)
	}
	if value, ok := suu.mutation.Avatar(); ok {
		_spec.SetField(sysuser.FieldAvatar, field.TypeString, value)
	}
	if value, ok := suu.mutation.Phone(); ok {
		_spec.SetField(sysuser.FieldPhone, field.TypeString, value)
	}
	if value, ok := suu.mutation.Email(); ok {
		_spec.SetField(sysuser.FieldEmail, field.TypeString, value)
	}
	if value, ok := suu.mutation.Sex(); ok {
		_spec.SetField(sysuser.FieldSex, field.TypeInt, value)
	}
	if value, ok := suu.mutation.AddedSex(); ok {
		_spec.AddField(sysuser.FieldSex, field.TypeInt, value)
	}
	if value, ok := suu.mutation.Status(); ok {
		_spec.SetField(sysuser.FieldStatus, field.TypeInt, value)
	}
	if value, ok := suu.mutation.AddedStatus(); ok {
		_spec.AddField(sysuser.FieldStatus, field.TypeInt, value)
	}
	_spec.AddModifiers(suu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, suu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	suu.mutation.done = true
	return n, nil
}

// SysUserUpdateOne is the builder for updating a single SysUser entity.
type SysUserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SysUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (suuo *SysUserUpdateOne) SetUpdatedAt(i int64) *SysUserUpdateOne {
	suuo.mutation.ResetUpdatedAt()
	suuo.mutation.SetUpdatedAt(i)
	return suuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableUpdatedAt(i *int64) *SysUserUpdateOne {
	if i != nil {
		suuo.SetUpdatedAt(*i)
	}
	return suuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (suuo *SysUserUpdateOne) AddUpdatedAt(i int64) *SysUserUpdateOne {
	suuo.mutation.AddUpdatedAt(i)
	return suuo
}

// SetDeletedAt sets the "deleted_at" field.
func (suuo *SysUserUpdateOne) SetDeletedAt(i int64) *SysUserUpdateOne {
	suuo.mutation.ResetDeletedAt()
	suuo.mutation.SetDeletedAt(i)
	return suuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableDeletedAt(i *int64) *SysUserUpdateOne {
	if i != nil {
		suuo.SetDeletedAt(*i)
	}
	return suuo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (suuo *SysUserUpdateOne) AddDeletedAt(i int64) *SysUserUpdateOne {
	suuo.mutation.AddDeletedAt(i)
	return suuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suuo *SysUserUpdateOne) ClearDeletedAt() *SysUserUpdateOne {
	suuo.mutation.ClearDeletedAt()
	return suuo
}

// SetTenantCode sets the "tenant_code" field.
func (suuo *SysUserUpdateOne) SetTenantCode(s string) *SysUserUpdateOne {
	suuo.mutation.SetTenantCode(s)
	return suuo
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableTenantCode(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetTenantCode(*s)
	}
	return suuo
}

// SetUserID sets the "user_id" field.
func (suuo *SysUserUpdateOne) SetUserID(s string) *SysUserUpdateOne {
	suuo.mutation.SetUserID(s)
	return suuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableUserID(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetUserID(*s)
	}
	return suuo
}

// SetUserName sets the "user_name" field.
func (suuo *SysUserUpdateOne) SetUserName(s string) *SysUserUpdateOne {
	suuo.mutation.SetUserName(s)
	return suuo
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableUserName(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetUserName(*s)
	}
	return suuo
}

// SetPwdHashed sets the "pwd_hashed" field.
func (suuo *SysUserUpdateOne) SetPwdHashed(s string) *SysUserUpdateOne {
	suuo.mutation.SetPwdHashed(s)
	return suuo
}

// SetNillablePwdHashed sets the "pwd_hashed" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillablePwdHashed(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetPwdHashed(*s)
	}
	return suuo
}

// SetPwdSalt sets the "pwd_salt" field.
func (suuo *SysUserUpdateOne) SetPwdSalt(s string) *SysUserUpdateOne {
	suuo.mutation.SetPwdSalt(s)
	return suuo
}

// SetNillablePwdSalt sets the "pwd_salt" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillablePwdSalt(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetPwdSalt(*s)
	}
	return suuo
}

// SetToken sets the "token" field.
func (suuo *SysUserUpdateOne) SetToken(s string) *SysUserUpdateOne {
	suuo.mutation.SetToken(s)
	return suuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableToken(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetToken(*s)
	}
	return suuo
}

// SetName sets the "name" field.
func (suuo *SysUserUpdateOne) SetName(s string) *SysUserUpdateOne {
	suuo.mutation.SetName(s)
	return suuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableName(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetName(*s)
	}
	return suuo
}

// SetAvatar sets the "avatar" field.
func (suuo *SysUserUpdateOne) SetAvatar(s string) *SysUserUpdateOne {
	suuo.mutation.SetAvatar(s)
	return suuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableAvatar(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetAvatar(*s)
	}
	return suuo
}

// SetPhone sets the "phone" field.
func (suuo *SysUserUpdateOne) SetPhone(s string) *SysUserUpdateOne {
	suuo.mutation.SetPhone(s)
	return suuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillablePhone(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetPhone(*s)
	}
	return suuo
}

// SetEmail sets the "email" field.
func (suuo *SysUserUpdateOne) SetEmail(s string) *SysUserUpdateOne {
	suuo.mutation.SetEmail(s)
	return suuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableEmail(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetEmail(*s)
	}
	return suuo
}

// SetSex sets the "sex" field.
func (suuo *SysUserUpdateOne) SetSex(i int) *SysUserUpdateOne {
	suuo.mutation.ResetSex()
	suuo.mutation.SetSex(i)
	return suuo
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableSex(i *int) *SysUserUpdateOne {
	if i != nil {
		suuo.SetSex(*i)
	}
	return suuo
}

// AddSex adds i to the "sex" field.
func (suuo *SysUserUpdateOne) AddSex(i int) *SysUserUpdateOne {
	suuo.mutation.AddSex(i)
	return suuo
}

// SetStatus sets the "status" field.
func (suuo *SysUserUpdateOne) SetStatus(i int) *SysUserUpdateOne {
	suuo.mutation.ResetStatus()
	suuo.mutation.SetStatus(i)
	return suuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableStatus(i *int) *SysUserUpdateOne {
	if i != nil {
		suuo.SetStatus(*i)
	}
	return suuo
}

// AddStatus adds i to the "status" field.
func (suuo *SysUserUpdateOne) AddStatus(i int) *SysUserUpdateOne {
	suuo.mutation.AddStatus(i)
	return suuo
}

// Mutation returns the SysUserMutation object of the builder.
func (suuo *SysUserUpdateOne) Mutation() *SysUserMutation {
	return suuo.mutation
}

// Where appends a list predicates to the SysUserUpdate builder.
func (suuo *SysUserUpdateOne) Where(ps ...predicate.SysUser) *SysUserUpdateOne {
	suuo.mutation.Where(ps...)
	return suuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suuo *SysUserUpdateOne) Select(field string, fields ...string) *SysUserUpdateOne {
	suuo.fields = append([]string{field}, fields...)
	return suuo
}

// Save executes the query and returns the updated SysUser entity.
func (suuo *SysUserUpdateOne) Save(ctx context.Context) (*SysUser, error) {
	return withHooks(ctx, suuo.sqlSave, suuo.mutation, suuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suuo *SysUserUpdateOne) SaveX(ctx context.Context) *SysUser {
	node, err := suuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suuo *SysUserUpdateOne) Exec(ctx context.Context) error {
	_, err := suuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suuo *SysUserUpdateOne) ExecX(ctx context.Context) {
	if err := suuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suuo *SysUserUpdateOne) check() error {
	if v, ok := suuo.mutation.UserName(); ok {
		if err := sysuser.UserNameValidator(v); err != nil {
			return &ValidationError{Name: "user_name", err: fmt.Errorf(`generated: validator failed for field "SysUser.user_name": %w`, err)}
		}
	}
	if v, ok := suuo.mutation.PwdHashed(); ok {
		if err := sysuser.PwdHashedValidator(v); err != nil {
			return &ValidationError{Name: "pwd_hashed", err: fmt.Errorf(`generated: validator failed for field "SysUser.pwd_hashed": %w`, err)}
		}
	}
	if v, ok := suuo.mutation.PwdSalt(); ok {
		if err := sysuser.PwdSaltValidator(v); err != nil {
			return &ValidationError{Name: "pwd_salt", err: fmt.Errorf(`generated: validator failed for field "SysUser.pwd_salt": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suuo *SysUserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SysUserUpdateOne {
	suuo.modifiers = append(suuo.modifiers, modifiers...)
	return suuo
}

func (suuo *SysUserUpdateOne) sqlSave(ctx context.Context) (_node *SysUser, err error) {
	if err := suuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sysuser.Table, sysuser.Columns, sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt))
	id, ok := suuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "SysUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysuser.FieldID)
		for _, f := range fields {
			if !sysuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != sysuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suuo.mutation.UpdatedAt(); ok {
		_spec.SetField(sysuser.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := suuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(sysuser.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := suuo.mutation.DeletedAt(); ok {
		_spec.SetField(sysuser.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := suuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(sysuser.FieldDeletedAt, field.TypeInt64, value)
	}
	if suuo.mutation.DeletedAtCleared() {
		_spec.ClearField(sysuser.FieldDeletedAt, field.TypeInt64)
	}
	if value, ok := suuo.mutation.TenantCode(); ok {
		_spec.SetField(sysuser.FieldTenantCode, field.TypeString, value)
	}
	if value, ok := suuo.mutation.UserID(); ok {
		_spec.SetField(sysuser.FieldUserID, field.TypeString, value)
	}
	if value, ok := suuo.mutation.UserName(); ok {
		_spec.SetField(sysuser.FieldUserName, field.TypeString, value)
	}
	if value, ok := suuo.mutation.PwdHashed(); ok {
		_spec.SetField(sysuser.FieldPwdHashed, field.TypeString, value)
	}
	if value, ok := suuo.mutation.PwdSalt(); ok {
		_spec.SetField(sysuser.FieldPwdSalt, field.TypeString, value)
	}
	if value, ok := suuo.mutation.Token(); ok {
		_spec.SetField(sysuser.FieldToken, field.TypeString, value)
	}
	if value, ok := suuo.mutation.Name(); ok {
		_spec.SetField(sysuser.FieldName, field.TypeString, value)
	}
	if value, ok := suuo.mutation.Avatar(); ok {
		_spec.SetField(sysuser.FieldAvatar, field.TypeString, value)
	}
	if value, ok := suuo.mutation.Phone(); ok {
		_spec.SetField(sysuser.FieldPhone, field.TypeString, value)
	}
	if value, ok := suuo.mutation.Email(); ok {
		_spec.SetField(sysuser.FieldEmail, field.TypeString, value)
	}
	if value, ok := suuo.mutation.Sex(); ok {
		_spec.SetField(sysuser.FieldSex, field.TypeInt, value)
	}
	if value, ok := suuo.mutation.AddedSex(); ok {
		_spec.AddField(sysuser.FieldSex, field.TypeInt, value)
	}
	if value, ok := suuo.mutation.Status(); ok {
		_spec.SetField(sysuser.FieldStatus, field.TypeInt, value)
	}
	if value, ok := suuo.mutation.AddedStatus(); ok {
		_spec.AddField(sysuser.FieldStatus, field.TypeInt, value)
	}
	_spec.AddModifiers(suuo.modifiers...)
	_node = &SysUser{config: suuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suuo.mutation.done = true
	return _node, nil
}
