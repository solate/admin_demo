// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/predicate"
	"admin_backend/pkg/ent/generated/product"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks     []Hook
	mutation  *ProductMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProductUpdate) SetUpdatedAt(i int64) *ProductUpdate {
	pu.mutation.ResetUpdatedAt()
	pu.mutation.SetUpdatedAt(i)
	return pu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableUpdatedAt(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetUpdatedAt(*i)
	}
	return pu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (pu *ProductUpdate) AddUpdatedAt(i int64) *ProductUpdate {
	pu.mutation.AddUpdatedAt(i)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *ProductUpdate) SetDeletedAt(i int64) *ProductUpdate {
	pu.mutation.ResetDeletedAt()
	pu.mutation.SetDeletedAt(i)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableDeletedAt(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetDeletedAt(*i)
	}
	return pu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (pu *ProductUpdate) AddDeletedAt(i int64) *ProductUpdate {
	pu.mutation.AddDeletedAt(i)
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *ProductUpdate) ClearDeletedAt() *ProductUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetTenantCode sets the "tenant_code" field.
func (pu *ProductUpdate) SetTenantCode(s string) *ProductUpdate {
	pu.mutation.SetTenantCode(s)
	return pu
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableTenantCode(s *string) *ProductUpdate {
	if s != nil {
		pu.SetTenantCode(*s)
	}
	return pu
}

// SetProductID sets the "product_id" field.
func (pu *ProductUpdate) SetProductID(s string) *ProductUpdate {
	pu.mutation.SetProductID(s)
	return pu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableProductID(s *string) *ProductUpdate {
	if s != nil {
		pu.SetProductID(*s)
	}
	return pu
}

// SetProductName sets the "product_name" field.
func (pu *ProductUpdate) SetProductName(s string) *ProductUpdate {
	pu.mutation.SetProductName(s)
	return pu
}

// SetNillableProductName sets the "product_name" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableProductName(s *string) *ProductUpdate {
	if s != nil {
		pu.SetProductName(*s)
	}
	return pu
}

// SetUnit sets the "unit" field.
func (pu *ProductUpdate) SetUnit(s string) *ProductUpdate {
	pu.mutation.SetUnit(s)
	return pu
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableUnit(s *string) *ProductUpdate {
	if s != nil {
		pu.SetUnit(*s)
	}
	return pu
}

// SetPurchasePrice sets the "purchase_price" field.
func (pu *ProductUpdate) SetPurchasePrice(d decimal.Decimal) *ProductUpdate {
	pu.mutation.SetPurchasePrice(d)
	return pu
}

// SetNillablePurchasePrice sets the "purchase_price" field if the given value is not nil.
func (pu *ProductUpdate) SetNillablePurchasePrice(d *decimal.Decimal) *ProductUpdate {
	if d != nil {
		pu.SetPurchasePrice(*d)
	}
	return pu
}

// SetSalePrice sets the "sale_price" field.
func (pu *ProductUpdate) SetSalePrice(d decimal.Decimal) *ProductUpdate {
	pu.mutation.SetSalePrice(d)
	return pu
}

// SetNillableSalePrice sets the "sale_price" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableSalePrice(d *decimal.Decimal) *ProductUpdate {
	if d != nil {
		pu.SetSalePrice(*d)
	}
	return pu
}

// SetCurrentStock sets the "current_stock" field.
func (pu *ProductUpdate) SetCurrentStock(i int) *ProductUpdate {
	pu.mutation.ResetCurrentStock()
	pu.mutation.SetCurrentStock(i)
	return pu
}

// SetNillableCurrentStock sets the "current_stock" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableCurrentStock(i *int) *ProductUpdate {
	if i != nil {
		pu.SetCurrentStock(*i)
	}
	return pu
}

// AddCurrentStock adds i to the "current_stock" field.
func (pu *ProductUpdate) AddCurrentStock(i int) *ProductUpdate {
	pu.mutation.AddCurrentStock(i)
	return pu
}

// SetMinStock sets the "min_stock" field.
func (pu *ProductUpdate) SetMinStock(i int) *ProductUpdate {
	pu.mutation.ResetMinStock()
	pu.mutation.SetMinStock(i)
	return pu
}

// SetNillableMinStock sets the "min_stock" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableMinStock(i *int) *ProductUpdate {
	if i != nil {
		pu.SetMinStock(*i)
	}
	return pu
}

// AddMinStock adds i to the "min_stock" field.
func (pu *ProductUpdate) AddMinStock(i int) *ProductUpdate {
	pu.mutation.AddMinStock(i)
	return pu
}

// SetStatus sets the "status" field.
func (pu *ProductUpdate) SetStatus(i int) *ProductUpdate {
	pu.mutation.ResetStatus()
	pu.mutation.SetStatus(i)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableStatus(i *int) *ProductUpdate {
	if i != nil {
		pu.SetStatus(*i)
	}
	return pu
}

// AddStatus adds i to the "status" field.
func (pu *ProductUpdate) AddStatus(i int) *ProductUpdate {
	pu.mutation.AddStatus(i)
	return pu
}

// SetFactoryID sets the "factory_id" field.
func (pu *ProductUpdate) SetFactoryID(s string) *ProductUpdate {
	pu.mutation.SetFactoryID(s)
	return pu
}

// SetNillableFactoryID sets the "factory_id" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableFactoryID(s *string) *ProductUpdate {
	if s != nil {
		pu.SetFactoryID(*s)
	}
	return pu
}

// ClearFactoryID clears the value of the "factory_id" field.
func (pu *ProductUpdate) ClearFactoryID() *ProductUpdate {
	pu.mutation.ClearFactoryID()
	return pu
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProductUpdate) check() error {
	if v, ok := pu.mutation.ProductName(); ok {
		if err := product.ProductNameValidator(v); err != nil {
			return &ValidationError{Name: "product_name", err: fmt.Errorf(`generated: validator failed for field "Product.product_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *ProductUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProductUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(product.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(product.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(product.FieldDeletedAt, field.TypeInt64, value)
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.ClearField(product.FieldDeletedAt, field.TypeInt64)
	}
	if value, ok := pu.mutation.TenantCode(); ok {
		_spec.SetField(product.FieldTenantCode, field.TypeString, value)
	}
	if value, ok := pu.mutation.ProductID(); ok {
		_spec.SetField(product.FieldProductID, field.TypeString, value)
	}
	if value, ok := pu.mutation.ProductName(); ok {
		_spec.SetField(product.FieldProductName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Unit(); ok {
		_spec.SetField(product.FieldUnit, field.TypeString, value)
	}
	if value, ok := pu.mutation.PurchasePrice(); ok {
		_spec.SetField(product.FieldPurchasePrice, field.TypeOther, value)
	}
	if value, ok := pu.mutation.SalePrice(); ok {
		_spec.SetField(product.FieldSalePrice, field.TypeOther, value)
	}
	if value, ok := pu.mutation.CurrentStock(); ok {
		_spec.SetField(product.FieldCurrentStock, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedCurrentStock(); ok {
		_spec.AddField(product.FieldCurrentStock, field.TypeInt, value)
	}
	if value, ok := pu.mutation.MinStock(); ok {
		_spec.SetField(product.FieldMinStock, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedMinStock(); ok {
		_spec.AddField(product.FieldMinStock, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(product.FieldStatus, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedStatus(); ok {
		_spec.AddField(product.FieldStatus, field.TypeInt, value)
	}
	if value, ok := pu.mutation.FactoryID(); ok {
		_spec.SetField(product.FieldFactoryID, field.TypeString, value)
	}
	if pu.mutation.FactoryIDCleared() {
		_spec.ClearField(product.FieldFactoryID, field.TypeString)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProductMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProductUpdateOne) SetUpdatedAt(i int64) *ProductUpdateOne {
	puo.mutation.ResetUpdatedAt()
	puo.mutation.SetUpdatedAt(i)
	return puo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableUpdatedAt(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetUpdatedAt(*i)
	}
	return puo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (puo *ProductUpdateOne) AddUpdatedAt(i int64) *ProductUpdateOne {
	puo.mutation.AddUpdatedAt(i)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *ProductUpdateOne) SetDeletedAt(i int64) *ProductUpdateOne {
	puo.mutation.ResetDeletedAt()
	puo.mutation.SetDeletedAt(i)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableDeletedAt(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetDeletedAt(*i)
	}
	return puo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (puo *ProductUpdateOne) AddDeletedAt(i int64) *ProductUpdateOne {
	puo.mutation.AddDeletedAt(i)
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *ProductUpdateOne) ClearDeletedAt() *ProductUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetTenantCode sets the "tenant_code" field.
func (puo *ProductUpdateOne) SetTenantCode(s string) *ProductUpdateOne {
	puo.mutation.SetTenantCode(s)
	return puo
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableTenantCode(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetTenantCode(*s)
	}
	return puo
}

// SetProductID sets the "product_id" field.
func (puo *ProductUpdateOne) SetProductID(s string) *ProductUpdateOne {
	puo.mutation.SetProductID(s)
	return puo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableProductID(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetProductID(*s)
	}
	return puo
}

// SetProductName sets the "product_name" field.
func (puo *ProductUpdateOne) SetProductName(s string) *ProductUpdateOne {
	puo.mutation.SetProductName(s)
	return puo
}

// SetNillableProductName sets the "product_name" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableProductName(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetProductName(*s)
	}
	return puo
}

// SetUnit sets the "unit" field.
func (puo *ProductUpdateOne) SetUnit(s string) *ProductUpdateOne {
	puo.mutation.SetUnit(s)
	return puo
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableUnit(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetUnit(*s)
	}
	return puo
}

// SetPurchasePrice sets the "purchase_price" field.
func (puo *ProductUpdateOne) SetPurchasePrice(d decimal.Decimal) *ProductUpdateOne {
	puo.mutation.SetPurchasePrice(d)
	return puo
}

// SetNillablePurchasePrice sets the "purchase_price" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillablePurchasePrice(d *decimal.Decimal) *ProductUpdateOne {
	if d != nil {
		puo.SetPurchasePrice(*d)
	}
	return puo
}

// SetSalePrice sets the "sale_price" field.
func (puo *ProductUpdateOne) SetSalePrice(d decimal.Decimal) *ProductUpdateOne {
	puo.mutation.SetSalePrice(d)
	return puo
}

// SetNillableSalePrice sets the "sale_price" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableSalePrice(d *decimal.Decimal) *ProductUpdateOne {
	if d != nil {
		puo.SetSalePrice(*d)
	}
	return puo
}

// SetCurrentStock sets the "current_stock" field.
func (puo *ProductUpdateOne) SetCurrentStock(i int) *ProductUpdateOne {
	puo.mutation.ResetCurrentStock()
	puo.mutation.SetCurrentStock(i)
	return puo
}

// SetNillableCurrentStock sets the "current_stock" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableCurrentStock(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetCurrentStock(*i)
	}
	return puo
}

// AddCurrentStock adds i to the "current_stock" field.
func (puo *ProductUpdateOne) AddCurrentStock(i int) *ProductUpdateOne {
	puo.mutation.AddCurrentStock(i)
	return puo
}

// SetMinStock sets the "min_stock" field.
func (puo *ProductUpdateOne) SetMinStock(i int) *ProductUpdateOne {
	puo.mutation.ResetMinStock()
	puo.mutation.SetMinStock(i)
	return puo
}

// SetNillableMinStock sets the "min_stock" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableMinStock(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetMinStock(*i)
	}
	return puo
}

// AddMinStock adds i to the "min_stock" field.
func (puo *ProductUpdateOne) AddMinStock(i int) *ProductUpdateOne {
	puo.mutation.AddMinStock(i)
	return puo
}

// SetStatus sets the "status" field.
func (puo *ProductUpdateOne) SetStatus(i int) *ProductUpdateOne {
	puo.mutation.ResetStatus()
	puo.mutation.SetStatus(i)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableStatus(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetStatus(*i)
	}
	return puo
}

// AddStatus adds i to the "status" field.
func (puo *ProductUpdateOne) AddStatus(i int) *ProductUpdateOne {
	puo.mutation.AddStatus(i)
	return puo
}

// SetFactoryID sets the "factory_id" field.
func (puo *ProductUpdateOne) SetFactoryID(s string) *ProductUpdateOne {
	puo.mutation.SetFactoryID(s)
	return puo
}

// SetNillableFactoryID sets the "factory_id" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableFactoryID(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetFactoryID(*s)
	}
	return puo
}

// ClearFactoryID clears the value of the "factory_id" field.
func (puo *ProductUpdateOne) ClearFactoryID() *ProductUpdateOne {
	puo.mutation.ClearFactoryID()
	return puo
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// Where appends a list predicates to the ProductUpdate builder.
func (puo *ProductUpdateOne) Where(ps ...predicate.Product) *ProductUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProductUpdateOne) check() error {
	if v, ok := puo.mutation.ProductName(); ok {
		if err := product.ProductNameValidator(v); err != nil {
			return &ValidationError{Name: "product_name", err: fmt.Errorf(`generated: validator failed for field "Product.product_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *ProductUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProductUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(product.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(product.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(product.FieldDeletedAt, field.TypeInt64, value)
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.ClearField(product.FieldDeletedAt, field.TypeInt64)
	}
	if value, ok := puo.mutation.TenantCode(); ok {
		_spec.SetField(product.FieldTenantCode, field.TypeString, value)
	}
	if value, ok := puo.mutation.ProductID(); ok {
		_spec.SetField(product.FieldProductID, field.TypeString, value)
	}
	if value, ok := puo.mutation.ProductName(); ok {
		_spec.SetField(product.FieldProductName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Unit(); ok {
		_spec.SetField(product.FieldUnit, field.TypeString, value)
	}
	if value, ok := puo.mutation.PurchasePrice(); ok {
		_spec.SetField(product.FieldPurchasePrice, field.TypeOther, value)
	}
	if value, ok := puo.mutation.SalePrice(); ok {
		_spec.SetField(product.FieldSalePrice, field.TypeOther, value)
	}
	if value, ok := puo.mutation.CurrentStock(); ok {
		_spec.SetField(product.FieldCurrentStock, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedCurrentStock(); ok {
		_spec.AddField(product.FieldCurrentStock, field.TypeInt, value)
	}
	if value, ok := puo.mutation.MinStock(); ok {
		_spec.SetField(product.FieldMinStock, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedMinStock(); ok {
		_spec.AddField(product.FieldMinStock, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(product.FieldStatus, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedStatus(); ok {
		_spec.AddField(product.FieldStatus, field.TypeInt, value)
	}
	if value, ok := puo.mutation.FactoryID(); ok {
		_spec.SetField(product.FieldFactoryID, field.TypeString, value)
	}
	if puo.mutation.FactoryIDCleared() {
		_spec.ClearField(product.FieldFactoryID, field.TypeString)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
