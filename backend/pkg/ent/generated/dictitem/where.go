// Code generated by ent, DO NOT EDIT.

package dictitem

import (
	"admin_backend/pkg/ent/generated/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DictItem {
	return predicate.DictItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DictItem {
	return predicate.DictItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DictItem {
	return predicate.DictItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DictItem {
	return predicate.DictItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DictItem {
	return predicate.DictItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DictItem {
	return predicate.DictItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DictItem {
	return predicate.DictItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DictItem {
	return predicate.DictItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DictItem {
	return predicate.DictItem(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.DictItem {
	return predicate.DictItem(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.DictItem {
	return predicate.DictItem(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v int64) predicate.DictItem {
	return predicate.DictItem(sql.FieldEQ(FieldDeletedAt, v))
}

// TenantCode applies equality check predicate on the "tenant_code" field. It's identical to TenantCodeEQ.
func TenantCode(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldEQ(FieldTenantCode, v))
}

// ItemID applies equality check predicate on the "item_id" field. It's identical to ItemIDEQ.
func ItemID(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldEQ(FieldItemID, v))
}

// TypeCode applies equality check predicate on the "type_code" field. It's identical to TypeCodeEQ.
func TypeCode(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldEQ(FieldTypeCode, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldEQ(FieldValue, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldEQ(FieldDescription, v))
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v int) predicate.DictItem {
	return predicate.DictItem(sql.FieldEQ(FieldSort, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.DictItem {
	return predicate.DictItem(sql.FieldEQ(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.DictItem {
	return predicate.DictItem(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.DictItem {
	return predicate.DictItem(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.DictItem {
	return predicate.DictItem(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.DictItem {
	return predicate.DictItem(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.DictItem {
	return predicate.DictItem(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.DictItem {
	return predicate.DictItem(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.DictItem {
	return predicate.DictItem(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.DictItem {
	return predicate.DictItem(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.DictItem {
	return predicate.DictItem(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.DictItem {
	return predicate.DictItem(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.DictItem {
	return predicate.DictItem(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.DictItem {
	return predicate.DictItem(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.DictItem {
	return predicate.DictItem(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.DictItem {
	return predicate.DictItem(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.DictItem {
	return predicate.DictItem(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.DictItem {
	return predicate.DictItem(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v int64) predicate.DictItem {
	return predicate.DictItem(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v int64) predicate.DictItem {
	return predicate.DictItem(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...int64) predicate.DictItem {
	return predicate.DictItem(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...int64) predicate.DictItem {
	return predicate.DictItem(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v int64) predicate.DictItem {
	return predicate.DictItem(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v int64) predicate.DictItem {
	return predicate.DictItem(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v int64) predicate.DictItem {
	return predicate.DictItem(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v int64) predicate.DictItem {
	return predicate.DictItem(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.DictItem {
	return predicate.DictItem(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.DictItem {
	return predicate.DictItem(sql.FieldNotNull(FieldDeletedAt))
}

// TenantCodeEQ applies the EQ predicate on the "tenant_code" field.
func TenantCodeEQ(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldEQ(FieldTenantCode, v))
}

// TenantCodeNEQ applies the NEQ predicate on the "tenant_code" field.
func TenantCodeNEQ(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldNEQ(FieldTenantCode, v))
}

// TenantCodeIn applies the In predicate on the "tenant_code" field.
func TenantCodeIn(vs ...string) predicate.DictItem {
	return predicate.DictItem(sql.FieldIn(FieldTenantCode, vs...))
}

// TenantCodeNotIn applies the NotIn predicate on the "tenant_code" field.
func TenantCodeNotIn(vs ...string) predicate.DictItem {
	return predicate.DictItem(sql.FieldNotIn(FieldTenantCode, vs...))
}

// TenantCodeGT applies the GT predicate on the "tenant_code" field.
func TenantCodeGT(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldGT(FieldTenantCode, v))
}

// TenantCodeGTE applies the GTE predicate on the "tenant_code" field.
func TenantCodeGTE(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldGTE(FieldTenantCode, v))
}

// TenantCodeLT applies the LT predicate on the "tenant_code" field.
func TenantCodeLT(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldLT(FieldTenantCode, v))
}

// TenantCodeLTE applies the LTE predicate on the "tenant_code" field.
func TenantCodeLTE(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldLTE(FieldTenantCode, v))
}

// TenantCodeContains applies the Contains predicate on the "tenant_code" field.
func TenantCodeContains(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldContains(FieldTenantCode, v))
}

// TenantCodeHasPrefix applies the HasPrefix predicate on the "tenant_code" field.
func TenantCodeHasPrefix(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldHasPrefix(FieldTenantCode, v))
}

// TenantCodeHasSuffix applies the HasSuffix predicate on the "tenant_code" field.
func TenantCodeHasSuffix(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldHasSuffix(FieldTenantCode, v))
}

// TenantCodeEqualFold applies the EqualFold predicate on the "tenant_code" field.
func TenantCodeEqualFold(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldEqualFold(FieldTenantCode, v))
}

// TenantCodeContainsFold applies the ContainsFold predicate on the "tenant_code" field.
func TenantCodeContainsFold(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldContainsFold(FieldTenantCode, v))
}

// ItemIDEQ applies the EQ predicate on the "item_id" field.
func ItemIDEQ(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldEQ(FieldItemID, v))
}

// ItemIDNEQ applies the NEQ predicate on the "item_id" field.
func ItemIDNEQ(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldNEQ(FieldItemID, v))
}

// ItemIDIn applies the In predicate on the "item_id" field.
func ItemIDIn(vs ...string) predicate.DictItem {
	return predicate.DictItem(sql.FieldIn(FieldItemID, vs...))
}

// ItemIDNotIn applies the NotIn predicate on the "item_id" field.
func ItemIDNotIn(vs ...string) predicate.DictItem {
	return predicate.DictItem(sql.FieldNotIn(FieldItemID, vs...))
}

// ItemIDGT applies the GT predicate on the "item_id" field.
func ItemIDGT(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldGT(FieldItemID, v))
}

// ItemIDGTE applies the GTE predicate on the "item_id" field.
func ItemIDGTE(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldGTE(FieldItemID, v))
}

// ItemIDLT applies the LT predicate on the "item_id" field.
func ItemIDLT(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldLT(FieldItemID, v))
}

// ItemIDLTE applies the LTE predicate on the "item_id" field.
func ItemIDLTE(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldLTE(FieldItemID, v))
}

// ItemIDContains applies the Contains predicate on the "item_id" field.
func ItemIDContains(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldContains(FieldItemID, v))
}

// ItemIDHasPrefix applies the HasPrefix predicate on the "item_id" field.
func ItemIDHasPrefix(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldHasPrefix(FieldItemID, v))
}

// ItemIDHasSuffix applies the HasSuffix predicate on the "item_id" field.
func ItemIDHasSuffix(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldHasSuffix(FieldItemID, v))
}

// ItemIDEqualFold applies the EqualFold predicate on the "item_id" field.
func ItemIDEqualFold(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldEqualFold(FieldItemID, v))
}

// ItemIDContainsFold applies the ContainsFold predicate on the "item_id" field.
func ItemIDContainsFold(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldContainsFold(FieldItemID, v))
}

// TypeCodeEQ applies the EQ predicate on the "type_code" field.
func TypeCodeEQ(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldEQ(FieldTypeCode, v))
}

// TypeCodeNEQ applies the NEQ predicate on the "type_code" field.
func TypeCodeNEQ(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldNEQ(FieldTypeCode, v))
}

// TypeCodeIn applies the In predicate on the "type_code" field.
func TypeCodeIn(vs ...string) predicate.DictItem {
	return predicate.DictItem(sql.FieldIn(FieldTypeCode, vs...))
}

// TypeCodeNotIn applies the NotIn predicate on the "type_code" field.
func TypeCodeNotIn(vs ...string) predicate.DictItem {
	return predicate.DictItem(sql.FieldNotIn(FieldTypeCode, vs...))
}

// TypeCodeGT applies the GT predicate on the "type_code" field.
func TypeCodeGT(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldGT(FieldTypeCode, v))
}

// TypeCodeGTE applies the GTE predicate on the "type_code" field.
func TypeCodeGTE(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldGTE(FieldTypeCode, v))
}

// TypeCodeLT applies the LT predicate on the "type_code" field.
func TypeCodeLT(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldLT(FieldTypeCode, v))
}

// TypeCodeLTE applies the LTE predicate on the "type_code" field.
func TypeCodeLTE(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldLTE(FieldTypeCode, v))
}

// TypeCodeContains applies the Contains predicate on the "type_code" field.
func TypeCodeContains(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldContains(FieldTypeCode, v))
}

// TypeCodeHasPrefix applies the HasPrefix predicate on the "type_code" field.
func TypeCodeHasPrefix(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldHasPrefix(FieldTypeCode, v))
}

// TypeCodeHasSuffix applies the HasSuffix predicate on the "type_code" field.
func TypeCodeHasSuffix(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldHasSuffix(FieldTypeCode, v))
}

// TypeCodeEqualFold applies the EqualFold predicate on the "type_code" field.
func TypeCodeEqualFold(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldEqualFold(FieldTypeCode, v))
}

// TypeCodeContainsFold applies the ContainsFold predicate on the "type_code" field.
func TypeCodeContainsFold(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldContainsFold(FieldTypeCode, v))
}

// LabelEQ applies the EQ predicate on the "label" field.
func LabelEQ(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldEQ(FieldLabel, v))
}

// LabelNEQ applies the NEQ predicate on the "label" field.
func LabelNEQ(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldNEQ(FieldLabel, v))
}

// LabelIn applies the In predicate on the "label" field.
func LabelIn(vs ...string) predicate.DictItem {
	return predicate.DictItem(sql.FieldIn(FieldLabel, vs...))
}

// LabelNotIn applies the NotIn predicate on the "label" field.
func LabelNotIn(vs ...string) predicate.DictItem {
	return predicate.DictItem(sql.FieldNotIn(FieldLabel, vs...))
}

// LabelGT applies the GT predicate on the "label" field.
func LabelGT(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldGT(FieldLabel, v))
}

// LabelGTE applies the GTE predicate on the "label" field.
func LabelGTE(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldGTE(FieldLabel, v))
}

// LabelLT applies the LT predicate on the "label" field.
func LabelLT(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldLT(FieldLabel, v))
}

// LabelLTE applies the LTE predicate on the "label" field.
func LabelLTE(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldLTE(FieldLabel, v))
}

// LabelContains applies the Contains predicate on the "label" field.
func LabelContains(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldContains(FieldLabel, v))
}

// LabelHasPrefix applies the HasPrefix predicate on the "label" field.
func LabelHasPrefix(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldHasPrefix(FieldLabel, v))
}

// LabelHasSuffix applies the HasSuffix predicate on the "label" field.
func LabelHasSuffix(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldHasSuffix(FieldLabel, v))
}

// LabelEqualFold applies the EqualFold predicate on the "label" field.
func LabelEqualFold(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldEqualFold(FieldLabel, v))
}

// LabelContainsFold applies the ContainsFold predicate on the "label" field.
func LabelContainsFold(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldContainsFold(FieldLabel, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.DictItem {
	return predicate.DictItem(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.DictItem {
	return predicate.DictItem(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldLTE(FieldValue, v))
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldContains(FieldValue, v))
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldHasPrefix(FieldValue, v))
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldHasSuffix(FieldValue, v))
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldEqualFold(FieldValue, v))
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldContainsFold(FieldValue, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.DictItem {
	return predicate.DictItem(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.DictItem {
	return predicate.DictItem(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.DictItem {
	return predicate.DictItem(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.DictItem {
	return predicate.DictItem(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.DictItem {
	return predicate.DictItem(sql.FieldContainsFold(FieldDescription, v))
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v int) predicate.DictItem {
	return predicate.DictItem(sql.FieldEQ(FieldSort, v))
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v int) predicate.DictItem {
	return predicate.DictItem(sql.FieldNEQ(FieldSort, v))
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...int) predicate.DictItem {
	return predicate.DictItem(sql.FieldIn(FieldSort, vs...))
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...int) predicate.DictItem {
	return predicate.DictItem(sql.FieldNotIn(FieldSort, vs...))
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v int) predicate.DictItem {
	return predicate.DictItem(sql.FieldGT(FieldSort, v))
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v int) predicate.DictItem {
	return predicate.DictItem(sql.FieldGTE(FieldSort, v))
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v int) predicate.DictItem {
	return predicate.DictItem(sql.FieldLT(FieldSort, v))
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v int) predicate.DictItem {
	return predicate.DictItem(sql.FieldLTE(FieldSort, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.DictItem {
	return predicate.DictItem(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.DictItem {
	return predicate.DictItem(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.DictItem {
	return predicate.DictItem(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.DictItem {
	return predicate.DictItem(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.DictItem {
	return predicate.DictItem(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.DictItem {
	return predicate.DictItem(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.DictItem {
	return predicate.DictItem(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.DictItem {
	return predicate.DictItem(sql.FieldLTE(FieldStatus, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DictItem) predicate.DictItem {
	return predicate.DictItem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DictItem) predicate.DictItem {
	return predicate.DictItem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DictItem) predicate.DictItem {
	return predicate.DictItem(sql.NotPredicates(p))
}
