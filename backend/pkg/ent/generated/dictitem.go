// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/dictitem"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 字典数据
type DictItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// 修改时间
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt *int64 `json:"deleted_at,omitempty"`
	// 租户编码
	TenantCode string `json:"tenant_code,omitempty"`
	// 字典项ID
	ItemID string `json:"item_id,omitempty"`
	// 字典类型code
	TypeCode string `json:"type_code,omitempty"`
	// 字典标签
	Label string `json:"label,omitempty"`
	// 字典键值
	Value string `json:"value,omitempty"`
	// 字典项描述
	Description string `json:"description,omitempty"`
	// 排序
	Sort int `json:"sort,omitempty"`
	// 状态: 1:启用, 2:禁用
	Status       int `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DictItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dictitem.FieldID, dictitem.FieldCreatedAt, dictitem.FieldUpdatedAt, dictitem.FieldDeletedAt, dictitem.FieldSort, dictitem.FieldStatus:
			values[i] = new(sql.NullInt64)
		case dictitem.FieldTenantCode, dictitem.FieldItemID, dictitem.FieldTypeCode, dictitem.FieldLabel, dictitem.FieldValue, dictitem.FieldDescription:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DictItem fields.
func (di *DictItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dictitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			di.ID = int(value.Int64)
		case dictitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				di.CreatedAt = value.Int64
			}
		case dictitem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				di.UpdatedAt = value.Int64
			}
		case dictitem.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				di.DeletedAt = new(int64)
				*di.DeletedAt = value.Int64
			}
		case dictitem.FieldTenantCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_code", values[i])
			} else if value.Valid {
				di.TenantCode = value.String
			}
		case dictitem.FieldItemID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field item_id", values[i])
			} else if value.Valid {
				di.ItemID = value.String
			}
		case dictitem.FieldTypeCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type_code", values[i])
			} else if value.Valid {
				di.TypeCode = value.String
			}
		case dictitem.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				di.Label = value.String
			}
		case dictitem.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				di.Value = value.String
			}
		case dictitem.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				di.Description = value.String
			}
		case dictitem.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				di.Sort = int(value.Int64)
			}
		case dictitem.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				di.Status = int(value.Int64)
			}
		default:
			di.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the DictItem.
// This includes values selected through modifiers, order, etc.
func (di *DictItem) GetValue(name string) (ent.Value, error) {
	return di.selectValues.Get(name)
}

// Update returns a builder for updating this DictItem.
// Note that you need to call DictItem.Unwrap() before calling this method if this DictItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (di *DictItem) Update() *DictItemUpdateOne {
	return NewDictItemClient(di.config).UpdateOne(di)
}

// Unwrap unwraps the DictItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (di *DictItem) Unwrap() *DictItem {
	_tx, ok := di.config.driver.(*txDriver)
	if !ok {
		panic("generated: DictItem is not a transactional entity")
	}
	di.config.driver = _tx.drv
	return di
}

// String implements the fmt.Stringer.
func (di *DictItem) String() string {
	var builder strings.Builder
	builder.WriteString("DictItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", di.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", di.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", di.UpdatedAt))
	builder.WriteString(", ")
	if v := di.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("tenant_code=")
	builder.WriteString(di.TenantCode)
	builder.WriteString(", ")
	builder.WriteString("item_id=")
	builder.WriteString(di.ItemID)
	builder.WriteString(", ")
	builder.WriteString("type_code=")
	builder.WriteString(di.TypeCode)
	builder.WriteString(", ")
	builder.WriteString("label=")
	builder.WriteString(di.Label)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(di.Value)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(di.Description)
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(fmt.Sprintf("%v", di.Sort))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", di.Status))
	builder.WriteByte(')')
	return builder.String()
}

// DictItems is a parsable slice of DictItem.
type DictItems []*DictItem
