// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/position"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PositionCreate is the builder for creating a Position entity.
type PositionCreate struct {
	config
	mutation *PositionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *PositionCreate) SetCreatedAt(i int64) *PositionCreate {
	pc.mutation.SetCreatedAt(i)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PositionCreate) SetNillableCreatedAt(i *int64) *PositionCreate {
	if i != nil {
		pc.SetCreatedAt(*i)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PositionCreate) SetUpdatedAt(i int64) *PositionCreate {
	pc.mutation.SetUpdatedAt(i)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PositionCreate) SetNillableUpdatedAt(i *int64) *PositionCreate {
	if i != nil {
		pc.SetUpdatedAt(*i)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *PositionCreate) SetDeletedAt(i int64) *PositionCreate {
	pc.mutation.SetDeletedAt(i)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *PositionCreate) SetNillableDeletedAt(i *int64) *PositionCreate {
	if i != nil {
		pc.SetDeletedAt(*i)
	}
	return pc
}

// SetTenantCode sets the "tenant_code" field.
func (pc *PositionCreate) SetTenantCode(s string) *PositionCreate {
	pc.mutation.SetTenantCode(s)
	return pc
}

// SetPositionID sets the "position_id" field.
func (pc *PositionCreate) SetPositionID(s string) *PositionCreate {
	pc.mutation.SetPositionID(s)
	return pc
}

// SetName sets the "name" field.
func (pc *PositionCreate) SetName(s string) *PositionCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetDepartmentID sets the "department_id" field.
func (pc *PositionCreate) SetDepartmentID(s string) *PositionCreate {
	pc.mutation.SetDepartmentID(s)
	return pc
}

// SetDescription sets the "description" field.
func (pc *PositionCreate) SetDescription(s string) *PositionCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pc *PositionCreate) SetNillableDescription(s *string) *PositionCreate {
	if s != nil {
		pc.SetDescription(*s)
	}
	return pc
}

// Mutation returns the PositionMutation object of the builder.
func (pc *PositionCreate) Mutation() *PositionMutation {
	return pc.mutation
}

// Save creates the Position in the database.
func (pc *PositionCreate) Save(ctx context.Context) (*Position, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PositionCreate) SaveX(ctx context.Context) *Position {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PositionCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PositionCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PositionCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := position.DefaultCreatedAt
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := position.DefaultUpdatedAt
		pc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PositionCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Position.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "Position.updated_at"`)}
	}
	if _, ok := pc.mutation.TenantCode(); !ok {
		return &ValidationError{Name: "tenant_code", err: errors.New(`generated: missing required field "Position.tenant_code"`)}
	}
	if v, ok := pc.mutation.TenantCode(); ok {
		if err := position.TenantCodeValidator(v); err != nil {
			return &ValidationError{Name: "tenant_code", err: fmt.Errorf(`generated: validator failed for field "Position.tenant_code": %w`, err)}
		}
	}
	if _, ok := pc.mutation.PositionID(); !ok {
		return &ValidationError{Name: "position_id", err: errors.New(`generated: missing required field "Position.position_id"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Position.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := position.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Position.name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.DepartmentID(); !ok {
		return &ValidationError{Name: "department_id", err: errors.New(`generated: missing required field "Position.department_id"`)}
	}
	if v, ok := pc.mutation.DepartmentID(); ok {
		if err := position.DepartmentIDValidator(v); err != nil {
			return &ValidationError{Name: "department_id", err: fmt.Errorf(`generated: validator failed for field "Position.department_id": %w`, err)}
		}
	}
	return nil
}

func (pc *PositionCreate) sqlSave(ctx context.Context) (*Position, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PositionCreate) createSpec() (*Position, *sqlgraph.CreateSpec) {
	var (
		_node = &Position{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(position.Table, sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(position.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(position.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.SetField(position.FieldDeletedAt, field.TypeInt64, value)
		_node.DeletedAt = &value
	}
	if value, ok := pc.mutation.TenantCode(); ok {
		_spec.SetField(position.FieldTenantCode, field.TypeString, value)
		_node.TenantCode = value
	}
	if value, ok := pc.mutation.PositionID(); ok {
		_spec.SetField(position.FieldPositionID, field.TypeString, value)
		_node.PositionID = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(position.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.DepartmentID(); ok {
		_spec.SetField(position.FieldDepartmentID, field.TypeString, value)
		_node.DepartmentID = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(position.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Position.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PositionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *PositionCreate) OnConflict(opts ...sql.ConflictOption) *PositionUpsertOne {
	pc.conflict = opts
	return &PositionUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Position.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PositionCreate) OnConflictColumns(columns ...string) *PositionUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PositionUpsertOne{
		create: pc,
	}
}

type (
	// PositionUpsertOne is the builder for "upsert"-ing
	//  one Position node.
	PositionUpsertOne struct {
		create *PositionCreate
	}

	// PositionUpsert is the "OnConflict" setter.
	PositionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PositionUpsert) SetUpdatedAt(v int64) *PositionUpsert {
	u.Set(position.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PositionUpsert) UpdateUpdatedAt() *PositionUpsert {
	u.SetExcluded(position.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PositionUpsert) AddUpdatedAt(v int64) *PositionUpsert {
	u.Add(position.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PositionUpsert) SetDeletedAt(v int64) *PositionUpsert {
	u.Set(position.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PositionUpsert) UpdateDeletedAt() *PositionUpsert {
	u.SetExcluded(position.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PositionUpsert) AddDeletedAt(v int64) *PositionUpsert {
	u.Add(position.FieldDeletedAt, v)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PositionUpsert) ClearDeletedAt() *PositionUpsert {
	u.SetNull(position.FieldDeletedAt)
	return u
}

// SetTenantCode sets the "tenant_code" field.
func (u *PositionUpsert) SetTenantCode(v string) *PositionUpsert {
	u.Set(position.FieldTenantCode, v)
	return u
}

// UpdateTenantCode sets the "tenant_code" field to the value that was provided on create.
func (u *PositionUpsert) UpdateTenantCode() *PositionUpsert {
	u.SetExcluded(position.FieldTenantCode)
	return u
}

// SetPositionID sets the "position_id" field.
func (u *PositionUpsert) SetPositionID(v string) *PositionUpsert {
	u.Set(position.FieldPositionID, v)
	return u
}

// UpdatePositionID sets the "position_id" field to the value that was provided on create.
func (u *PositionUpsert) UpdatePositionID() *PositionUpsert {
	u.SetExcluded(position.FieldPositionID)
	return u
}

// SetName sets the "name" field.
func (u *PositionUpsert) SetName(v string) *PositionUpsert {
	u.Set(position.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PositionUpsert) UpdateName() *PositionUpsert {
	u.SetExcluded(position.FieldName)
	return u
}

// SetDepartmentID sets the "department_id" field.
func (u *PositionUpsert) SetDepartmentID(v string) *PositionUpsert {
	u.Set(position.FieldDepartmentID, v)
	return u
}

// UpdateDepartmentID sets the "department_id" field to the value that was provided on create.
func (u *PositionUpsert) UpdateDepartmentID() *PositionUpsert {
	u.SetExcluded(position.FieldDepartmentID)
	return u
}

// SetDescription sets the "description" field.
func (u *PositionUpsert) SetDescription(v string) *PositionUpsert {
	u.Set(position.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PositionUpsert) UpdateDescription() *PositionUpsert {
	u.SetExcluded(position.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *PositionUpsert) ClearDescription() *PositionUpsert {
	u.SetNull(position.FieldDescription)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Position.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PositionUpsertOne) UpdateNewValues() *PositionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(position.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Position.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PositionUpsertOne) Ignore() *PositionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PositionUpsertOne) DoNothing() *PositionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PositionCreate.OnConflict
// documentation for more info.
func (u *PositionUpsertOne) Update(set func(*PositionUpsert)) *PositionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PositionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PositionUpsertOne) SetUpdatedAt(v int64) *PositionUpsertOne {
	return u.Update(func(s *PositionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PositionUpsertOne) AddUpdatedAt(v int64) *PositionUpsertOne {
	return u.Update(func(s *PositionUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PositionUpsertOne) UpdateUpdatedAt() *PositionUpsertOne {
	return u.Update(func(s *PositionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PositionUpsertOne) SetDeletedAt(v int64) *PositionUpsertOne {
	return u.Update(func(s *PositionUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PositionUpsertOne) AddDeletedAt(v int64) *PositionUpsertOne {
	return u.Update(func(s *PositionUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PositionUpsertOne) UpdateDeletedAt() *PositionUpsertOne {
	return u.Update(func(s *PositionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PositionUpsertOne) ClearDeletedAt() *PositionUpsertOne {
	return u.Update(func(s *PositionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTenantCode sets the "tenant_code" field.
func (u *PositionUpsertOne) SetTenantCode(v string) *PositionUpsertOne {
	return u.Update(func(s *PositionUpsert) {
		s.SetTenantCode(v)
	})
}

// UpdateTenantCode sets the "tenant_code" field to the value that was provided on create.
func (u *PositionUpsertOne) UpdateTenantCode() *PositionUpsertOne {
	return u.Update(func(s *PositionUpsert) {
		s.UpdateTenantCode()
	})
}

// SetPositionID sets the "position_id" field.
func (u *PositionUpsertOne) SetPositionID(v string) *PositionUpsertOne {
	return u.Update(func(s *PositionUpsert) {
		s.SetPositionID(v)
	})
}

// UpdatePositionID sets the "position_id" field to the value that was provided on create.
func (u *PositionUpsertOne) UpdatePositionID() *PositionUpsertOne {
	return u.Update(func(s *PositionUpsert) {
		s.UpdatePositionID()
	})
}

// SetName sets the "name" field.
func (u *PositionUpsertOne) SetName(v string) *PositionUpsertOne {
	return u.Update(func(s *PositionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PositionUpsertOne) UpdateName() *PositionUpsertOne {
	return u.Update(func(s *PositionUpsert) {
		s.UpdateName()
	})
}

// SetDepartmentID sets the "department_id" field.
func (u *PositionUpsertOne) SetDepartmentID(v string) *PositionUpsertOne {
	return u.Update(func(s *PositionUpsert) {
		s.SetDepartmentID(v)
	})
}

// UpdateDepartmentID sets the "department_id" field to the value that was provided on create.
func (u *PositionUpsertOne) UpdateDepartmentID() *PositionUpsertOne {
	return u.Update(func(s *PositionUpsert) {
		s.UpdateDepartmentID()
	})
}

// SetDescription sets the "description" field.
func (u *PositionUpsertOne) SetDescription(v string) *PositionUpsertOne {
	return u.Update(func(s *PositionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PositionUpsertOne) UpdateDescription() *PositionUpsertOne {
	return u.Update(func(s *PositionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PositionUpsertOne) ClearDescription() *PositionUpsertOne {
	return u.Update(func(s *PositionUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *PositionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for PositionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PositionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PositionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PositionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PositionCreateBulk is the builder for creating many Position entities in bulk.
type PositionCreateBulk struct {
	config
	err      error
	builders []*PositionCreate
	conflict []sql.ConflictOption
}

// Save creates the Position entities in the database.
func (pcb *PositionCreateBulk) Save(ctx context.Context) ([]*Position, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Position, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PositionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PositionCreateBulk) SaveX(ctx context.Context) []*Position {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PositionCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PositionCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Position.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PositionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *PositionCreateBulk) OnConflict(opts ...sql.ConflictOption) *PositionUpsertBulk {
	pcb.conflict = opts
	return &PositionUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Position.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PositionCreateBulk) OnConflictColumns(columns ...string) *PositionUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PositionUpsertBulk{
		create: pcb,
	}
}

// PositionUpsertBulk is the builder for "upsert"-ing
// a bulk of Position nodes.
type PositionUpsertBulk struct {
	create *PositionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Position.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PositionUpsertBulk) UpdateNewValues() *PositionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(position.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Position.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PositionUpsertBulk) Ignore() *PositionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PositionUpsertBulk) DoNothing() *PositionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PositionCreateBulk.OnConflict
// documentation for more info.
func (u *PositionUpsertBulk) Update(set func(*PositionUpsert)) *PositionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PositionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PositionUpsertBulk) SetUpdatedAt(v int64) *PositionUpsertBulk {
	return u.Update(func(s *PositionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PositionUpsertBulk) AddUpdatedAt(v int64) *PositionUpsertBulk {
	return u.Update(func(s *PositionUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PositionUpsertBulk) UpdateUpdatedAt() *PositionUpsertBulk {
	return u.Update(func(s *PositionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PositionUpsertBulk) SetDeletedAt(v int64) *PositionUpsertBulk {
	return u.Update(func(s *PositionUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PositionUpsertBulk) AddDeletedAt(v int64) *PositionUpsertBulk {
	return u.Update(func(s *PositionUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PositionUpsertBulk) UpdateDeletedAt() *PositionUpsertBulk {
	return u.Update(func(s *PositionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PositionUpsertBulk) ClearDeletedAt() *PositionUpsertBulk {
	return u.Update(func(s *PositionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTenantCode sets the "tenant_code" field.
func (u *PositionUpsertBulk) SetTenantCode(v string) *PositionUpsertBulk {
	return u.Update(func(s *PositionUpsert) {
		s.SetTenantCode(v)
	})
}

// UpdateTenantCode sets the "tenant_code" field to the value that was provided on create.
func (u *PositionUpsertBulk) UpdateTenantCode() *PositionUpsertBulk {
	return u.Update(func(s *PositionUpsert) {
		s.UpdateTenantCode()
	})
}

// SetPositionID sets the "position_id" field.
func (u *PositionUpsertBulk) SetPositionID(v string) *PositionUpsertBulk {
	return u.Update(func(s *PositionUpsert) {
		s.SetPositionID(v)
	})
}

// UpdatePositionID sets the "position_id" field to the value that was provided on create.
func (u *PositionUpsertBulk) UpdatePositionID() *PositionUpsertBulk {
	return u.Update(func(s *PositionUpsert) {
		s.UpdatePositionID()
	})
}

// SetName sets the "name" field.
func (u *PositionUpsertBulk) SetName(v string) *PositionUpsertBulk {
	return u.Update(func(s *PositionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PositionUpsertBulk) UpdateName() *PositionUpsertBulk {
	return u.Update(func(s *PositionUpsert) {
		s.UpdateName()
	})
}

// SetDepartmentID sets the "department_id" field.
func (u *PositionUpsertBulk) SetDepartmentID(v string) *PositionUpsertBulk {
	return u.Update(func(s *PositionUpsert) {
		s.SetDepartmentID(v)
	})
}

// UpdateDepartmentID sets the "department_id" field to the value that was provided on create.
func (u *PositionUpsertBulk) UpdateDepartmentID() *PositionUpsertBulk {
	return u.Update(func(s *PositionUpsert) {
		s.UpdateDepartmentID()
	})
}

// SetDescription sets the "description" field.
func (u *PositionUpsertBulk) SetDescription(v string) *PositionUpsertBulk {
	return u.Update(func(s *PositionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PositionUpsertBulk) UpdateDescription() *PositionUpsertBulk {
	return u.Update(func(s *PositionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PositionUpsertBulk) ClearDescription() *PositionUpsertBulk {
	return u.Update(func(s *PositionUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *PositionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the PositionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for PositionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PositionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
