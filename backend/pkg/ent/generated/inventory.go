// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/inventory"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
)

// 库存记录
type Inventory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// 修改时间
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt *int64 `json:"deleted_at,omitempty"`
	// 租户code
	TenantCode string `json:"tenant_code,omitempty"`
	// 库存记录ID
	InventoryID string `json:"inventory_id,omitempty"`
	// 商品ID
	ProductID string `json:"product_id,omitempty"`
	// 操作类型: in-入库, out-出库
	OperationType string `json:"operation_type,omitempty"`
	// 操作数量
	Quantity int `json:"quantity,omitempty"`
	// 单价
	UnitPrice decimal.Decimal `json:"unit_price,omitempty"`
	// 总金额
	TotalAmount decimal.Decimal `json:"total_amount,omitempty"`
	// 操作人ID
	OperatorID string `json:"operator_id,omitempty"`
	// 备注
	Remark string `json:"remark,omitempty"`
	// 操作时间
	OperationTime int64 `json:"operation_time,omitempty"`
	// 操作前库存
	BeforeStock int `json:"before_stock,omitempty"`
	// 操作后库存
	AfterStock   int `json:"after_stock,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Inventory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case inventory.FieldUnitPrice, inventory.FieldTotalAmount:
			values[i] = new(decimal.Decimal)
		case inventory.FieldID, inventory.FieldCreatedAt, inventory.FieldUpdatedAt, inventory.FieldDeletedAt, inventory.FieldQuantity, inventory.FieldOperationTime, inventory.FieldBeforeStock, inventory.FieldAfterStock:
			values[i] = new(sql.NullInt64)
		case inventory.FieldTenantCode, inventory.FieldInventoryID, inventory.FieldProductID, inventory.FieldOperationType, inventory.FieldOperatorID, inventory.FieldRemark:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Inventory fields.
func (i *Inventory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case inventory.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case inventory.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Int64
			}
		case inventory.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Int64
			}
		case inventory.FieldDeletedAt:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[j])
			} else if value.Valid {
				i.DeletedAt = new(int64)
				*i.DeletedAt = value.Int64
			}
		case inventory.FieldTenantCode:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_code", values[j])
			} else if value.Valid {
				i.TenantCode = value.String
			}
		case inventory.FieldInventoryID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inventory_id", values[j])
			} else if value.Valid {
				i.InventoryID = value.String
			}
		case inventory.FieldProductID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[j])
			} else if value.Valid {
				i.ProductID = value.String
			}
		case inventory.FieldOperationType:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operation_type", values[j])
			} else if value.Valid {
				i.OperationType = value.String
			}
		case inventory.FieldQuantity:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[j])
			} else if value.Valid {
				i.Quantity = int(value.Int64)
			}
		case inventory.FieldUnitPrice:
			if value, ok := values[j].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field unit_price", values[j])
			} else if value != nil {
				i.UnitPrice = *value
			}
		case inventory.FieldTotalAmount:
			if value, ok := values[j].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field total_amount", values[j])
			} else if value != nil {
				i.TotalAmount = *value
			}
		case inventory.FieldOperatorID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operator_id", values[j])
			} else if value.Valid {
				i.OperatorID = value.String
			}
		case inventory.FieldRemark:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[j])
			} else if value.Valid {
				i.Remark = value.String
			}
		case inventory.FieldOperationTime:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operation_time", values[j])
			} else if value.Valid {
				i.OperationTime = value.Int64
			}
		case inventory.FieldBeforeStock:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field before_stock", values[j])
			} else if value.Valid {
				i.BeforeStock = int(value.Int64)
			}
		case inventory.FieldAfterStock:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field after_stock", values[j])
			} else if value.Valid {
				i.AfterStock = int(value.Int64)
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Inventory.
// This includes values selected through modifiers, order, etc.
func (i *Inventory) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// Update returns a builder for updating this Inventory.
// Note that you need to call Inventory.Unwrap() before calling this method if this Inventory
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Inventory) Update() *InventoryUpdateOne {
	return NewInventoryClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Inventory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Inventory) Unwrap() *Inventory {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("generated: Inventory is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Inventory) String() string {
	var builder strings.Builder
	builder.WriteString("Inventory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", i.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", i.UpdatedAt))
	builder.WriteString(", ")
	if v := i.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("tenant_code=")
	builder.WriteString(i.TenantCode)
	builder.WriteString(", ")
	builder.WriteString("inventory_id=")
	builder.WriteString(i.InventoryID)
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(i.ProductID)
	builder.WriteString(", ")
	builder.WriteString("operation_type=")
	builder.WriteString(i.OperationType)
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", i.Quantity))
	builder.WriteString(", ")
	builder.WriteString("unit_price=")
	builder.WriteString(fmt.Sprintf("%v", i.UnitPrice))
	builder.WriteString(", ")
	builder.WriteString("total_amount=")
	builder.WriteString(fmt.Sprintf("%v", i.TotalAmount))
	builder.WriteString(", ")
	builder.WriteString("operator_id=")
	builder.WriteString(i.OperatorID)
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(i.Remark)
	builder.WriteString(", ")
	builder.WriteString("operation_time=")
	builder.WriteString(fmt.Sprintf("%v", i.OperationTime))
	builder.WriteString(", ")
	builder.WriteString("before_stock=")
	builder.WriteString(fmt.Sprintf("%v", i.BeforeStock))
	builder.WriteString(", ")
	builder.WriteString("after_stock=")
	builder.WriteString(fmt.Sprintf("%v", i.AfterStock))
	builder.WriteByte(')')
	return builder.String()
}

// Inventories is a parsable slice of Inventory.
type Inventories []*Inventory
