// Code generated by ent, DO NOT EDIT.

package product

import (
	"admin_backend/pkg/ent/generated/predicate"

	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldDeletedAt, v))
}

// TenantCode applies equality check predicate on the "tenant_code" field. It's identical to TenantCodeEQ.
func TenantCode(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldTenantCode, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldProductID, v))
}

// ProductName applies equality check predicate on the "product_name" field. It's identical to ProductNameEQ.
func ProductName(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldProductName, v))
}

// Unit applies equality check predicate on the "unit" field. It's identical to UnitEQ.
func Unit(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldUnit, v))
}

// PurchasePrice applies equality check predicate on the "purchase_price" field. It's identical to PurchasePriceEQ.
func PurchasePrice(v decimal.Decimal) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldPurchasePrice, v))
}

// SalePrice applies equality check predicate on the "sale_price" field. It's identical to SalePriceEQ.
func SalePrice(v decimal.Decimal) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldSalePrice, v))
}

// CurrentStock applies equality check predicate on the "current_stock" field. It's identical to CurrentStockEQ.
func CurrentStock(v int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldCurrentStock, v))
}

// MinStock applies equality check predicate on the "min_stock" field. It's identical to MinStockEQ.
func MinStock(v int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldMinStock, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldStatus, v))
}

// FactoryID applies equality check predicate on the "factory_id" field. It's identical to FactoryIDEQ.
func FactoryID(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldFactoryID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v int64) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v int64) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldDeletedAt))
}

// TenantCodeEQ applies the EQ predicate on the "tenant_code" field.
func TenantCodeEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldTenantCode, v))
}

// TenantCodeNEQ applies the NEQ predicate on the "tenant_code" field.
func TenantCodeNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldTenantCode, v))
}

// TenantCodeIn applies the In predicate on the "tenant_code" field.
func TenantCodeIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldTenantCode, vs...))
}

// TenantCodeNotIn applies the NotIn predicate on the "tenant_code" field.
func TenantCodeNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldTenantCode, vs...))
}

// TenantCodeGT applies the GT predicate on the "tenant_code" field.
func TenantCodeGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldTenantCode, v))
}

// TenantCodeGTE applies the GTE predicate on the "tenant_code" field.
func TenantCodeGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldTenantCode, v))
}

// TenantCodeLT applies the LT predicate on the "tenant_code" field.
func TenantCodeLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldTenantCode, v))
}

// TenantCodeLTE applies the LTE predicate on the "tenant_code" field.
func TenantCodeLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldTenantCode, v))
}

// TenantCodeContains applies the Contains predicate on the "tenant_code" field.
func TenantCodeContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldTenantCode, v))
}

// TenantCodeHasPrefix applies the HasPrefix predicate on the "tenant_code" field.
func TenantCodeHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldTenantCode, v))
}

// TenantCodeHasSuffix applies the HasSuffix predicate on the "tenant_code" field.
func TenantCodeHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldTenantCode, v))
}

// TenantCodeEqualFold applies the EqualFold predicate on the "tenant_code" field.
func TenantCodeEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldTenantCode, v))
}

// TenantCodeContainsFold applies the ContainsFold predicate on the "tenant_code" field.
func TenantCodeContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldTenantCode, v))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldProductID, v))
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldProductID, v))
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldProductID, v))
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldProductID, v))
}

// ProductIDContains applies the Contains predicate on the "product_id" field.
func ProductIDContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldProductID, v))
}

// ProductIDHasPrefix applies the HasPrefix predicate on the "product_id" field.
func ProductIDHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldProductID, v))
}

// ProductIDHasSuffix applies the HasSuffix predicate on the "product_id" field.
func ProductIDHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldProductID, v))
}

// ProductIDEqualFold applies the EqualFold predicate on the "product_id" field.
func ProductIDEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldProductID, v))
}

// ProductIDContainsFold applies the ContainsFold predicate on the "product_id" field.
func ProductIDContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldProductID, v))
}

// ProductNameEQ applies the EQ predicate on the "product_name" field.
func ProductNameEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldProductName, v))
}

// ProductNameNEQ applies the NEQ predicate on the "product_name" field.
func ProductNameNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldProductName, v))
}

// ProductNameIn applies the In predicate on the "product_name" field.
func ProductNameIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldProductName, vs...))
}

// ProductNameNotIn applies the NotIn predicate on the "product_name" field.
func ProductNameNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldProductName, vs...))
}

// ProductNameGT applies the GT predicate on the "product_name" field.
func ProductNameGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldProductName, v))
}

// ProductNameGTE applies the GTE predicate on the "product_name" field.
func ProductNameGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldProductName, v))
}

// ProductNameLT applies the LT predicate on the "product_name" field.
func ProductNameLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldProductName, v))
}

// ProductNameLTE applies the LTE predicate on the "product_name" field.
func ProductNameLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldProductName, v))
}

// ProductNameContains applies the Contains predicate on the "product_name" field.
func ProductNameContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldProductName, v))
}

// ProductNameHasPrefix applies the HasPrefix predicate on the "product_name" field.
func ProductNameHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldProductName, v))
}

// ProductNameHasSuffix applies the HasSuffix predicate on the "product_name" field.
func ProductNameHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldProductName, v))
}

// ProductNameEqualFold applies the EqualFold predicate on the "product_name" field.
func ProductNameEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldProductName, v))
}

// ProductNameContainsFold applies the ContainsFold predicate on the "product_name" field.
func ProductNameContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldProductName, v))
}

// UnitEQ applies the EQ predicate on the "unit" field.
func UnitEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldUnit, v))
}

// UnitNEQ applies the NEQ predicate on the "unit" field.
func UnitNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldUnit, v))
}

// UnitIn applies the In predicate on the "unit" field.
func UnitIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldUnit, vs...))
}

// UnitNotIn applies the NotIn predicate on the "unit" field.
func UnitNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldUnit, vs...))
}

// UnitGT applies the GT predicate on the "unit" field.
func UnitGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldUnit, v))
}

// UnitGTE applies the GTE predicate on the "unit" field.
func UnitGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldUnit, v))
}

// UnitLT applies the LT predicate on the "unit" field.
func UnitLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldUnit, v))
}

// UnitLTE applies the LTE predicate on the "unit" field.
func UnitLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldUnit, v))
}

// UnitContains applies the Contains predicate on the "unit" field.
func UnitContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldUnit, v))
}

// UnitHasPrefix applies the HasPrefix predicate on the "unit" field.
func UnitHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldUnit, v))
}

// UnitHasSuffix applies the HasSuffix predicate on the "unit" field.
func UnitHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldUnit, v))
}

// UnitEqualFold applies the EqualFold predicate on the "unit" field.
func UnitEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldUnit, v))
}

// UnitContainsFold applies the ContainsFold predicate on the "unit" field.
func UnitContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldUnit, v))
}

// PurchasePriceEQ applies the EQ predicate on the "purchase_price" field.
func PurchasePriceEQ(v decimal.Decimal) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldPurchasePrice, v))
}

// PurchasePriceNEQ applies the NEQ predicate on the "purchase_price" field.
func PurchasePriceNEQ(v decimal.Decimal) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldPurchasePrice, v))
}

// PurchasePriceIn applies the In predicate on the "purchase_price" field.
func PurchasePriceIn(vs ...decimal.Decimal) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldPurchasePrice, vs...))
}

// PurchasePriceNotIn applies the NotIn predicate on the "purchase_price" field.
func PurchasePriceNotIn(vs ...decimal.Decimal) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldPurchasePrice, vs...))
}

// PurchasePriceGT applies the GT predicate on the "purchase_price" field.
func PurchasePriceGT(v decimal.Decimal) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldPurchasePrice, v))
}

// PurchasePriceGTE applies the GTE predicate on the "purchase_price" field.
func PurchasePriceGTE(v decimal.Decimal) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldPurchasePrice, v))
}

// PurchasePriceLT applies the LT predicate on the "purchase_price" field.
func PurchasePriceLT(v decimal.Decimal) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldPurchasePrice, v))
}

// PurchasePriceLTE applies the LTE predicate on the "purchase_price" field.
func PurchasePriceLTE(v decimal.Decimal) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldPurchasePrice, v))
}

// SalePriceEQ applies the EQ predicate on the "sale_price" field.
func SalePriceEQ(v decimal.Decimal) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldSalePrice, v))
}

// SalePriceNEQ applies the NEQ predicate on the "sale_price" field.
func SalePriceNEQ(v decimal.Decimal) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldSalePrice, v))
}

// SalePriceIn applies the In predicate on the "sale_price" field.
func SalePriceIn(vs ...decimal.Decimal) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldSalePrice, vs...))
}

// SalePriceNotIn applies the NotIn predicate on the "sale_price" field.
func SalePriceNotIn(vs ...decimal.Decimal) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldSalePrice, vs...))
}

// SalePriceGT applies the GT predicate on the "sale_price" field.
func SalePriceGT(v decimal.Decimal) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldSalePrice, v))
}

// SalePriceGTE applies the GTE predicate on the "sale_price" field.
func SalePriceGTE(v decimal.Decimal) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldSalePrice, v))
}

// SalePriceLT applies the LT predicate on the "sale_price" field.
func SalePriceLT(v decimal.Decimal) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldSalePrice, v))
}

// SalePriceLTE applies the LTE predicate on the "sale_price" field.
func SalePriceLTE(v decimal.Decimal) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldSalePrice, v))
}

// CurrentStockEQ applies the EQ predicate on the "current_stock" field.
func CurrentStockEQ(v int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldCurrentStock, v))
}

// CurrentStockNEQ applies the NEQ predicate on the "current_stock" field.
func CurrentStockNEQ(v int) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldCurrentStock, v))
}

// CurrentStockIn applies the In predicate on the "current_stock" field.
func CurrentStockIn(vs ...int) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldCurrentStock, vs...))
}

// CurrentStockNotIn applies the NotIn predicate on the "current_stock" field.
func CurrentStockNotIn(vs ...int) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldCurrentStock, vs...))
}

// CurrentStockGT applies the GT predicate on the "current_stock" field.
func CurrentStockGT(v int) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldCurrentStock, v))
}

// CurrentStockGTE applies the GTE predicate on the "current_stock" field.
func CurrentStockGTE(v int) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldCurrentStock, v))
}

// CurrentStockLT applies the LT predicate on the "current_stock" field.
func CurrentStockLT(v int) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldCurrentStock, v))
}

// CurrentStockLTE applies the LTE predicate on the "current_stock" field.
func CurrentStockLTE(v int) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldCurrentStock, v))
}

// MinStockEQ applies the EQ predicate on the "min_stock" field.
func MinStockEQ(v int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldMinStock, v))
}

// MinStockNEQ applies the NEQ predicate on the "min_stock" field.
func MinStockNEQ(v int) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldMinStock, v))
}

// MinStockIn applies the In predicate on the "min_stock" field.
func MinStockIn(vs ...int) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldMinStock, vs...))
}

// MinStockNotIn applies the NotIn predicate on the "min_stock" field.
func MinStockNotIn(vs ...int) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldMinStock, vs...))
}

// MinStockGT applies the GT predicate on the "min_stock" field.
func MinStockGT(v int) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldMinStock, v))
}

// MinStockGTE applies the GTE predicate on the "min_stock" field.
func MinStockGTE(v int) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldMinStock, v))
}

// MinStockLT applies the LT predicate on the "min_stock" field.
func MinStockLT(v int) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldMinStock, v))
}

// MinStockLTE applies the LTE predicate on the "min_stock" field.
func MinStockLTE(v int) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldMinStock, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldStatus, v))
}

// FactoryIDEQ applies the EQ predicate on the "factory_id" field.
func FactoryIDEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldFactoryID, v))
}

// FactoryIDNEQ applies the NEQ predicate on the "factory_id" field.
func FactoryIDNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldFactoryID, v))
}

// FactoryIDIn applies the In predicate on the "factory_id" field.
func FactoryIDIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldFactoryID, vs...))
}

// FactoryIDNotIn applies the NotIn predicate on the "factory_id" field.
func FactoryIDNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldFactoryID, vs...))
}

// FactoryIDGT applies the GT predicate on the "factory_id" field.
func FactoryIDGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldFactoryID, v))
}

// FactoryIDGTE applies the GTE predicate on the "factory_id" field.
func FactoryIDGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldFactoryID, v))
}

// FactoryIDLT applies the LT predicate on the "factory_id" field.
func FactoryIDLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldFactoryID, v))
}

// FactoryIDLTE applies the LTE predicate on the "factory_id" field.
func FactoryIDLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldFactoryID, v))
}

// FactoryIDContains applies the Contains predicate on the "factory_id" field.
func FactoryIDContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldFactoryID, v))
}

// FactoryIDHasPrefix applies the HasPrefix predicate on the "factory_id" field.
func FactoryIDHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldFactoryID, v))
}

// FactoryIDHasSuffix applies the HasSuffix predicate on the "factory_id" field.
func FactoryIDHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldFactoryID, v))
}

// FactoryIDIsNil applies the IsNil predicate on the "factory_id" field.
func FactoryIDIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldFactoryID))
}

// FactoryIDNotNil applies the NotNil predicate on the "factory_id" field.
func FactoryIDNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldFactoryID))
}

// FactoryIDEqualFold applies the EqualFold predicate on the "factory_id" field.
func FactoryIDEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldFactoryID, v))
}

// FactoryIDContainsFold applies the ContainsFold predicate on the "factory_id" field.
func FactoryIDContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldFactoryID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Product) predicate.Product {
	return predicate.Product(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Product) predicate.Product {
	return predicate.Product(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Product) predicate.Product {
	return predicate.Product(sql.NotPredicates(p))
}
