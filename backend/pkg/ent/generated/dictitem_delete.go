// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/dictitem"
	"admin_backend/pkg/ent/generated/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DictItemDelete is the builder for deleting a DictItem entity.
type DictItemDelete struct {
	config
	hooks    []Hook
	mutation *DictItemMutation
}

// Where appends a list predicates to the DictItemDelete builder.
func (did *DictItemDelete) Where(ps ...predicate.DictItem) *DictItemDelete {
	did.mutation.Where(ps...)
	return did
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (did *DictItemDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, did.sqlExec, did.mutation, did.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (did *DictItemDelete) ExecX(ctx context.Context) int {
	n, err := did.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (did *DictItemDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(dictitem.Table, sqlgraph.NewFieldSpec(dictitem.FieldID, field.TypeInt))
	if ps := did.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, did.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	did.mutation.done = true
	return affected, err
}

// DictItemDeleteOne is the builder for deleting a single DictItem entity.
type DictItemDeleteOne struct {
	did *DictItemDelete
}

// Where appends a list predicates to the DictItemDelete builder.
func (dido *DictItemDeleteOne) Where(ps ...predicate.DictItem) *DictItemDeleteOne {
	dido.did.mutation.Where(ps...)
	return dido
}

// Exec executes the deletion query.
func (dido *DictItemDeleteOne) Exec(ctx context.Context) error {
	n, err := dido.did.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{dictitem.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (dido *DictItemDeleteOne) ExecX(ctx context.Context) {
	if err := dido.Exec(ctx); err != nil {
		panic(err)
	}
}
