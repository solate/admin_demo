// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/factory"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 工厂
type Factory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// 修改时间
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt *int64 `json:"deleted_at,omitempty"`
	// 租户code
	TenantCode string `json:"tenant_code,omitempty"`
	// 工厂ID
	FactoryID string `json:"factory_id,omitempty"`
	// 工厂名称
	FactoryName string `json:"factory_name,omitempty"`
	// 工厂地址
	Address string `json:"address,omitempty"`
	// 联系电话
	ContactPhone string `json:"contact_phone,omitempty"`
	// 状态: 1:启用, 2:禁用
	Status       int `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Factory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case factory.FieldID, factory.FieldCreatedAt, factory.FieldUpdatedAt, factory.FieldDeletedAt, factory.FieldStatus:
			values[i] = new(sql.NullInt64)
		case factory.FieldTenantCode, factory.FieldFactoryID, factory.FieldFactoryName, factory.FieldAddress, factory.FieldContactPhone:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Factory fields.
func (f *Factory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case factory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case factory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Int64
			}
		case factory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				f.UpdatedAt = value.Int64
			}
		case factory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				f.DeletedAt = new(int64)
				*f.DeletedAt = value.Int64
			}
		case factory.FieldTenantCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_code", values[i])
			} else if value.Valid {
				f.TenantCode = value.String
			}
		case factory.FieldFactoryID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field factory_id", values[i])
			} else if value.Valid {
				f.FactoryID = value.String
			}
		case factory.FieldFactoryName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field factory_name", values[i])
			} else if value.Valid {
				f.FactoryName = value.String
			}
		case factory.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				f.Address = value.String
			}
		case factory.FieldContactPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_phone", values[i])
			} else if value.Valid {
				f.ContactPhone = value.String
			}
		case factory.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				f.Status = int(value.Int64)
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Factory.
// This includes values selected through modifiers, order, etc.
func (f *Factory) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// Update returns a builder for updating this Factory.
// Note that you need to call Factory.Unwrap() before calling this method if this Factory
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Factory) Update() *FactoryUpdateOne {
	return NewFactoryClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Factory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Factory) Unwrap() *Factory {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("generated: Factory is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Factory) String() string {
	var builder strings.Builder
	builder.WriteString("Factory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", f.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", f.UpdatedAt))
	builder.WriteString(", ")
	if v := f.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("tenant_code=")
	builder.WriteString(f.TenantCode)
	builder.WriteString(", ")
	builder.WriteString("factory_id=")
	builder.WriteString(f.FactoryID)
	builder.WriteString(", ")
	builder.WriteString("factory_name=")
	builder.WriteString(f.FactoryName)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(f.Address)
	builder.WriteString(", ")
	builder.WriteString("contact_phone=")
	builder.WriteString(f.ContactPhone)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", f.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Factories is a parsable slice of Factory.
type Factories []*Factory
