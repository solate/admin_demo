// Code generated by ent, DO NOT EDIT.

package factory

import (
	"admin_backend/pkg/ent/generated/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Factory {
	return predicate.Factory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Factory {
	return predicate.Factory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Factory {
	return predicate.Factory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Factory {
	return predicate.Factory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Factory {
	return predicate.Factory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Factory {
	return predicate.Factory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Factory {
	return predicate.Factory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Factory {
	return predicate.Factory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Factory {
	return predicate.Factory(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Factory {
	return predicate.Factory(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Factory {
	return predicate.Factory(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v int64) predicate.Factory {
	return predicate.Factory(sql.FieldEQ(FieldDeletedAt, v))
}

// TenantCode applies equality check predicate on the "tenant_code" field. It's identical to TenantCodeEQ.
func TenantCode(v string) predicate.Factory {
	return predicate.Factory(sql.FieldEQ(FieldTenantCode, v))
}

// FactoryID applies equality check predicate on the "factory_id" field. It's identical to FactoryIDEQ.
func FactoryID(v string) predicate.Factory {
	return predicate.Factory(sql.FieldEQ(FieldFactoryID, v))
}

// FactoryName applies equality check predicate on the "factory_name" field. It's identical to FactoryNameEQ.
func FactoryName(v string) predicate.Factory {
	return predicate.Factory(sql.FieldEQ(FieldFactoryName, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Factory {
	return predicate.Factory(sql.FieldEQ(FieldAddress, v))
}

// ContactPhone applies equality check predicate on the "contact_phone" field. It's identical to ContactPhoneEQ.
func ContactPhone(v string) predicate.Factory {
	return predicate.Factory(sql.FieldEQ(FieldContactPhone, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.Factory {
	return predicate.Factory(sql.FieldEQ(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.Factory {
	return predicate.Factory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.Factory {
	return predicate.Factory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.Factory {
	return predicate.Factory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.Factory {
	return predicate.Factory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.Factory {
	return predicate.Factory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.Factory {
	return predicate.Factory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.Factory {
	return predicate.Factory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.Factory {
	return predicate.Factory(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.Factory {
	return predicate.Factory(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.Factory {
	return predicate.Factory(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.Factory {
	return predicate.Factory(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.Factory {
	return predicate.Factory(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.Factory {
	return predicate.Factory(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.Factory {
	return predicate.Factory(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.Factory {
	return predicate.Factory(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.Factory {
	return predicate.Factory(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v int64) predicate.Factory {
	return predicate.Factory(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v int64) predicate.Factory {
	return predicate.Factory(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...int64) predicate.Factory {
	return predicate.Factory(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...int64) predicate.Factory {
	return predicate.Factory(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v int64) predicate.Factory {
	return predicate.Factory(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v int64) predicate.Factory {
	return predicate.Factory(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v int64) predicate.Factory {
	return predicate.Factory(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v int64) predicate.Factory {
	return predicate.Factory(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Factory {
	return predicate.Factory(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Factory {
	return predicate.Factory(sql.FieldNotNull(FieldDeletedAt))
}

// TenantCodeEQ applies the EQ predicate on the "tenant_code" field.
func TenantCodeEQ(v string) predicate.Factory {
	return predicate.Factory(sql.FieldEQ(FieldTenantCode, v))
}

// TenantCodeNEQ applies the NEQ predicate on the "tenant_code" field.
func TenantCodeNEQ(v string) predicate.Factory {
	return predicate.Factory(sql.FieldNEQ(FieldTenantCode, v))
}

// TenantCodeIn applies the In predicate on the "tenant_code" field.
func TenantCodeIn(vs ...string) predicate.Factory {
	return predicate.Factory(sql.FieldIn(FieldTenantCode, vs...))
}

// TenantCodeNotIn applies the NotIn predicate on the "tenant_code" field.
func TenantCodeNotIn(vs ...string) predicate.Factory {
	return predicate.Factory(sql.FieldNotIn(FieldTenantCode, vs...))
}

// TenantCodeGT applies the GT predicate on the "tenant_code" field.
func TenantCodeGT(v string) predicate.Factory {
	return predicate.Factory(sql.FieldGT(FieldTenantCode, v))
}

// TenantCodeGTE applies the GTE predicate on the "tenant_code" field.
func TenantCodeGTE(v string) predicate.Factory {
	return predicate.Factory(sql.FieldGTE(FieldTenantCode, v))
}

// TenantCodeLT applies the LT predicate on the "tenant_code" field.
func TenantCodeLT(v string) predicate.Factory {
	return predicate.Factory(sql.FieldLT(FieldTenantCode, v))
}

// TenantCodeLTE applies the LTE predicate on the "tenant_code" field.
func TenantCodeLTE(v string) predicate.Factory {
	return predicate.Factory(sql.FieldLTE(FieldTenantCode, v))
}

// TenantCodeContains applies the Contains predicate on the "tenant_code" field.
func TenantCodeContains(v string) predicate.Factory {
	return predicate.Factory(sql.FieldContains(FieldTenantCode, v))
}

// TenantCodeHasPrefix applies the HasPrefix predicate on the "tenant_code" field.
func TenantCodeHasPrefix(v string) predicate.Factory {
	return predicate.Factory(sql.FieldHasPrefix(FieldTenantCode, v))
}

// TenantCodeHasSuffix applies the HasSuffix predicate on the "tenant_code" field.
func TenantCodeHasSuffix(v string) predicate.Factory {
	return predicate.Factory(sql.FieldHasSuffix(FieldTenantCode, v))
}

// TenantCodeEqualFold applies the EqualFold predicate on the "tenant_code" field.
func TenantCodeEqualFold(v string) predicate.Factory {
	return predicate.Factory(sql.FieldEqualFold(FieldTenantCode, v))
}

// TenantCodeContainsFold applies the ContainsFold predicate on the "tenant_code" field.
func TenantCodeContainsFold(v string) predicate.Factory {
	return predicate.Factory(sql.FieldContainsFold(FieldTenantCode, v))
}

// FactoryIDEQ applies the EQ predicate on the "factory_id" field.
func FactoryIDEQ(v string) predicate.Factory {
	return predicate.Factory(sql.FieldEQ(FieldFactoryID, v))
}

// FactoryIDNEQ applies the NEQ predicate on the "factory_id" field.
func FactoryIDNEQ(v string) predicate.Factory {
	return predicate.Factory(sql.FieldNEQ(FieldFactoryID, v))
}

// FactoryIDIn applies the In predicate on the "factory_id" field.
func FactoryIDIn(vs ...string) predicate.Factory {
	return predicate.Factory(sql.FieldIn(FieldFactoryID, vs...))
}

// FactoryIDNotIn applies the NotIn predicate on the "factory_id" field.
func FactoryIDNotIn(vs ...string) predicate.Factory {
	return predicate.Factory(sql.FieldNotIn(FieldFactoryID, vs...))
}

// FactoryIDGT applies the GT predicate on the "factory_id" field.
func FactoryIDGT(v string) predicate.Factory {
	return predicate.Factory(sql.FieldGT(FieldFactoryID, v))
}

// FactoryIDGTE applies the GTE predicate on the "factory_id" field.
func FactoryIDGTE(v string) predicate.Factory {
	return predicate.Factory(sql.FieldGTE(FieldFactoryID, v))
}

// FactoryIDLT applies the LT predicate on the "factory_id" field.
func FactoryIDLT(v string) predicate.Factory {
	return predicate.Factory(sql.FieldLT(FieldFactoryID, v))
}

// FactoryIDLTE applies the LTE predicate on the "factory_id" field.
func FactoryIDLTE(v string) predicate.Factory {
	return predicate.Factory(sql.FieldLTE(FieldFactoryID, v))
}

// FactoryIDContains applies the Contains predicate on the "factory_id" field.
func FactoryIDContains(v string) predicate.Factory {
	return predicate.Factory(sql.FieldContains(FieldFactoryID, v))
}

// FactoryIDHasPrefix applies the HasPrefix predicate on the "factory_id" field.
func FactoryIDHasPrefix(v string) predicate.Factory {
	return predicate.Factory(sql.FieldHasPrefix(FieldFactoryID, v))
}

// FactoryIDHasSuffix applies the HasSuffix predicate on the "factory_id" field.
func FactoryIDHasSuffix(v string) predicate.Factory {
	return predicate.Factory(sql.FieldHasSuffix(FieldFactoryID, v))
}

// FactoryIDEqualFold applies the EqualFold predicate on the "factory_id" field.
func FactoryIDEqualFold(v string) predicate.Factory {
	return predicate.Factory(sql.FieldEqualFold(FieldFactoryID, v))
}

// FactoryIDContainsFold applies the ContainsFold predicate on the "factory_id" field.
func FactoryIDContainsFold(v string) predicate.Factory {
	return predicate.Factory(sql.FieldContainsFold(FieldFactoryID, v))
}

// FactoryNameEQ applies the EQ predicate on the "factory_name" field.
func FactoryNameEQ(v string) predicate.Factory {
	return predicate.Factory(sql.FieldEQ(FieldFactoryName, v))
}

// FactoryNameNEQ applies the NEQ predicate on the "factory_name" field.
func FactoryNameNEQ(v string) predicate.Factory {
	return predicate.Factory(sql.FieldNEQ(FieldFactoryName, v))
}

// FactoryNameIn applies the In predicate on the "factory_name" field.
func FactoryNameIn(vs ...string) predicate.Factory {
	return predicate.Factory(sql.FieldIn(FieldFactoryName, vs...))
}

// FactoryNameNotIn applies the NotIn predicate on the "factory_name" field.
func FactoryNameNotIn(vs ...string) predicate.Factory {
	return predicate.Factory(sql.FieldNotIn(FieldFactoryName, vs...))
}

// FactoryNameGT applies the GT predicate on the "factory_name" field.
func FactoryNameGT(v string) predicate.Factory {
	return predicate.Factory(sql.FieldGT(FieldFactoryName, v))
}

// FactoryNameGTE applies the GTE predicate on the "factory_name" field.
func FactoryNameGTE(v string) predicate.Factory {
	return predicate.Factory(sql.FieldGTE(FieldFactoryName, v))
}

// FactoryNameLT applies the LT predicate on the "factory_name" field.
func FactoryNameLT(v string) predicate.Factory {
	return predicate.Factory(sql.FieldLT(FieldFactoryName, v))
}

// FactoryNameLTE applies the LTE predicate on the "factory_name" field.
func FactoryNameLTE(v string) predicate.Factory {
	return predicate.Factory(sql.FieldLTE(FieldFactoryName, v))
}

// FactoryNameContains applies the Contains predicate on the "factory_name" field.
func FactoryNameContains(v string) predicate.Factory {
	return predicate.Factory(sql.FieldContains(FieldFactoryName, v))
}

// FactoryNameHasPrefix applies the HasPrefix predicate on the "factory_name" field.
func FactoryNameHasPrefix(v string) predicate.Factory {
	return predicate.Factory(sql.FieldHasPrefix(FieldFactoryName, v))
}

// FactoryNameHasSuffix applies the HasSuffix predicate on the "factory_name" field.
func FactoryNameHasSuffix(v string) predicate.Factory {
	return predicate.Factory(sql.FieldHasSuffix(FieldFactoryName, v))
}

// FactoryNameEqualFold applies the EqualFold predicate on the "factory_name" field.
func FactoryNameEqualFold(v string) predicate.Factory {
	return predicate.Factory(sql.FieldEqualFold(FieldFactoryName, v))
}

// FactoryNameContainsFold applies the ContainsFold predicate on the "factory_name" field.
func FactoryNameContainsFold(v string) predicate.Factory {
	return predicate.Factory(sql.FieldContainsFold(FieldFactoryName, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Factory {
	return predicate.Factory(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Factory {
	return predicate.Factory(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Factory {
	return predicate.Factory(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Factory {
	return predicate.Factory(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Factory {
	return predicate.Factory(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Factory {
	return predicate.Factory(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Factory {
	return predicate.Factory(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Factory {
	return predicate.Factory(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Factory {
	return predicate.Factory(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Factory {
	return predicate.Factory(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Factory {
	return predicate.Factory(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Factory {
	return predicate.Factory(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Factory {
	return predicate.Factory(sql.FieldContainsFold(FieldAddress, v))
}

// ContactPhoneEQ applies the EQ predicate on the "contact_phone" field.
func ContactPhoneEQ(v string) predicate.Factory {
	return predicate.Factory(sql.FieldEQ(FieldContactPhone, v))
}

// ContactPhoneNEQ applies the NEQ predicate on the "contact_phone" field.
func ContactPhoneNEQ(v string) predicate.Factory {
	return predicate.Factory(sql.FieldNEQ(FieldContactPhone, v))
}

// ContactPhoneIn applies the In predicate on the "contact_phone" field.
func ContactPhoneIn(vs ...string) predicate.Factory {
	return predicate.Factory(sql.FieldIn(FieldContactPhone, vs...))
}

// ContactPhoneNotIn applies the NotIn predicate on the "contact_phone" field.
func ContactPhoneNotIn(vs ...string) predicate.Factory {
	return predicate.Factory(sql.FieldNotIn(FieldContactPhone, vs...))
}

// ContactPhoneGT applies the GT predicate on the "contact_phone" field.
func ContactPhoneGT(v string) predicate.Factory {
	return predicate.Factory(sql.FieldGT(FieldContactPhone, v))
}

// ContactPhoneGTE applies the GTE predicate on the "contact_phone" field.
func ContactPhoneGTE(v string) predicate.Factory {
	return predicate.Factory(sql.FieldGTE(FieldContactPhone, v))
}

// ContactPhoneLT applies the LT predicate on the "contact_phone" field.
func ContactPhoneLT(v string) predicate.Factory {
	return predicate.Factory(sql.FieldLT(FieldContactPhone, v))
}

// ContactPhoneLTE applies the LTE predicate on the "contact_phone" field.
func ContactPhoneLTE(v string) predicate.Factory {
	return predicate.Factory(sql.FieldLTE(FieldContactPhone, v))
}

// ContactPhoneContains applies the Contains predicate on the "contact_phone" field.
func ContactPhoneContains(v string) predicate.Factory {
	return predicate.Factory(sql.FieldContains(FieldContactPhone, v))
}

// ContactPhoneHasPrefix applies the HasPrefix predicate on the "contact_phone" field.
func ContactPhoneHasPrefix(v string) predicate.Factory {
	return predicate.Factory(sql.FieldHasPrefix(FieldContactPhone, v))
}

// ContactPhoneHasSuffix applies the HasSuffix predicate on the "contact_phone" field.
func ContactPhoneHasSuffix(v string) predicate.Factory {
	return predicate.Factory(sql.FieldHasSuffix(FieldContactPhone, v))
}

// ContactPhoneEqualFold applies the EqualFold predicate on the "contact_phone" field.
func ContactPhoneEqualFold(v string) predicate.Factory {
	return predicate.Factory(sql.FieldEqualFold(FieldContactPhone, v))
}

// ContactPhoneContainsFold applies the ContainsFold predicate on the "contact_phone" field.
func ContactPhoneContainsFold(v string) predicate.Factory {
	return predicate.Factory(sql.FieldContainsFold(FieldContactPhone, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.Factory {
	return predicate.Factory(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.Factory {
	return predicate.Factory(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.Factory {
	return predicate.Factory(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.Factory {
	return predicate.Factory(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.Factory {
	return predicate.Factory(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.Factory {
	return predicate.Factory(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.Factory {
	return predicate.Factory(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.Factory {
	return predicate.Factory(sql.FieldLTE(FieldStatus, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Factory) predicate.Factory {
	return predicate.Factory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Factory) predicate.Factory {
	return predicate.Factory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Factory) predicate.Factory {
	return predicate.Factory(sql.NotPredicates(p))
}
