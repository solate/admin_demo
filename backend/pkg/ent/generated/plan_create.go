// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/plan"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlanCreate is the builder for creating a Plan entity.
type PlanCreate struct {
	config
	mutation *PlanMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *PlanCreate) SetCreatedAt(i int64) *PlanCreate {
	pc.mutation.SetCreatedAt(i)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PlanCreate) SetNillableCreatedAt(i *int64) *PlanCreate {
	if i != nil {
		pc.SetCreatedAt(*i)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PlanCreate) SetUpdatedAt(i int64) *PlanCreate {
	pc.mutation.SetUpdatedAt(i)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PlanCreate) SetNillableUpdatedAt(i *int64) *PlanCreate {
	if i != nil {
		pc.SetUpdatedAt(*i)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *PlanCreate) SetDeletedAt(i int64) *PlanCreate {
	pc.mutation.SetDeletedAt(i)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *PlanCreate) SetNillableDeletedAt(i *int64) *PlanCreate {
	if i != nil {
		pc.SetDeletedAt(*i)
	}
	return pc
}

// SetTenantCode sets the "tenant_code" field.
func (pc *PlanCreate) SetTenantCode(s string) *PlanCreate {
	pc.mutation.SetTenantCode(s)
	return pc
}

// SetPlanID sets the "plan_id" field.
func (pc *PlanCreate) SetPlanID(s string) *PlanCreate {
	pc.mutation.SetPlanID(s)
	return pc
}

// SetName sets the "name" field.
func (pc *PlanCreate) SetName(s string) *PlanCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetDescription sets the "description" field.
func (pc *PlanCreate) SetDescription(s string) *PlanCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pc *PlanCreate) SetNillableDescription(s *string) *PlanCreate {
	if s != nil {
		pc.SetDescription(*s)
	}
	return pc
}

// SetGroup sets the "group" field.
func (pc *PlanCreate) SetGroup(s string) *PlanCreate {
	pc.mutation.SetGroup(s)
	return pc
}

// SetNillableGroup sets the "group" field if the given value is not nil.
func (pc *PlanCreate) SetNillableGroup(s *string) *PlanCreate {
	if s != nil {
		pc.SetGroup(*s)
	}
	return pc
}

// SetCronSpec sets the "cron_spec" field.
func (pc *PlanCreate) SetCronSpec(s string) *PlanCreate {
	pc.mutation.SetCronSpec(s)
	return pc
}

// SetStatus sets the "status" field.
func (pc *PlanCreate) SetStatus(i int) *PlanCreate {
	pc.mutation.SetStatus(i)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *PlanCreate) SetNillableStatus(i *int) *PlanCreate {
	if i != nil {
		pc.SetStatus(*i)
	}
	return pc
}

// SetPlanType sets the "plan_type" field.
func (pc *PlanCreate) SetPlanType(s string) *PlanCreate {
	pc.mutation.SetPlanType(s)
	return pc
}

// SetPriority sets the "priority" field.
func (pc *PlanCreate) SetPriority(i int) *PlanCreate {
	pc.mutation.SetPriority(i)
	return pc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (pc *PlanCreate) SetNillablePriority(i *int) *PlanCreate {
	if i != nil {
		pc.SetPriority(*i)
	}
	return pc
}

// SetTimeout sets the "timeout" field.
func (pc *PlanCreate) SetTimeout(i int) *PlanCreate {
	pc.mutation.SetTimeout(i)
	return pc
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (pc *PlanCreate) SetNillableTimeout(i *int) *PlanCreate {
	if i != nil {
		pc.SetTimeout(*i)
	}
	return pc
}

// SetRetryTimes sets the "retry_times" field.
func (pc *PlanCreate) SetRetryTimes(i int) *PlanCreate {
	pc.mutation.SetRetryTimes(i)
	return pc
}

// SetNillableRetryTimes sets the "retry_times" field if the given value is not nil.
func (pc *PlanCreate) SetNillableRetryTimes(i *int) *PlanCreate {
	if i != nil {
		pc.SetRetryTimes(*i)
	}
	return pc
}

// SetRetryInterval sets the "retry_interval" field.
func (pc *PlanCreate) SetRetryInterval(i int) *PlanCreate {
	pc.mutation.SetRetryInterval(i)
	return pc
}

// SetNillableRetryInterval sets the "retry_interval" field if the given value is not nil.
func (pc *PlanCreate) SetNillableRetryInterval(i *int) *PlanCreate {
	if i != nil {
		pc.SetRetryInterval(*i)
	}
	return pc
}

// SetStartTime sets the "start_time" field.
func (pc *PlanCreate) SetStartTime(i int64) *PlanCreate {
	pc.mutation.SetStartTime(i)
	return pc
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (pc *PlanCreate) SetNillableStartTime(i *int64) *PlanCreate {
	if i != nil {
		pc.SetStartTime(*i)
	}
	return pc
}

// SetEndTime sets the "end_time" field.
func (pc *PlanCreate) SetEndTime(i int64) *PlanCreate {
	pc.mutation.SetEndTime(i)
	return pc
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (pc *PlanCreate) SetNillableEndTime(i *int64) *PlanCreate {
	if i != nil {
		pc.SetEndTime(*i)
	}
	return pc
}

// SetCommand sets the "command" field.
func (pc *PlanCreate) SetCommand(s string) *PlanCreate {
	pc.mutation.SetCommand(s)
	return pc
}

// SetParams sets the "params" field.
func (pc *PlanCreate) SetParams(s string) *PlanCreate {
	pc.mutation.SetParams(s)
	return pc
}

// SetNillableParams sets the "params" field if the given value is not nil.
func (pc *PlanCreate) SetNillableParams(s *string) *PlanCreate {
	if s != nil {
		pc.SetParams(*s)
	}
	return pc
}

// Mutation returns the PlanMutation object of the builder.
func (pc *PlanCreate) Mutation() *PlanMutation {
	return pc.mutation
}

// Save creates the Plan in the database.
func (pc *PlanCreate) Save(ctx context.Context) (*Plan, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PlanCreate) SaveX(ctx context.Context) *Plan {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PlanCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PlanCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PlanCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := plan.DefaultCreatedAt
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := plan.DefaultUpdatedAt
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.Group(); !ok {
		v := plan.DefaultGroup
		pc.mutation.SetGroup(v)
	}
	if _, ok := pc.mutation.Status(); !ok {
		v := plan.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	if _, ok := pc.mutation.Priority(); !ok {
		v := plan.DefaultPriority
		pc.mutation.SetPriority(v)
	}
	if _, ok := pc.mutation.Timeout(); !ok {
		v := plan.DefaultTimeout
		pc.mutation.SetTimeout(v)
	}
	if _, ok := pc.mutation.RetryTimes(); !ok {
		v := plan.DefaultRetryTimes
		pc.mutation.SetRetryTimes(v)
	}
	if _, ok := pc.mutation.RetryInterval(); !ok {
		v := plan.DefaultRetryInterval
		pc.mutation.SetRetryInterval(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PlanCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Plan.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "Plan.updated_at"`)}
	}
	if _, ok := pc.mutation.TenantCode(); !ok {
		return &ValidationError{Name: "tenant_code", err: errors.New(`generated: missing required field "Plan.tenant_code"`)}
	}
	if _, ok := pc.mutation.PlanID(); !ok {
		return &ValidationError{Name: "plan_id", err: errors.New(`generated: missing required field "Plan.plan_id"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Plan.name"`)}
	}
	if _, ok := pc.mutation.Group(); !ok {
		return &ValidationError{Name: "group", err: errors.New(`generated: missing required field "Plan.group"`)}
	}
	if _, ok := pc.mutation.CronSpec(); !ok {
		return &ValidationError{Name: "cron_spec", err: errors.New(`generated: missing required field "Plan.cron_spec"`)}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "Plan.status"`)}
	}
	if _, ok := pc.mutation.PlanType(); !ok {
		return &ValidationError{Name: "plan_type", err: errors.New(`generated: missing required field "Plan.plan_type"`)}
	}
	if _, ok := pc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`generated: missing required field "Plan.priority"`)}
	}
	if _, ok := pc.mutation.Timeout(); !ok {
		return &ValidationError{Name: "timeout", err: errors.New(`generated: missing required field "Plan.timeout"`)}
	}
	if _, ok := pc.mutation.RetryTimes(); !ok {
		return &ValidationError{Name: "retry_times", err: errors.New(`generated: missing required field "Plan.retry_times"`)}
	}
	if _, ok := pc.mutation.RetryInterval(); !ok {
		return &ValidationError{Name: "retry_interval", err: errors.New(`generated: missing required field "Plan.retry_interval"`)}
	}
	if _, ok := pc.mutation.Command(); !ok {
		return &ValidationError{Name: "command", err: errors.New(`generated: missing required field "Plan.command"`)}
	}
	return nil
}

func (pc *PlanCreate) sqlSave(ctx context.Context) (*Plan, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PlanCreate) createSpec() (*Plan, *sqlgraph.CreateSpec) {
	var (
		_node = &Plan{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(plan.Table, sqlgraph.NewFieldSpec(plan.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(plan.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(plan.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.SetField(plan.FieldDeletedAt, field.TypeInt64, value)
		_node.DeletedAt = &value
	}
	if value, ok := pc.mutation.TenantCode(); ok {
		_spec.SetField(plan.FieldTenantCode, field.TypeString, value)
		_node.TenantCode = value
	}
	if value, ok := pc.mutation.PlanID(); ok {
		_spec.SetField(plan.FieldPlanID, field.TypeString, value)
		_node.PlanID = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(plan.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(plan.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.Group(); ok {
		_spec.SetField(plan.FieldGroup, field.TypeString, value)
		_node.Group = value
	}
	if value, ok := pc.mutation.CronSpec(); ok {
		_spec.SetField(plan.FieldCronSpec, field.TypeString, value)
		_node.CronSpec = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(plan.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := pc.mutation.PlanType(); ok {
		_spec.SetField(plan.FieldPlanType, field.TypeString, value)
		_node.PlanType = value
	}
	if value, ok := pc.mutation.Priority(); ok {
		_spec.SetField(plan.FieldPriority, field.TypeInt, value)
		_node.Priority = value
	}
	if value, ok := pc.mutation.Timeout(); ok {
		_spec.SetField(plan.FieldTimeout, field.TypeInt, value)
		_node.Timeout = value
	}
	if value, ok := pc.mutation.RetryTimes(); ok {
		_spec.SetField(plan.FieldRetryTimes, field.TypeInt, value)
		_node.RetryTimes = value
	}
	if value, ok := pc.mutation.RetryInterval(); ok {
		_spec.SetField(plan.FieldRetryInterval, field.TypeInt, value)
		_node.RetryInterval = value
	}
	if value, ok := pc.mutation.StartTime(); ok {
		_spec.SetField(plan.FieldStartTime, field.TypeInt64, value)
		_node.StartTime = value
	}
	if value, ok := pc.mutation.EndTime(); ok {
		_spec.SetField(plan.FieldEndTime, field.TypeInt64, value)
		_node.EndTime = value
	}
	if value, ok := pc.mutation.Command(); ok {
		_spec.SetField(plan.FieldCommand, field.TypeString, value)
		_node.Command = value
	}
	if value, ok := pc.mutation.Params(); ok {
		_spec.SetField(plan.FieldParams, field.TypeString, value)
		_node.Params = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Plan.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlanUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *PlanCreate) OnConflict(opts ...sql.ConflictOption) *PlanUpsertOne {
	pc.conflict = opts
	return &PlanUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Plan.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PlanCreate) OnConflictColumns(columns ...string) *PlanUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PlanUpsertOne{
		create: pc,
	}
}

type (
	// PlanUpsertOne is the builder for "upsert"-ing
	//  one Plan node.
	PlanUpsertOne struct {
		create *PlanCreate
	}

	// PlanUpsert is the "OnConflict" setter.
	PlanUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PlanUpsert) SetUpdatedAt(v int64) *PlanUpsert {
	u.Set(plan.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlanUpsert) UpdateUpdatedAt() *PlanUpsert {
	u.SetExcluded(plan.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PlanUpsert) AddUpdatedAt(v int64) *PlanUpsert {
	u.Add(plan.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PlanUpsert) SetDeletedAt(v int64) *PlanUpsert {
	u.Set(plan.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PlanUpsert) UpdateDeletedAt() *PlanUpsert {
	u.SetExcluded(plan.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PlanUpsert) AddDeletedAt(v int64) *PlanUpsert {
	u.Add(plan.FieldDeletedAt, v)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PlanUpsert) ClearDeletedAt() *PlanUpsert {
	u.SetNull(plan.FieldDeletedAt)
	return u
}

// SetTenantCode sets the "tenant_code" field.
func (u *PlanUpsert) SetTenantCode(v string) *PlanUpsert {
	u.Set(plan.FieldTenantCode, v)
	return u
}

// UpdateTenantCode sets the "tenant_code" field to the value that was provided on create.
func (u *PlanUpsert) UpdateTenantCode() *PlanUpsert {
	u.SetExcluded(plan.FieldTenantCode)
	return u
}

// SetPlanID sets the "plan_id" field.
func (u *PlanUpsert) SetPlanID(v string) *PlanUpsert {
	u.Set(plan.FieldPlanID, v)
	return u
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *PlanUpsert) UpdatePlanID() *PlanUpsert {
	u.SetExcluded(plan.FieldPlanID)
	return u
}

// SetName sets the "name" field.
func (u *PlanUpsert) SetName(v string) *PlanUpsert {
	u.Set(plan.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PlanUpsert) UpdateName() *PlanUpsert {
	u.SetExcluded(plan.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *PlanUpsert) SetDescription(v string) *PlanUpsert {
	u.Set(plan.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PlanUpsert) UpdateDescription() *PlanUpsert {
	u.SetExcluded(plan.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *PlanUpsert) ClearDescription() *PlanUpsert {
	u.SetNull(plan.FieldDescription)
	return u
}

// SetGroup sets the "group" field.
func (u *PlanUpsert) SetGroup(v string) *PlanUpsert {
	u.Set(plan.FieldGroup, v)
	return u
}

// UpdateGroup sets the "group" field to the value that was provided on create.
func (u *PlanUpsert) UpdateGroup() *PlanUpsert {
	u.SetExcluded(plan.FieldGroup)
	return u
}

// SetCronSpec sets the "cron_spec" field.
func (u *PlanUpsert) SetCronSpec(v string) *PlanUpsert {
	u.Set(plan.FieldCronSpec, v)
	return u
}

// UpdateCronSpec sets the "cron_spec" field to the value that was provided on create.
func (u *PlanUpsert) UpdateCronSpec() *PlanUpsert {
	u.SetExcluded(plan.FieldCronSpec)
	return u
}

// SetStatus sets the "status" field.
func (u *PlanUpsert) SetStatus(v int) *PlanUpsert {
	u.Set(plan.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PlanUpsert) UpdateStatus() *PlanUpsert {
	u.SetExcluded(plan.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *PlanUpsert) AddStatus(v int) *PlanUpsert {
	u.Add(plan.FieldStatus, v)
	return u
}

// SetPlanType sets the "plan_type" field.
func (u *PlanUpsert) SetPlanType(v string) *PlanUpsert {
	u.Set(plan.FieldPlanType, v)
	return u
}

// UpdatePlanType sets the "plan_type" field to the value that was provided on create.
func (u *PlanUpsert) UpdatePlanType() *PlanUpsert {
	u.SetExcluded(plan.FieldPlanType)
	return u
}

// SetPriority sets the "priority" field.
func (u *PlanUpsert) SetPriority(v int) *PlanUpsert {
	u.Set(plan.FieldPriority, v)
	return u
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *PlanUpsert) UpdatePriority() *PlanUpsert {
	u.SetExcluded(plan.FieldPriority)
	return u
}

// AddPriority adds v to the "priority" field.
func (u *PlanUpsert) AddPriority(v int) *PlanUpsert {
	u.Add(plan.FieldPriority, v)
	return u
}

// SetTimeout sets the "timeout" field.
func (u *PlanUpsert) SetTimeout(v int) *PlanUpsert {
	u.Set(plan.FieldTimeout, v)
	return u
}

// UpdateTimeout sets the "timeout" field to the value that was provided on create.
func (u *PlanUpsert) UpdateTimeout() *PlanUpsert {
	u.SetExcluded(plan.FieldTimeout)
	return u
}

// AddTimeout adds v to the "timeout" field.
func (u *PlanUpsert) AddTimeout(v int) *PlanUpsert {
	u.Add(plan.FieldTimeout, v)
	return u
}

// SetRetryTimes sets the "retry_times" field.
func (u *PlanUpsert) SetRetryTimes(v int) *PlanUpsert {
	u.Set(plan.FieldRetryTimes, v)
	return u
}

// UpdateRetryTimes sets the "retry_times" field to the value that was provided on create.
func (u *PlanUpsert) UpdateRetryTimes() *PlanUpsert {
	u.SetExcluded(plan.FieldRetryTimes)
	return u
}

// AddRetryTimes adds v to the "retry_times" field.
func (u *PlanUpsert) AddRetryTimes(v int) *PlanUpsert {
	u.Add(plan.FieldRetryTimes, v)
	return u
}

// SetRetryInterval sets the "retry_interval" field.
func (u *PlanUpsert) SetRetryInterval(v int) *PlanUpsert {
	u.Set(plan.FieldRetryInterval, v)
	return u
}

// UpdateRetryInterval sets the "retry_interval" field to the value that was provided on create.
func (u *PlanUpsert) UpdateRetryInterval() *PlanUpsert {
	u.SetExcluded(plan.FieldRetryInterval)
	return u
}

// AddRetryInterval adds v to the "retry_interval" field.
func (u *PlanUpsert) AddRetryInterval(v int) *PlanUpsert {
	u.Add(plan.FieldRetryInterval, v)
	return u
}

// SetStartTime sets the "start_time" field.
func (u *PlanUpsert) SetStartTime(v int64) *PlanUpsert {
	u.Set(plan.FieldStartTime, v)
	return u
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *PlanUpsert) UpdateStartTime() *PlanUpsert {
	u.SetExcluded(plan.FieldStartTime)
	return u
}

// AddStartTime adds v to the "start_time" field.
func (u *PlanUpsert) AddStartTime(v int64) *PlanUpsert {
	u.Add(plan.FieldStartTime, v)
	return u
}

// ClearStartTime clears the value of the "start_time" field.
func (u *PlanUpsert) ClearStartTime() *PlanUpsert {
	u.SetNull(plan.FieldStartTime)
	return u
}

// SetEndTime sets the "end_time" field.
func (u *PlanUpsert) SetEndTime(v int64) *PlanUpsert {
	u.Set(plan.FieldEndTime, v)
	return u
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *PlanUpsert) UpdateEndTime() *PlanUpsert {
	u.SetExcluded(plan.FieldEndTime)
	return u
}

// AddEndTime adds v to the "end_time" field.
func (u *PlanUpsert) AddEndTime(v int64) *PlanUpsert {
	u.Add(plan.FieldEndTime, v)
	return u
}

// ClearEndTime clears the value of the "end_time" field.
func (u *PlanUpsert) ClearEndTime() *PlanUpsert {
	u.SetNull(plan.FieldEndTime)
	return u
}

// SetCommand sets the "command" field.
func (u *PlanUpsert) SetCommand(v string) *PlanUpsert {
	u.Set(plan.FieldCommand, v)
	return u
}

// UpdateCommand sets the "command" field to the value that was provided on create.
func (u *PlanUpsert) UpdateCommand() *PlanUpsert {
	u.SetExcluded(plan.FieldCommand)
	return u
}

// SetParams sets the "params" field.
func (u *PlanUpsert) SetParams(v string) *PlanUpsert {
	u.Set(plan.FieldParams, v)
	return u
}

// UpdateParams sets the "params" field to the value that was provided on create.
func (u *PlanUpsert) UpdateParams() *PlanUpsert {
	u.SetExcluded(plan.FieldParams)
	return u
}

// ClearParams clears the value of the "params" field.
func (u *PlanUpsert) ClearParams() *PlanUpsert {
	u.SetNull(plan.FieldParams)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Plan.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PlanUpsertOne) UpdateNewValues() *PlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(plan.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Plan.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PlanUpsertOne) Ignore() *PlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlanUpsertOne) DoNothing() *PlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlanCreate.OnConflict
// documentation for more info.
func (u *PlanUpsertOne) Update(set func(*PlanUpsert)) *PlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlanUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlanUpsertOne) SetUpdatedAt(v int64) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PlanUpsertOne) AddUpdatedAt(v int64) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateUpdatedAt() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PlanUpsertOne) SetDeletedAt(v int64) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PlanUpsertOne) AddDeletedAt(v int64) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateDeletedAt() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PlanUpsertOne) ClearDeletedAt() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTenantCode sets the "tenant_code" field.
func (u *PlanUpsertOne) SetTenantCode(v string) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetTenantCode(v)
	})
}

// UpdateTenantCode sets the "tenant_code" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateTenantCode() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateTenantCode()
	})
}

// SetPlanID sets the "plan_id" field.
func (u *PlanUpsertOne) SetPlanID(v string) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetPlanID(v)
	})
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdatePlanID() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdatePlanID()
	})
}

// SetName sets the "name" field.
func (u *PlanUpsertOne) SetName(v string) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateName() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *PlanUpsertOne) SetDescription(v string) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateDescription() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PlanUpsertOne) ClearDescription() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.ClearDescription()
	})
}

// SetGroup sets the "group" field.
func (u *PlanUpsertOne) SetGroup(v string) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetGroup(v)
	})
}

// UpdateGroup sets the "group" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateGroup() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateGroup()
	})
}

// SetCronSpec sets the "cron_spec" field.
func (u *PlanUpsertOne) SetCronSpec(v string) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetCronSpec(v)
	})
}

// UpdateCronSpec sets the "cron_spec" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateCronSpec() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateCronSpec()
	})
}

// SetStatus sets the "status" field.
func (u *PlanUpsertOne) SetStatus(v int) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *PlanUpsertOne) AddStatus(v int) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateStatus() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateStatus()
	})
}

// SetPlanType sets the "plan_type" field.
func (u *PlanUpsertOne) SetPlanType(v string) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetPlanType(v)
	})
}

// UpdatePlanType sets the "plan_type" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdatePlanType() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdatePlanType()
	})
}

// SetPriority sets the "priority" field.
func (u *PlanUpsertOne) SetPriority(v int) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetPriority(v)
	})
}

// AddPriority adds v to the "priority" field.
func (u *PlanUpsertOne) AddPriority(v int) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.AddPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdatePriority() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdatePriority()
	})
}

// SetTimeout sets the "timeout" field.
func (u *PlanUpsertOne) SetTimeout(v int) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetTimeout(v)
	})
}

// AddTimeout adds v to the "timeout" field.
func (u *PlanUpsertOne) AddTimeout(v int) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.AddTimeout(v)
	})
}

// UpdateTimeout sets the "timeout" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateTimeout() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateTimeout()
	})
}

// SetRetryTimes sets the "retry_times" field.
func (u *PlanUpsertOne) SetRetryTimes(v int) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetRetryTimes(v)
	})
}

// AddRetryTimes adds v to the "retry_times" field.
func (u *PlanUpsertOne) AddRetryTimes(v int) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.AddRetryTimes(v)
	})
}

// UpdateRetryTimes sets the "retry_times" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateRetryTimes() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateRetryTimes()
	})
}

// SetRetryInterval sets the "retry_interval" field.
func (u *PlanUpsertOne) SetRetryInterval(v int) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetRetryInterval(v)
	})
}

// AddRetryInterval adds v to the "retry_interval" field.
func (u *PlanUpsertOne) AddRetryInterval(v int) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.AddRetryInterval(v)
	})
}

// UpdateRetryInterval sets the "retry_interval" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateRetryInterval() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateRetryInterval()
	})
}

// SetStartTime sets the "start_time" field.
func (u *PlanUpsertOne) SetStartTime(v int64) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetStartTime(v)
	})
}

// AddStartTime adds v to the "start_time" field.
func (u *PlanUpsertOne) AddStartTime(v int64) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.AddStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateStartTime() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateStartTime()
	})
}

// ClearStartTime clears the value of the "start_time" field.
func (u *PlanUpsertOne) ClearStartTime() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.ClearStartTime()
	})
}

// SetEndTime sets the "end_time" field.
func (u *PlanUpsertOne) SetEndTime(v int64) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetEndTime(v)
	})
}

// AddEndTime adds v to the "end_time" field.
func (u *PlanUpsertOne) AddEndTime(v int64) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.AddEndTime(v)
	})
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateEndTime() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateEndTime()
	})
}

// ClearEndTime clears the value of the "end_time" field.
func (u *PlanUpsertOne) ClearEndTime() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.ClearEndTime()
	})
}

// SetCommand sets the "command" field.
func (u *PlanUpsertOne) SetCommand(v string) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetCommand(v)
	})
}

// UpdateCommand sets the "command" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateCommand() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateCommand()
	})
}

// SetParams sets the "params" field.
func (u *PlanUpsertOne) SetParams(v string) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetParams(v)
	})
}

// UpdateParams sets the "params" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateParams() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateParams()
	})
}

// ClearParams clears the value of the "params" field.
func (u *PlanUpsertOne) ClearParams() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.ClearParams()
	})
}

// Exec executes the query.
func (u *PlanUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for PlanCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlanUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PlanUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PlanUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PlanCreateBulk is the builder for creating many Plan entities in bulk.
type PlanCreateBulk struct {
	config
	err      error
	builders []*PlanCreate
	conflict []sql.ConflictOption
}

// Save creates the Plan entities in the database.
func (pcb *PlanCreateBulk) Save(ctx context.Context) ([]*Plan, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Plan, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlanMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PlanCreateBulk) SaveX(ctx context.Context) []*Plan {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PlanCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PlanCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Plan.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlanUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *PlanCreateBulk) OnConflict(opts ...sql.ConflictOption) *PlanUpsertBulk {
	pcb.conflict = opts
	return &PlanUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Plan.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PlanCreateBulk) OnConflictColumns(columns ...string) *PlanUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PlanUpsertBulk{
		create: pcb,
	}
}

// PlanUpsertBulk is the builder for "upsert"-ing
// a bulk of Plan nodes.
type PlanUpsertBulk struct {
	create *PlanCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Plan.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PlanUpsertBulk) UpdateNewValues() *PlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(plan.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Plan.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PlanUpsertBulk) Ignore() *PlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlanUpsertBulk) DoNothing() *PlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlanCreateBulk.OnConflict
// documentation for more info.
func (u *PlanUpsertBulk) Update(set func(*PlanUpsert)) *PlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlanUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlanUpsertBulk) SetUpdatedAt(v int64) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PlanUpsertBulk) AddUpdatedAt(v int64) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateUpdatedAt() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PlanUpsertBulk) SetDeletedAt(v int64) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PlanUpsertBulk) AddDeletedAt(v int64) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateDeletedAt() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PlanUpsertBulk) ClearDeletedAt() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTenantCode sets the "tenant_code" field.
func (u *PlanUpsertBulk) SetTenantCode(v string) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetTenantCode(v)
	})
}

// UpdateTenantCode sets the "tenant_code" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateTenantCode() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateTenantCode()
	})
}

// SetPlanID sets the "plan_id" field.
func (u *PlanUpsertBulk) SetPlanID(v string) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetPlanID(v)
	})
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdatePlanID() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdatePlanID()
	})
}

// SetName sets the "name" field.
func (u *PlanUpsertBulk) SetName(v string) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateName() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *PlanUpsertBulk) SetDescription(v string) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateDescription() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PlanUpsertBulk) ClearDescription() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.ClearDescription()
	})
}

// SetGroup sets the "group" field.
func (u *PlanUpsertBulk) SetGroup(v string) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetGroup(v)
	})
}

// UpdateGroup sets the "group" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateGroup() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateGroup()
	})
}

// SetCronSpec sets the "cron_spec" field.
func (u *PlanUpsertBulk) SetCronSpec(v string) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetCronSpec(v)
	})
}

// UpdateCronSpec sets the "cron_spec" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateCronSpec() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateCronSpec()
	})
}

// SetStatus sets the "status" field.
func (u *PlanUpsertBulk) SetStatus(v int) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *PlanUpsertBulk) AddStatus(v int) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateStatus() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateStatus()
	})
}

// SetPlanType sets the "plan_type" field.
func (u *PlanUpsertBulk) SetPlanType(v string) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetPlanType(v)
	})
}

// UpdatePlanType sets the "plan_type" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdatePlanType() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdatePlanType()
	})
}

// SetPriority sets the "priority" field.
func (u *PlanUpsertBulk) SetPriority(v int) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetPriority(v)
	})
}

// AddPriority adds v to the "priority" field.
func (u *PlanUpsertBulk) AddPriority(v int) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.AddPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdatePriority() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdatePriority()
	})
}

// SetTimeout sets the "timeout" field.
func (u *PlanUpsertBulk) SetTimeout(v int) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetTimeout(v)
	})
}

// AddTimeout adds v to the "timeout" field.
func (u *PlanUpsertBulk) AddTimeout(v int) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.AddTimeout(v)
	})
}

// UpdateTimeout sets the "timeout" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateTimeout() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateTimeout()
	})
}

// SetRetryTimes sets the "retry_times" field.
func (u *PlanUpsertBulk) SetRetryTimes(v int) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetRetryTimes(v)
	})
}

// AddRetryTimes adds v to the "retry_times" field.
func (u *PlanUpsertBulk) AddRetryTimes(v int) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.AddRetryTimes(v)
	})
}

// UpdateRetryTimes sets the "retry_times" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateRetryTimes() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateRetryTimes()
	})
}

// SetRetryInterval sets the "retry_interval" field.
func (u *PlanUpsertBulk) SetRetryInterval(v int) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetRetryInterval(v)
	})
}

// AddRetryInterval adds v to the "retry_interval" field.
func (u *PlanUpsertBulk) AddRetryInterval(v int) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.AddRetryInterval(v)
	})
}

// UpdateRetryInterval sets the "retry_interval" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateRetryInterval() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateRetryInterval()
	})
}

// SetStartTime sets the "start_time" field.
func (u *PlanUpsertBulk) SetStartTime(v int64) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetStartTime(v)
	})
}

// AddStartTime adds v to the "start_time" field.
func (u *PlanUpsertBulk) AddStartTime(v int64) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.AddStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateStartTime() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateStartTime()
	})
}

// ClearStartTime clears the value of the "start_time" field.
func (u *PlanUpsertBulk) ClearStartTime() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.ClearStartTime()
	})
}

// SetEndTime sets the "end_time" field.
func (u *PlanUpsertBulk) SetEndTime(v int64) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetEndTime(v)
	})
}

// AddEndTime adds v to the "end_time" field.
func (u *PlanUpsertBulk) AddEndTime(v int64) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.AddEndTime(v)
	})
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateEndTime() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateEndTime()
	})
}

// ClearEndTime clears the value of the "end_time" field.
func (u *PlanUpsertBulk) ClearEndTime() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.ClearEndTime()
	})
}

// SetCommand sets the "command" field.
func (u *PlanUpsertBulk) SetCommand(v string) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetCommand(v)
	})
}

// UpdateCommand sets the "command" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateCommand() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateCommand()
	})
}

// SetParams sets the "params" field.
func (u *PlanUpsertBulk) SetParams(v string) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetParams(v)
	})
}

// UpdateParams sets the "params" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateParams() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateParams()
	})
}

// ClearParams clears the value of the "params" field.
func (u *PlanUpsertBulk) ClearParams() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.ClearParams()
	})
}

// Exec executes the query.
func (u *PlanUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the PlanCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for PlanCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlanUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
