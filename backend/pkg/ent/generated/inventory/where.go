// Code generated by ent, DO NOT EDIT.

package inventory

import (
	"admin_backend/pkg/ent/generated/predicate"

	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldDeletedAt, v))
}

// TenantCode applies equality check predicate on the "tenant_code" field. It's identical to TenantCodeEQ.
func TenantCode(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldTenantCode, v))
}

// InventoryID applies equality check predicate on the "inventory_id" field. It's identical to InventoryIDEQ.
func InventoryID(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldInventoryID, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldProductID, v))
}

// OperationType applies equality check predicate on the "operation_type" field. It's identical to OperationTypeEQ.
func OperationType(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldOperationType, v))
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v int) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldQuantity, v))
}

// UnitPrice applies equality check predicate on the "unit_price" field. It's identical to UnitPriceEQ.
func UnitPrice(v decimal.Decimal) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldUnitPrice, v))
}

// TotalAmount applies equality check predicate on the "total_amount" field. It's identical to TotalAmountEQ.
func TotalAmount(v decimal.Decimal) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldTotalAmount, v))
}

// OperatorID applies equality check predicate on the "operator_id" field. It's identical to OperatorIDEQ.
func OperatorID(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldOperatorID, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldRemark, v))
}

// OperationTime applies equality check predicate on the "operation_time" field. It's identical to OperationTimeEQ.
func OperationTime(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldOperationTime, v))
}

// BeforeStock applies equality check predicate on the "before_stock" field. It's identical to BeforeStockEQ.
func BeforeStock(v int) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldBeforeStock, v))
}

// AfterStock applies equality check predicate on the "after_stock" field. It's identical to AfterStockEQ.
func AfterStock(v int) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldAfterStock, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Inventory {
	return predicate.Inventory(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Inventory {
	return predicate.Inventory(sql.FieldNotNull(FieldDeletedAt))
}

// TenantCodeEQ applies the EQ predicate on the "tenant_code" field.
func TenantCodeEQ(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldTenantCode, v))
}

// TenantCodeNEQ applies the NEQ predicate on the "tenant_code" field.
func TenantCodeNEQ(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldTenantCode, v))
}

// TenantCodeIn applies the In predicate on the "tenant_code" field.
func TenantCodeIn(vs ...string) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldTenantCode, vs...))
}

// TenantCodeNotIn applies the NotIn predicate on the "tenant_code" field.
func TenantCodeNotIn(vs ...string) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldTenantCode, vs...))
}

// TenantCodeGT applies the GT predicate on the "tenant_code" field.
func TenantCodeGT(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldTenantCode, v))
}

// TenantCodeGTE applies the GTE predicate on the "tenant_code" field.
func TenantCodeGTE(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldTenantCode, v))
}

// TenantCodeLT applies the LT predicate on the "tenant_code" field.
func TenantCodeLT(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldTenantCode, v))
}

// TenantCodeLTE applies the LTE predicate on the "tenant_code" field.
func TenantCodeLTE(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldTenantCode, v))
}

// TenantCodeContains applies the Contains predicate on the "tenant_code" field.
func TenantCodeContains(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldContains(FieldTenantCode, v))
}

// TenantCodeHasPrefix applies the HasPrefix predicate on the "tenant_code" field.
func TenantCodeHasPrefix(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldHasPrefix(FieldTenantCode, v))
}

// TenantCodeHasSuffix applies the HasSuffix predicate on the "tenant_code" field.
func TenantCodeHasSuffix(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldHasSuffix(FieldTenantCode, v))
}

// TenantCodeEqualFold applies the EqualFold predicate on the "tenant_code" field.
func TenantCodeEqualFold(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEqualFold(FieldTenantCode, v))
}

// TenantCodeContainsFold applies the ContainsFold predicate on the "tenant_code" field.
func TenantCodeContainsFold(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldContainsFold(FieldTenantCode, v))
}

// InventoryIDEQ applies the EQ predicate on the "inventory_id" field.
func InventoryIDEQ(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldInventoryID, v))
}

// InventoryIDNEQ applies the NEQ predicate on the "inventory_id" field.
func InventoryIDNEQ(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldInventoryID, v))
}

// InventoryIDIn applies the In predicate on the "inventory_id" field.
func InventoryIDIn(vs ...string) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldInventoryID, vs...))
}

// InventoryIDNotIn applies the NotIn predicate on the "inventory_id" field.
func InventoryIDNotIn(vs ...string) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldInventoryID, vs...))
}

// InventoryIDGT applies the GT predicate on the "inventory_id" field.
func InventoryIDGT(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldInventoryID, v))
}

// InventoryIDGTE applies the GTE predicate on the "inventory_id" field.
func InventoryIDGTE(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldInventoryID, v))
}

// InventoryIDLT applies the LT predicate on the "inventory_id" field.
func InventoryIDLT(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldInventoryID, v))
}

// InventoryIDLTE applies the LTE predicate on the "inventory_id" field.
func InventoryIDLTE(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldInventoryID, v))
}

// InventoryIDContains applies the Contains predicate on the "inventory_id" field.
func InventoryIDContains(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldContains(FieldInventoryID, v))
}

// InventoryIDHasPrefix applies the HasPrefix predicate on the "inventory_id" field.
func InventoryIDHasPrefix(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldHasPrefix(FieldInventoryID, v))
}

// InventoryIDHasSuffix applies the HasSuffix predicate on the "inventory_id" field.
func InventoryIDHasSuffix(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldHasSuffix(FieldInventoryID, v))
}

// InventoryIDEqualFold applies the EqualFold predicate on the "inventory_id" field.
func InventoryIDEqualFold(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEqualFold(FieldInventoryID, v))
}

// InventoryIDContainsFold applies the ContainsFold predicate on the "inventory_id" field.
func InventoryIDContainsFold(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldContainsFold(FieldInventoryID, v))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...string) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...string) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldProductID, v))
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldProductID, v))
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldProductID, v))
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldProductID, v))
}

// ProductIDContains applies the Contains predicate on the "product_id" field.
func ProductIDContains(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldContains(FieldProductID, v))
}

// ProductIDHasPrefix applies the HasPrefix predicate on the "product_id" field.
func ProductIDHasPrefix(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldHasPrefix(FieldProductID, v))
}

// ProductIDHasSuffix applies the HasSuffix predicate on the "product_id" field.
func ProductIDHasSuffix(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldHasSuffix(FieldProductID, v))
}

// ProductIDEqualFold applies the EqualFold predicate on the "product_id" field.
func ProductIDEqualFold(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEqualFold(FieldProductID, v))
}

// ProductIDContainsFold applies the ContainsFold predicate on the "product_id" field.
func ProductIDContainsFold(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldContainsFold(FieldProductID, v))
}

// OperationTypeEQ applies the EQ predicate on the "operation_type" field.
func OperationTypeEQ(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldOperationType, v))
}

// OperationTypeNEQ applies the NEQ predicate on the "operation_type" field.
func OperationTypeNEQ(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldOperationType, v))
}

// OperationTypeIn applies the In predicate on the "operation_type" field.
func OperationTypeIn(vs ...string) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldOperationType, vs...))
}

// OperationTypeNotIn applies the NotIn predicate on the "operation_type" field.
func OperationTypeNotIn(vs ...string) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldOperationType, vs...))
}

// OperationTypeGT applies the GT predicate on the "operation_type" field.
func OperationTypeGT(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldOperationType, v))
}

// OperationTypeGTE applies the GTE predicate on the "operation_type" field.
func OperationTypeGTE(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldOperationType, v))
}

// OperationTypeLT applies the LT predicate on the "operation_type" field.
func OperationTypeLT(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldOperationType, v))
}

// OperationTypeLTE applies the LTE predicate on the "operation_type" field.
func OperationTypeLTE(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldOperationType, v))
}

// OperationTypeContains applies the Contains predicate on the "operation_type" field.
func OperationTypeContains(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldContains(FieldOperationType, v))
}

// OperationTypeHasPrefix applies the HasPrefix predicate on the "operation_type" field.
func OperationTypeHasPrefix(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldHasPrefix(FieldOperationType, v))
}

// OperationTypeHasSuffix applies the HasSuffix predicate on the "operation_type" field.
func OperationTypeHasSuffix(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldHasSuffix(FieldOperationType, v))
}

// OperationTypeEqualFold applies the EqualFold predicate on the "operation_type" field.
func OperationTypeEqualFold(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEqualFold(FieldOperationType, v))
}

// OperationTypeContainsFold applies the ContainsFold predicate on the "operation_type" field.
func OperationTypeContainsFold(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldContainsFold(FieldOperationType, v))
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v int) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldQuantity, v))
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v int) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldQuantity, v))
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...int) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldQuantity, vs...))
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...int) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldQuantity, vs...))
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v int) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldQuantity, v))
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v int) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldQuantity, v))
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v int) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldQuantity, v))
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v int) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldQuantity, v))
}

// UnitPriceEQ applies the EQ predicate on the "unit_price" field.
func UnitPriceEQ(v decimal.Decimal) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldUnitPrice, v))
}

// UnitPriceNEQ applies the NEQ predicate on the "unit_price" field.
func UnitPriceNEQ(v decimal.Decimal) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldUnitPrice, v))
}

// UnitPriceIn applies the In predicate on the "unit_price" field.
func UnitPriceIn(vs ...decimal.Decimal) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldUnitPrice, vs...))
}

// UnitPriceNotIn applies the NotIn predicate on the "unit_price" field.
func UnitPriceNotIn(vs ...decimal.Decimal) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldUnitPrice, vs...))
}

// UnitPriceGT applies the GT predicate on the "unit_price" field.
func UnitPriceGT(v decimal.Decimal) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldUnitPrice, v))
}

// UnitPriceGTE applies the GTE predicate on the "unit_price" field.
func UnitPriceGTE(v decimal.Decimal) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldUnitPrice, v))
}

// UnitPriceLT applies the LT predicate on the "unit_price" field.
func UnitPriceLT(v decimal.Decimal) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldUnitPrice, v))
}

// UnitPriceLTE applies the LTE predicate on the "unit_price" field.
func UnitPriceLTE(v decimal.Decimal) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldUnitPrice, v))
}

// TotalAmountEQ applies the EQ predicate on the "total_amount" field.
func TotalAmountEQ(v decimal.Decimal) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldTotalAmount, v))
}

// TotalAmountNEQ applies the NEQ predicate on the "total_amount" field.
func TotalAmountNEQ(v decimal.Decimal) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldTotalAmount, v))
}

// TotalAmountIn applies the In predicate on the "total_amount" field.
func TotalAmountIn(vs ...decimal.Decimal) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldTotalAmount, vs...))
}

// TotalAmountNotIn applies the NotIn predicate on the "total_amount" field.
func TotalAmountNotIn(vs ...decimal.Decimal) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldTotalAmount, vs...))
}

// TotalAmountGT applies the GT predicate on the "total_amount" field.
func TotalAmountGT(v decimal.Decimal) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldTotalAmount, v))
}

// TotalAmountGTE applies the GTE predicate on the "total_amount" field.
func TotalAmountGTE(v decimal.Decimal) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldTotalAmount, v))
}

// TotalAmountLT applies the LT predicate on the "total_amount" field.
func TotalAmountLT(v decimal.Decimal) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldTotalAmount, v))
}

// TotalAmountLTE applies the LTE predicate on the "total_amount" field.
func TotalAmountLTE(v decimal.Decimal) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldTotalAmount, v))
}

// OperatorIDEQ applies the EQ predicate on the "operator_id" field.
func OperatorIDEQ(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldOperatorID, v))
}

// OperatorIDNEQ applies the NEQ predicate on the "operator_id" field.
func OperatorIDNEQ(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldOperatorID, v))
}

// OperatorIDIn applies the In predicate on the "operator_id" field.
func OperatorIDIn(vs ...string) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldOperatorID, vs...))
}

// OperatorIDNotIn applies the NotIn predicate on the "operator_id" field.
func OperatorIDNotIn(vs ...string) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldOperatorID, vs...))
}

// OperatorIDGT applies the GT predicate on the "operator_id" field.
func OperatorIDGT(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldOperatorID, v))
}

// OperatorIDGTE applies the GTE predicate on the "operator_id" field.
func OperatorIDGTE(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldOperatorID, v))
}

// OperatorIDLT applies the LT predicate on the "operator_id" field.
func OperatorIDLT(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldOperatorID, v))
}

// OperatorIDLTE applies the LTE predicate on the "operator_id" field.
func OperatorIDLTE(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldOperatorID, v))
}

// OperatorIDContains applies the Contains predicate on the "operator_id" field.
func OperatorIDContains(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldContains(FieldOperatorID, v))
}

// OperatorIDHasPrefix applies the HasPrefix predicate on the "operator_id" field.
func OperatorIDHasPrefix(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldHasPrefix(FieldOperatorID, v))
}

// OperatorIDHasSuffix applies the HasSuffix predicate on the "operator_id" field.
func OperatorIDHasSuffix(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldHasSuffix(FieldOperatorID, v))
}

// OperatorIDEqualFold applies the EqualFold predicate on the "operator_id" field.
func OperatorIDEqualFold(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEqualFold(FieldOperatorID, v))
}

// OperatorIDContainsFold applies the ContainsFold predicate on the "operator_id" field.
func OperatorIDContainsFold(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldContainsFold(FieldOperatorID, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Inventory {
	return predicate.Inventory(sql.FieldContainsFold(FieldRemark, v))
}

// OperationTimeEQ applies the EQ predicate on the "operation_time" field.
func OperationTimeEQ(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldOperationTime, v))
}

// OperationTimeNEQ applies the NEQ predicate on the "operation_time" field.
func OperationTimeNEQ(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldOperationTime, v))
}

// OperationTimeIn applies the In predicate on the "operation_time" field.
func OperationTimeIn(vs ...int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldOperationTime, vs...))
}

// OperationTimeNotIn applies the NotIn predicate on the "operation_time" field.
func OperationTimeNotIn(vs ...int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldOperationTime, vs...))
}

// OperationTimeGT applies the GT predicate on the "operation_time" field.
func OperationTimeGT(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldOperationTime, v))
}

// OperationTimeGTE applies the GTE predicate on the "operation_time" field.
func OperationTimeGTE(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldOperationTime, v))
}

// OperationTimeLT applies the LT predicate on the "operation_time" field.
func OperationTimeLT(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldOperationTime, v))
}

// OperationTimeLTE applies the LTE predicate on the "operation_time" field.
func OperationTimeLTE(v int64) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldOperationTime, v))
}

// BeforeStockEQ applies the EQ predicate on the "before_stock" field.
func BeforeStockEQ(v int) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldBeforeStock, v))
}

// BeforeStockNEQ applies the NEQ predicate on the "before_stock" field.
func BeforeStockNEQ(v int) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldBeforeStock, v))
}

// BeforeStockIn applies the In predicate on the "before_stock" field.
func BeforeStockIn(vs ...int) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldBeforeStock, vs...))
}

// BeforeStockNotIn applies the NotIn predicate on the "before_stock" field.
func BeforeStockNotIn(vs ...int) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldBeforeStock, vs...))
}

// BeforeStockGT applies the GT predicate on the "before_stock" field.
func BeforeStockGT(v int) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldBeforeStock, v))
}

// BeforeStockGTE applies the GTE predicate on the "before_stock" field.
func BeforeStockGTE(v int) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldBeforeStock, v))
}

// BeforeStockLT applies the LT predicate on the "before_stock" field.
func BeforeStockLT(v int) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldBeforeStock, v))
}

// BeforeStockLTE applies the LTE predicate on the "before_stock" field.
func BeforeStockLTE(v int) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldBeforeStock, v))
}

// AfterStockEQ applies the EQ predicate on the "after_stock" field.
func AfterStockEQ(v int) predicate.Inventory {
	return predicate.Inventory(sql.FieldEQ(FieldAfterStock, v))
}

// AfterStockNEQ applies the NEQ predicate on the "after_stock" field.
func AfterStockNEQ(v int) predicate.Inventory {
	return predicate.Inventory(sql.FieldNEQ(FieldAfterStock, v))
}

// AfterStockIn applies the In predicate on the "after_stock" field.
func AfterStockIn(vs ...int) predicate.Inventory {
	return predicate.Inventory(sql.FieldIn(FieldAfterStock, vs...))
}

// AfterStockNotIn applies the NotIn predicate on the "after_stock" field.
func AfterStockNotIn(vs ...int) predicate.Inventory {
	return predicate.Inventory(sql.FieldNotIn(FieldAfterStock, vs...))
}

// AfterStockGT applies the GT predicate on the "after_stock" field.
func AfterStockGT(v int) predicate.Inventory {
	return predicate.Inventory(sql.FieldGT(FieldAfterStock, v))
}

// AfterStockGTE applies the GTE predicate on the "after_stock" field.
func AfterStockGTE(v int) predicate.Inventory {
	return predicate.Inventory(sql.FieldGTE(FieldAfterStock, v))
}

// AfterStockLT applies the LT predicate on the "after_stock" field.
func AfterStockLT(v int) predicate.Inventory {
	return predicate.Inventory(sql.FieldLT(FieldAfterStock, v))
}

// AfterStockLTE applies the LTE predicate on the "after_stock" field.
func AfterStockLTE(v int) predicate.Inventory {
	return predicate.Inventory(sql.FieldLTE(FieldAfterStock, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Inventory) predicate.Inventory {
	return predicate.Inventory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Inventory) predicate.Inventory {
	return predicate.Inventory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Inventory) predicate.Inventory {
	return predicate.Inventory(sql.NotPredicates(p))
}
