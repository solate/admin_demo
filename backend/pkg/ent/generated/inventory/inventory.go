// Code generated by ent, DO NOT EDIT.

package inventory

import (
	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the inventory type in the database.
	Label = "inventory"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldTenantCode holds the string denoting the tenant_code field in the database.
	FieldTenantCode = "tenant_code"
	// FieldInventoryID holds the string denoting the inventory_id field in the database.
	FieldInventoryID = "inventory_id"
	// FieldProductID holds the string denoting the product_id field in the database.
	FieldProductID = "product_id"
	// FieldOperationType holds the string denoting the operation_type field in the database.
	FieldOperationType = "operation_type"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// FieldUnitPrice holds the string denoting the unit_price field in the database.
	FieldUnitPrice = "unit_price"
	// FieldTotalAmount holds the string denoting the total_amount field in the database.
	FieldTotalAmount = "total_amount"
	// FieldOperatorID holds the string denoting the operator_id field in the database.
	FieldOperatorID = "operator_id"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldOperationTime holds the string denoting the operation_time field in the database.
	FieldOperationTime = "operation_time"
	// FieldBeforeStock holds the string denoting the before_stock field in the database.
	FieldBeforeStock = "before_stock"
	// FieldAfterStock holds the string denoting the after_stock field in the database.
	FieldAfterStock = "after_stock"
	// Table holds the table name of the inventory in the database.
	Table = "bus_inventories"
)

// Columns holds all SQL columns for inventory fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldTenantCode,
	FieldInventoryID,
	FieldProductID,
	FieldOperationType,
	FieldQuantity,
	FieldUnitPrice,
	FieldTotalAmount,
	FieldOperatorID,
	FieldRemark,
	FieldOperationTime,
	FieldBeforeStock,
	FieldAfterStock,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt int64
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt int64
	// ProductIDValidator is a validator for the "product_id" field. It is called by the builders before save.
	ProductIDValidator func(string) error
	// OperationTypeValidator is a validator for the "operation_type" field. It is called by the builders before save.
	OperationTypeValidator func(string) error
	// DefaultUnitPrice holds the default value on creation for the "unit_price" field.
	DefaultUnitPrice decimal.Decimal
	// DefaultTotalAmount holds the default value on creation for the "total_amount" field.
	DefaultTotalAmount decimal.Decimal
	// DefaultRemark holds the default value on creation for the "remark" field.
	DefaultRemark string
	// DefaultBeforeStock holds the default value on creation for the "before_stock" field.
	DefaultBeforeStock int
	// DefaultAfterStock holds the default value on creation for the "after_stock" field.
	DefaultAfterStock int
)

// OrderOption defines the ordering options for the Inventory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByTenantCode orders the results by the tenant_code field.
func ByTenantCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantCode, opts...).ToFunc()
}

// ByInventoryID orders the results by the inventory_id field.
func ByInventoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInventoryID, opts...).ToFunc()
}

// ByProductID orders the results by the product_id field.
func ByProductID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductID, opts...).ToFunc()
}

// ByOperationType orders the results by the operation_type field.
func ByOperationType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperationType, opts...).ToFunc()
}

// ByQuantity orders the results by the quantity field.
func ByQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantity, opts...).ToFunc()
}

// ByUnitPrice orders the results by the unit_price field.
func ByUnitPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitPrice, opts...).ToFunc()
}

// ByTotalAmount orders the results by the total_amount field.
func ByTotalAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalAmount, opts...).ToFunc()
}

// ByOperatorID orders the results by the operator_id field.
func ByOperatorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperatorID, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByOperationTime orders the results by the operation_time field.
func ByOperationTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperationTime, opts...).ToFunc()
}

// ByBeforeStock orders the results by the before_stock field.
func ByBeforeStock(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBeforeStock, opts...).ToFunc()
}

// ByAfterStock orders the results by the after_stock field.
func ByAfterStock(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAfterStock, opts...).ToFunc()
}
