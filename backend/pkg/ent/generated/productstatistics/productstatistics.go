// Code generated by ent, DO NOT EDIT.

package productstatistics

import (
	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
)

const (
	// Label holds the string label denoting the productstatistics type in the database.
	Label = "product_statistics"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTenantCode holds the string denoting the tenant_code field in the database.
	FieldTenantCode = "tenant_code"
	// FieldTotalProducts holds the string denoting the total_products field in the database.
	FieldTotalProducts = "total_products"
	// FieldActiveProducts holds the string denoting the active_products field in the database.
	FieldActiveProducts = "active_products"
	// FieldTotalStock holds the string denoting the total_stock field in the database.
	FieldTotalStock = "total_stock"
	// FieldTotalStockValue holds the string denoting the total_stock_value field in the database.
	FieldTotalStockValue = "total_stock_value"
	// FieldLowStockProducts holds the string denoting the low_stock_products field in the database.
	FieldLowStockProducts = "low_stock_products"
	// FieldTotalInQuantity holds the string denoting the total_in_quantity field in the database.
	FieldTotalInQuantity = "total_in_quantity"
	// FieldTotalInAmount holds the string denoting the total_in_amount field in the database.
	FieldTotalInAmount = "total_in_amount"
	// FieldTotalOutQuantity holds the string denoting the total_out_quantity field in the database.
	FieldTotalOutQuantity = "total_out_quantity"
	// FieldTotalOutAmount holds the string denoting the total_out_amount field in the database.
	FieldTotalOutAmount = "total_out_amount"
	// FieldTotalSalesAmount holds the string denoting the total_sales_amount field in the database.
	FieldTotalSalesAmount = "total_sales_amount"
	// FieldTotalSalesQuantity holds the string denoting the total_sales_quantity field in the database.
	FieldTotalSalesQuantity = "total_sales_quantity"
	// Table holds the table name of the productstatistics in the database.
	Table = "product_statistics"
)

// Columns holds all SQL columns for productstatistics fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldTenantCode,
	FieldTotalProducts,
	FieldActiveProducts,
	FieldTotalStock,
	FieldTotalStockValue,
	FieldLowStockProducts,
	FieldTotalInQuantity,
	FieldTotalInAmount,
	FieldTotalOutQuantity,
	FieldTotalOutAmount,
	FieldTotalSalesAmount,
	FieldTotalSalesQuantity,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt int64
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt int64
	// DefaultTotalProducts holds the default value on creation for the "total_products" field.
	DefaultTotalProducts int
	// DefaultActiveProducts holds the default value on creation for the "active_products" field.
	DefaultActiveProducts int
	// DefaultTotalStock holds the default value on creation for the "total_stock" field.
	DefaultTotalStock int
	// DefaultTotalStockValue holds the default value on creation for the "total_stock_value" field.
	DefaultTotalStockValue decimal.Decimal
	// DefaultLowStockProducts holds the default value on creation for the "low_stock_products" field.
	DefaultLowStockProducts int
	// DefaultTotalInQuantity holds the default value on creation for the "total_in_quantity" field.
	DefaultTotalInQuantity int
	// DefaultTotalInAmount holds the default value on creation for the "total_in_amount" field.
	DefaultTotalInAmount decimal.Decimal
	// DefaultTotalOutQuantity holds the default value on creation for the "total_out_quantity" field.
	DefaultTotalOutQuantity int
	// DefaultTotalOutAmount holds the default value on creation for the "total_out_amount" field.
	DefaultTotalOutAmount decimal.Decimal
	// DefaultTotalSalesAmount holds the default value on creation for the "total_sales_amount" field.
	DefaultTotalSalesAmount decimal.Decimal
	// DefaultTotalSalesQuantity holds the default value on creation for the "total_sales_quantity" field.
	DefaultTotalSalesQuantity int
)

// OrderOption defines the ordering options for the ProductStatistics queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTenantCode orders the results by the tenant_code field.
func ByTenantCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantCode, opts...).ToFunc()
}

// ByTotalProducts orders the results by the total_products field.
func ByTotalProducts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalProducts, opts...).ToFunc()
}

// ByActiveProducts orders the results by the active_products field.
func ByActiveProducts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActiveProducts, opts...).ToFunc()
}

// ByTotalStock orders the results by the total_stock field.
func ByTotalStock(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalStock, opts...).ToFunc()
}

// ByTotalStockValue orders the results by the total_stock_value field.
func ByTotalStockValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalStockValue, opts...).ToFunc()
}

// ByLowStockProducts orders the results by the low_stock_products field.
func ByLowStockProducts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLowStockProducts, opts...).ToFunc()
}

// ByTotalInQuantity orders the results by the total_in_quantity field.
func ByTotalInQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalInQuantity, opts...).ToFunc()
}

// ByTotalInAmount orders the results by the total_in_amount field.
func ByTotalInAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalInAmount, opts...).ToFunc()
}

// ByTotalOutQuantity orders the results by the total_out_quantity field.
func ByTotalOutQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalOutQuantity, opts...).ToFunc()
}

// ByTotalOutAmount orders the results by the total_out_amount field.
func ByTotalOutAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalOutAmount, opts...).ToFunc()
}

// ByTotalSalesAmount orders the results by the total_sales_amount field.
func ByTotalSalesAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalSalesAmount, opts...).ToFunc()
}

// ByTotalSalesQuantity orders the results by the total_sales_quantity field.
func ByTotalSalesQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalSalesQuantity, opts...).ToFunc()
}
