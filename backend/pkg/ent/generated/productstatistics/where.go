// Code generated by ent, DO NOT EDIT.

package productstatistics

import (
	"admin_backend/pkg/ent/generated/predicate"

	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldUpdatedAt, v))
}

// TenantCode applies equality check predicate on the "tenant_code" field. It's identical to TenantCodeEQ.
func TenantCode(v string) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldTenantCode, v))
}

// TotalProducts applies equality check predicate on the "total_products" field. It's identical to TotalProductsEQ.
func TotalProducts(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldTotalProducts, v))
}

// ActiveProducts applies equality check predicate on the "active_products" field. It's identical to ActiveProductsEQ.
func ActiveProducts(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldActiveProducts, v))
}

// TotalStock applies equality check predicate on the "total_stock" field. It's identical to TotalStockEQ.
func TotalStock(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldTotalStock, v))
}

// TotalStockValue applies equality check predicate on the "total_stock_value" field. It's identical to TotalStockValueEQ.
func TotalStockValue(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldTotalStockValue, v))
}

// LowStockProducts applies equality check predicate on the "low_stock_products" field. It's identical to LowStockProductsEQ.
func LowStockProducts(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldLowStockProducts, v))
}

// TotalInQuantity applies equality check predicate on the "total_in_quantity" field. It's identical to TotalInQuantityEQ.
func TotalInQuantity(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldTotalInQuantity, v))
}

// TotalInAmount applies equality check predicate on the "total_in_amount" field. It's identical to TotalInAmountEQ.
func TotalInAmount(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldTotalInAmount, v))
}

// TotalOutQuantity applies equality check predicate on the "total_out_quantity" field. It's identical to TotalOutQuantityEQ.
func TotalOutQuantity(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldTotalOutQuantity, v))
}

// TotalOutAmount applies equality check predicate on the "total_out_amount" field. It's identical to TotalOutAmountEQ.
func TotalOutAmount(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldTotalOutAmount, v))
}

// TotalSalesAmount applies equality check predicate on the "total_sales_amount" field. It's identical to TotalSalesAmountEQ.
func TotalSalesAmount(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldTotalSalesAmount, v))
}

// TotalSalesQuantity applies equality check predicate on the "total_sales_quantity" field. It's identical to TotalSalesQuantityEQ.
func TotalSalesQuantity(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldTotalSalesQuantity, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLTE(FieldUpdatedAt, v))
}

// TenantCodeEQ applies the EQ predicate on the "tenant_code" field.
func TenantCodeEQ(v string) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldTenantCode, v))
}

// TenantCodeNEQ applies the NEQ predicate on the "tenant_code" field.
func TenantCodeNEQ(v string) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNEQ(FieldTenantCode, v))
}

// TenantCodeIn applies the In predicate on the "tenant_code" field.
func TenantCodeIn(vs ...string) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldIn(FieldTenantCode, vs...))
}

// TenantCodeNotIn applies the NotIn predicate on the "tenant_code" field.
func TenantCodeNotIn(vs ...string) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNotIn(FieldTenantCode, vs...))
}

// TenantCodeGT applies the GT predicate on the "tenant_code" field.
func TenantCodeGT(v string) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGT(FieldTenantCode, v))
}

// TenantCodeGTE applies the GTE predicate on the "tenant_code" field.
func TenantCodeGTE(v string) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGTE(FieldTenantCode, v))
}

// TenantCodeLT applies the LT predicate on the "tenant_code" field.
func TenantCodeLT(v string) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLT(FieldTenantCode, v))
}

// TenantCodeLTE applies the LTE predicate on the "tenant_code" field.
func TenantCodeLTE(v string) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLTE(FieldTenantCode, v))
}

// TenantCodeContains applies the Contains predicate on the "tenant_code" field.
func TenantCodeContains(v string) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldContains(FieldTenantCode, v))
}

// TenantCodeHasPrefix applies the HasPrefix predicate on the "tenant_code" field.
func TenantCodeHasPrefix(v string) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldHasPrefix(FieldTenantCode, v))
}

// TenantCodeHasSuffix applies the HasSuffix predicate on the "tenant_code" field.
func TenantCodeHasSuffix(v string) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldHasSuffix(FieldTenantCode, v))
}

// TenantCodeEqualFold applies the EqualFold predicate on the "tenant_code" field.
func TenantCodeEqualFold(v string) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEqualFold(FieldTenantCode, v))
}

// TenantCodeContainsFold applies the ContainsFold predicate on the "tenant_code" field.
func TenantCodeContainsFold(v string) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldContainsFold(FieldTenantCode, v))
}

// TotalProductsEQ applies the EQ predicate on the "total_products" field.
func TotalProductsEQ(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldTotalProducts, v))
}

// TotalProductsNEQ applies the NEQ predicate on the "total_products" field.
func TotalProductsNEQ(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNEQ(FieldTotalProducts, v))
}

// TotalProductsIn applies the In predicate on the "total_products" field.
func TotalProductsIn(vs ...int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldIn(FieldTotalProducts, vs...))
}

// TotalProductsNotIn applies the NotIn predicate on the "total_products" field.
func TotalProductsNotIn(vs ...int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNotIn(FieldTotalProducts, vs...))
}

// TotalProductsGT applies the GT predicate on the "total_products" field.
func TotalProductsGT(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGT(FieldTotalProducts, v))
}

// TotalProductsGTE applies the GTE predicate on the "total_products" field.
func TotalProductsGTE(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGTE(FieldTotalProducts, v))
}

// TotalProductsLT applies the LT predicate on the "total_products" field.
func TotalProductsLT(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLT(FieldTotalProducts, v))
}

// TotalProductsLTE applies the LTE predicate on the "total_products" field.
func TotalProductsLTE(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLTE(FieldTotalProducts, v))
}

// ActiveProductsEQ applies the EQ predicate on the "active_products" field.
func ActiveProductsEQ(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldActiveProducts, v))
}

// ActiveProductsNEQ applies the NEQ predicate on the "active_products" field.
func ActiveProductsNEQ(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNEQ(FieldActiveProducts, v))
}

// ActiveProductsIn applies the In predicate on the "active_products" field.
func ActiveProductsIn(vs ...int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldIn(FieldActiveProducts, vs...))
}

// ActiveProductsNotIn applies the NotIn predicate on the "active_products" field.
func ActiveProductsNotIn(vs ...int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNotIn(FieldActiveProducts, vs...))
}

// ActiveProductsGT applies the GT predicate on the "active_products" field.
func ActiveProductsGT(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGT(FieldActiveProducts, v))
}

// ActiveProductsGTE applies the GTE predicate on the "active_products" field.
func ActiveProductsGTE(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGTE(FieldActiveProducts, v))
}

// ActiveProductsLT applies the LT predicate on the "active_products" field.
func ActiveProductsLT(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLT(FieldActiveProducts, v))
}

// ActiveProductsLTE applies the LTE predicate on the "active_products" field.
func ActiveProductsLTE(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLTE(FieldActiveProducts, v))
}

// TotalStockEQ applies the EQ predicate on the "total_stock" field.
func TotalStockEQ(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldTotalStock, v))
}

// TotalStockNEQ applies the NEQ predicate on the "total_stock" field.
func TotalStockNEQ(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNEQ(FieldTotalStock, v))
}

// TotalStockIn applies the In predicate on the "total_stock" field.
func TotalStockIn(vs ...int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldIn(FieldTotalStock, vs...))
}

// TotalStockNotIn applies the NotIn predicate on the "total_stock" field.
func TotalStockNotIn(vs ...int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNotIn(FieldTotalStock, vs...))
}

// TotalStockGT applies the GT predicate on the "total_stock" field.
func TotalStockGT(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGT(FieldTotalStock, v))
}

// TotalStockGTE applies the GTE predicate on the "total_stock" field.
func TotalStockGTE(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGTE(FieldTotalStock, v))
}

// TotalStockLT applies the LT predicate on the "total_stock" field.
func TotalStockLT(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLT(FieldTotalStock, v))
}

// TotalStockLTE applies the LTE predicate on the "total_stock" field.
func TotalStockLTE(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLTE(FieldTotalStock, v))
}

// TotalStockValueEQ applies the EQ predicate on the "total_stock_value" field.
func TotalStockValueEQ(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldTotalStockValue, v))
}

// TotalStockValueNEQ applies the NEQ predicate on the "total_stock_value" field.
func TotalStockValueNEQ(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNEQ(FieldTotalStockValue, v))
}

// TotalStockValueIn applies the In predicate on the "total_stock_value" field.
func TotalStockValueIn(vs ...decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldIn(FieldTotalStockValue, vs...))
}

// TotalStockValueNotIn applies the NotIn predicate on the "total_stock_value" field.
func TotalStockValueNotIn(vs ...decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNotIn(FieldTotalStockValue, vs...))
}

// TotalStockValueGT applies the GT predicate on the "total_stock_value" field.
func TotalStockValueGT(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGT(FieldTotalStockValue, v))
}

// TotalStockValueGTE applies the GTE predicate on the "total_stock_value" field.
func TotalStockValueGTE(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGTE(FieldTotalStockValue, v))
}

// TotalStockValueLT applies the LT predicate on the "total_stock_value" field.
func TotalStockValueLT(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLT(FieldTotalStockValue, v))
}

// TotalStockValueLTE applies the LTE predicate on the "total_stock_value" field.
func TotalStockValueLTE(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLTE(FieldTotalStockValue, v))
}

// LowStockProductsEQ applies the EQ predicate on the "low_stock_products" field.
func LowStockProductsEQ(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldLowStockProducts, v))
}

// LowStockProductsNEQ applies the NEQ predicate on the "low_stock_products" field.
func LowStockProductsNEQ(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNEQ(FieldLowStockProducts, v))
}

// LowStockProductsIn applies the In predicate on the "low_stock_products" field.
func LowStockProductsIn(vs ...int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldIn(FieldLowStockProducts, vs...))
}

// LowStockProductsNotIn applies the NotIn predicate on the "low_stock_products" field.
func LowStockProductsNotIn(vs ...int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNotIn(FieldLowStockProducts, vs...))
}

// LowStockProductsGT applies the GT predicate on the "low_stock_products" field.
func LowStockProductsGT(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGT(FieldLowStockProducts, v))
}

// LowStockProductsGTE applies the GTE predicate on the "low_stock_products" field.
func LowStockProductsGTE(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGTE(FieldLowStockProducts, v))
}

// LowStockProductsLT applies the LT predicate on the "low_stock_products" field.
func LowStockProductsLT(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLT(FieldLowStockProducts, v))
}

// LowStockProductsLTE applies the LTE predicate on the "low_stock_products" field.
func LowStockProductsLTE(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLTE(FieldLowStockProducts, v))
}

// TotalInQuantityEQ applies the EQ predicate on the "total_in_quantity" field.
func TotalInQuantityEQ(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldTotalInQuantity, v))
}

// TotalInQuantityNEQ applies the NEQ predicate on the "total_in_quantity" field.
func TotalInQuantityNEQ(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNEQ(FieldTotalInQuantity, v))
}

// TotalInQuantityIn applies the In predicate on the "total_in_quantity" field.
func TotalInQuantityIn(vs ...int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldIn(FieldTotalInQuantity, vs...))
}

// TotalInQuantityNotIn applies the NotIn predicate on the "total_in_quantity" field.
func TotalInQuantityNotIn(vs ...int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNotIn(FieldTotalInQuantity, vs...))
}

// TotalInQuantityGT applies the GT predicate on the "total_in_quantity" field.
func TotalInQuantityGT(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGT(FieldTotalInQuantity, v))
}

// TotalInQuantityGTE applies the GTE predicate on the "total_in_quantity" field.
func TotalInQuantityGTE(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGTE(FieldTotalInQuantity, v))
}

// TotalInQuantityLT applies the LT predicate on the "total_in_quantity" field.
func TotalInQuantityLT(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLT(FieldTotalInQuantity, v))
}

// TotalInQuantityLTE applies the LTE predicate on the "total_in_quantity" field.
func TotalInQuantityLTE(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLTE(FieldTotalInQuantity, v))
}

// TotalInAmountEQ applies the EQ predicate on the "total_in_amount" field.
func TotalInAmountEQ(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldTotalInAmount, v))
}

// TotalInAmountNEQ applies the NEQ predicate on the "total_in_amount" field.
func TotalInAmountNEQ(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNEQ(FieldTotalInAmount, v))
}

// TotalInAmountIn applies the In predicate on the "total_in_amount" field.
func TotalInAmountIn(vs ...decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldIn(FieldTotalInAmount, vs...))
}

// TotalInAmountNotIn applies the NotIn predicate on the "total_in_amount" field.
func TotalInAmountNotIn(vs ...decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNotIn(FieldTotalInAmount, vs...))
}

// TotalInAmountGT applies the GT predicate on the "total_in_amount" field.
func TotalInAmountGT(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGT(FieldTotalInAmount, v))
}

// TotalInAmountGTE applies the GTE predicate on the "total_in_amount" field.
func TotalInAmountGTE(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGTE(FieldTotalInAmount, v))
}

// TotalInAmountLT applies the LT predicate on the "total_in_amount" field.
func TotalInAmountLT(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLT(FieldTotalInAmount, v))
}

// TotalInAmountLTE applies the LTE predicate on the "total_in_amount" field.
func TotalInAmountLTE(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLTE(FieldTotalInAmount, v))
}

// TotalOutQuantityEQ applies the EQ predicate on the "total_out_quantity" field.
func TotalOutQuantityEQ(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldTotalOutQuantity, v))
}

// TotalOutQuantityNEQ applies the NEQ predicate on the "total_out_quantity" field.
func TotalOutQuantityNEQ(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNEQ(FieldTotalOutQuantity, v))
}

// TotalOutQuantityIn applies the In predicate on the "total_out_quantity" field.
func TotalOutQuantityIn(vs ...int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldIn(FieldTotalOutQuantity, vs...))
}

// TotalOutQuantityNotIn applies the NotIn predicate on the "total_out_quantity" field.
func TotalOutQuantityNotIn(vs ...int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNotIn(FieldTotalOutQuantity, vs...))
}

// TotalOutQuantityGT applies the GT predicate on the "total_out_quantity" field.
func TotalOutQuantityGT(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGT(FieldTotalOutQuantity, v))
}

// TotalOutQuantityGTE applies the GTE predicate on the "total_out_quantity" field.
func TotalOutQuantityGTE(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGTE(FieldTotalOutQuantity, v))
}

// TotalOutQuantityLT applies the LT predicate on the "total_out_quantity" field.
func TotalOutQuantityLT(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLT(FieldTotalOutQuantity, v))
}

// TotalOutQuantityLTE applies the LTE predicate on the "total_out_quantity" field.
func TotalOutQuantityLTE(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLTE(FieldTotalOutQuantity, v))
}

// TotalOutAmountEQ applies the EQ predicate on the "total_out_amount" field.
func TotalOutAmountEQ(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldTotalOutAmount, v))
}

// TotalOutAmountNEQ applies the NEQ predicate on the "total_out_amount" field.
func TotalOutAmountNEQ(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNEQ(FieldTotalOutAmount, v))
}

// TotalOutAmountIn applies the In predicate on the "total_out_amount" field.
func TotalOutAmountIn(vs ...decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldIn(FieldTotalOutAmount, vs...))
}

// TotalOutAmountNotIn applies the NotIn predicate on the "total_out_amount" field.
func TotalOutAmountNotIn(vs ...decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNotIn(FieldTotalOutAmount, vs...))
}

// TotalOutAmountGT applies the GT predicate on the "total_out_amount" field.
func TotalOutAmountGT(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGT(FieldTotalOutAmount, v))
}

// TotalOutAmountGTE applies the GTE predicate on the "total_out_amount" field.
func TotalOutAmountGTE(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGTE(FieldTotalOutAmount, v))
}

// TotalOutAmountLT applies the LT predicate on the "total_out_amount" field.
func TotalOutAmountLT(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLT(FieldTotalOutAmount, v))
}

// TotalOutAmountLTE applies the LTE predicate on the "total_out_amount" field.
func TotalOutAmountLTE(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLTE(FieldTotalOutAmount, v))
}

// TotalSalesAmountEQ applies the EQ predicate on the "total_sales_amount" field.
func TotalSalesAmountEQ(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldTotalSalesAmount, v))
}

// TotalSalesAmountNEQ applies the NEQ predicate on the "total_sales_amount" field.
func TotalSalesAmountNEQ(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNEQ(FieldTotalSalesAmount, v))
}

// TotalSalesAmountIn applies the In predicate on the "total_sales_amount" field.
func TotalSalesAmountIn(vs ...decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldIn(FieldTotalSalesAmount, vs...))
}

// TotalSalesAmountNotIn applies the NotIn predicate on the "total_sales_amount" field.
func TotalSalesAmountNotIn(vs ...decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNotIn(FieldTotalSalesAmount, vs...))
}

// TotalSalesAmountGT applies the GT predicate on the "total_sales_amount" field.
func TotalSalesAmountGT(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGT(FieldTotalSalesAmount, v))
}

// TotalSalesAmountGTE applies the GTE predicate on the "total_sales_amount" field.
func TotalSalesAmountGTE(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGTE(FieldTotalSalesAmount, v))
}

// TotalSalesAmountLT applies the LT predicate on the "total_sales_amount" field.
func TotalSalesAmountLT(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLT(FieldTotalSalesAmount, v))
}

// TotalSalesAmountLTE applies the LTE predicate on the "total_sales_amount" field.
func TotalSalesAmountLTE(v decimal.Decimal) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLTE(FieldTotalSalesAmount, v))
}

// TotalSalesQuantityEQ applies the EQ predicate on the "total_sales_quantity" field.
func TotalSalesQuantityEQ(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldEQ(FieldTotalSalesQuantity, v))
}

// TotalSalesQuantityNEQ applies the NEQ predicate on the "total_sales_quantity" field.
func TotalSalesQuantityNEQ(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNEQ(FieldTotalSalesQuantity, v))
}

// TotalSalesQuantityIn applies the In predicate on the "total_sales_quantity" field.
func TotalSalesQuantityIn(vs ...int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldIn(FieldTotalSalesQuantity, vs...))
}

// TotalSalesQuantityNotIn applies the NotIn predicate on the "total_sales_quantity" field.
func TotalSalesQuantityNotIn(vs ...int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldNotIn(FieldTotalSalesQuantity, vs...))
}

// TotalSalesQuantityGT applies the GT predicate on the "total_sales_quantity" field.
func TotalSalesQuantityGT(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGT(FieldTotalSalesQuantity, v))
}

// TotalSalesQuantityGTE applies the GTE predicate on the "total_sales_quantity" field.
func TotalSalesQuantityGTE(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldGTE(FieldTotalSalesQuantity, v))
}

// TotalSalesQuantityLT applies the LT predicate on the "total_sales_quantity" field.
func TotalSalesQuantityLT(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLT(FieldTotalSalesQuantity, v))
}

// TotalSalesQuantityLTE applies the LTE predicate on the "total_sales_quantity" field.
func TotalSalesQuantityLTE(v int) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.FieldLTE(FieldTotalSalesQuantity, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProductStatistics) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProductStatistics) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProductStatistics) predicate.ProductStatistics {
	return predicate.ProductStatistics(sql.NotPredicates(p))
}
