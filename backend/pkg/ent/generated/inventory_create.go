// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/inventory"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

// InventoryCreate is the builder for creating a Inventory entity.
type InventoryCreate struct {
	config
	mutation *InventoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ic *InventoryCreate) SetCreatedAt(i int64) *InventoryCreate {
	ic.mutation.SetCreatedAt(i)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableCreatedAt(i *int64) *InventoryCreate {
	if i != nil {
		ic.SetCreatedAt(*i)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *InventoryCreate) SetUpdatedAt(i int64) *InventoryCreate {
	ic.mutation.SetUpdatedAt(i)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableUpdatedAt(i *int64) *InventoryCreate {
	if i != nil {
		ic.SetUpdatedAt(*i)
	}
	return ic
}

// SetDeletedAt sets the "deleted_at" field.
func (ic *InventoryCreate) SetDeletedAt(i int64) *InventoryCreate {
	ic.mutation.SetDeletedAt(i)
	return ic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableDeletedAt(i *int64) *InventoryCreate {
	if i != nil {
		ic.SetDeletedAt(*i)
	}
	return ic
}

// SetTenantCode sets the "tenant_code" field.
func (ic *InventoryCreate) SetTenantCode(s string) *InventoryCreate {
	ic.mutation.SetTenantCode(s)
	return ic
}

// SetInventoryID sets the "inventory_id" field.
func (ic *InventoryCreate) SetInventoryID(s string) *InventoryCreate {
	ic.mutation.SetInventoryID(s)
	return ic
}

// SetProductID sets the "product_id" field.
func (ic *InventoryCreate) SetProductID(s string) *InventoryCreate {
	ic.mutation.SetProductID(s)
	return ic
}

// SetOperationType sets the "operation_type" field.
func (ic *InventoryCreate) SetOperationType(s string) *InventoryCreate {
	ic.mutation.SetOperationType(s)
	return ic
}

// SetQuantity sets the "quantity" field.
func (ic *InventoryCreate) SetQuantity(i int) *InventoryCreate {
	ic.mutation.SetQuantity(i)
	return ic
}

// SetUnitPrice sets the "unit_price" field.
func (ic *InventoryCreate) SetUnitPrice(d decimal.Decimal) *InventoryCreate {
	ic.mutation.SetUnitPrice(d)
	return ic
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableUnitPrice(d *decimal.Decimal) *InventoryCreate {
	if d != nil {
		ic.SetUnitPrice(*d)
	}
	return ic
}

// SetTotalAmount sets the "total_amount" field.
func (ic *InventoryCreate) SetTotalAmount(d decimal.Decimal) *InventoryCreate {
	ic.mutation.SetTotalAmount(d)
	return ic
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableTotalAmount(d *decimal.Decimal) *InventoryCreate {
	if d != nil {
		ic.SetTotalAmount(*d)
	}
	return ic
}

// SetOperatorID sets the "operator_id" field.
func (ic *InventoryCreate) SetOperatorID(s string) *InventoryCreate {
	ic.mutation.SetOperatorID(s)
	return ic
}

// SetRemark sets the "remark" field.
func (ic *InventoryCreate) SetRemark(s string) *InventoryCreate {
	ic.mutation.SetRemark(s)
	return ic
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableRemark(s *string) *InventoryCreate {
	if s != nil {
		ic.SetRemark(*s)
	}
	return ic
}

// SetOperationTime sets the "operation_time" field.
func (ic *InventoryCreate) SetOperationTime(i int64) *InventoryCreate {
	ic.mutation.SetOperationTime(i)
	return ic
}

// SetBeforeStock sets the "before_stock" field.
func (ic *InventoryCreate) SetBeforeStock(i int) *InventoryCreate {
	ic.mutation.SetBeforeStock(i)
	return ic
}

// SetNillableBeforeStock sets the "before_stock" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableBeforeStock(i *int) *InventoryCreate {
	if i != nil {
		ic.SetBeforeStock(*i)
	}
	return ic
}

// SetAfterStock sets the "after_stock" field.
func (ic *InventoryCreate) SetAfterStock(i int) *InventoryCreate {
	ic.mutation.SetAfterStock(i)
	return ic
}

// SetNillableAfterStock sets the "after_stock" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableAfterStock(i *int) *InventoryCreate {
	if i != nil {
		ic.SetAfterStock(*i)
	}
	return ic
}

// Mutation returns the InventoryMutation object of the builder.
func (ic *InventoryCreate) Mutation() *InventoryMutation {
	return ic.mutation
}

// Save creates the Inventory in the database.
func (ic *InventoryCreate) Save(ctx context.Context) (*Inventory, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InventoryCreate) SaveX(ctx context.Context) *Inventory {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InventoryCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InventoryCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *InventoryCreate) defaults() {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := inventory.DefaultCreatedAt
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		v := inventory.DefaultUpdatedAt
		ic.mutation.SetUpdatedAt(v)
	}
	if _, ok := ic.mutation.UnitPrice(); !ok {
		v := inventory.DefaultUnitPrice
		ic.mutation.SetUnitPrice(v)
	}
	if _, ok := ic.mutation.TotalAmount(); !ok {
		v := inventory.DefaultTotalAmount
		ic.mutation.SetTotalAmount(v)
	}
	if _, ok := ic.mutation.Remark(); !ok {
		v := inventory.DefaultRemark
		ic.mutation.SetRemark(v)
	}
	if _, ok := ic.mutation.BeforeStock(); !ok {
		v := inventory.DefaultBeforeStock
		ic.mutation.SetBeforeStock(v)
	}
	if _, ok := ic.mutation.AfterStock(); !ok {
		v := inventory.DefaultAfterStock
		ic.mutation.SetAfterStock(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InventoryCreate) check() error {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Inventory.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "Inventory.updated_at"`)}
	}
	if _, ok := ic.mutation.TenantCode(); !ok {
		return &ValidationError{Name: "tenant_code", err: errors.New(`generated: missing required field "Inventory.tenant_code"`)}
	}
	if _, ok := ic.mutation.InventoryID(); !ok {
		return &ValidationError{Name: "inventory_id", err: errors.New(`generated: missing required field "Inventory.inventory_id"`)}
	}
	if _, ok := ic.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product_id", err: errors.New(`generated: missing required field "Inventory.product_id"`)}
	}
	if v, ok := ic.mutation.ProductID(); ok {
		if err := inventory.ProductIDValidator(v); err != nil {
			return &ValidationError{Name: "product_id", err: fmt.Errorf(`generated: validator failed for field "Inventory.product_id": %w`, err)}
		}
	}
	if _, ok := ic.mutation.OperationType(); !ok {
		return &ValidationError{Name: "operation_type", err: errors.New(`generated: missing required field "Inventory.operation_type"`)}
	}
	if v, ok := ic.mutation.OperationType(); ok {
		if err := inventory.OperationTypeValidator(v); err != nil {
			return &ValidationError{Name: "operation_type", err: fmt.Errorf(`generated: validator failed for field "Inventory.operation_type": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`generated: missing required field "Inventory.quantity"`)}
	}
	if _, ok := ic.mutation.UnitPrice(); !ok {
		return &ValidationError{Name: "unit_price", err: errors.New(`generated: missing required field "Inventory.unit_price"`)}
	}
	if _, ok := ic.mutation.TotalAmount(); !ok {
		return &ValidationError{Name: "total_amount", err: errors.New(`generated: missing required field "Inventory.total_amount"`)}
	}
	if _, ok := ic.mutation.OperatorID(); !ok {
		return &ValidationError{Name: "operator_id", err: errors.New(`generated: missing required field "Inventory.operator_id"`)}
	}
	if _, ok := ic.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`generated: missing required field "Inventory.remark"`)}
	}
	if _, ok := ic.mutation.OperationTime(); !ok {
		return &ValidationError{Name: "operation_time", err: errors.New(`generated: missing required field "Inventory.operation_time"`)}
	}
	if _, ok := ic.mutation.BeforeStock(); !ok {
		return &ValidationError{Name: "before_stock", err: errors.New(`generated: missing required field "Inventory.before_stock"`)}
	}
	if _, ok := ic.mutation.AfterStock(); !ok {
		return &ValidationError{Name: "after_stock", err: errors.New(`generated: missing required field "Inventory.after_stock"`)}
	}
	return nil
}

func (ic *InventoryCreate) sqlSave(ctx context.Context) (*Inventory, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *InventoryCreate) createSpec() (*Inventory, *sqlgraph.CreateSpec) {
	var (
		_node = &Inventory{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(inventory.Table, sqlgraph.NewFieldSpec(inventory.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ic.conflict
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(inventory.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(inventory.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := ic.mutation.DeletedAt(); ok {
		_spec.SetField(inventory.FieldDeletedAt, field.TypeInt64, value)
		_node.DeletedAt = &value
	}
	if value, ok := ic.mutation.TenantCode(); ok {
		_spec.SetField(inventory.FieldTenantCode, field.TypeString, value)
		_node.TenantCode = value
	}
	if value, ok := ic.mutation.InventoryID(); ok {
		_spec.SetField(inventory.FieldInventoryID, field.TypeString, value)
		_node.InventoryID = value
	}
	if value, ok := ic.mutation.ProductID(); ok {
		_spec.SetField(inventory.FieldProductID, field.TypeString, value)
		_node.ProductID = value
	}
	if value, ok := ic.mutation.OperationType(); ok {
		_spec.SetField(inventory.FieldOperationType, field.TypeString, value)
		_node.OperationType = value
	}
	if value, ok := ic.mutation.Quantity(); ok {
		_spec.SetField(inventory.FieldQuantity, field.TypeInt, value)
		_node.Quantity = value
	}
	if value, ok := ic.mutation.UnitPrice(); ok {
		_spec.SetField(inventory.FieldUnitPrice, field.TypeOther, value)
		_node.UnitPrice = value
	}
	if value, ok := ic.mutation.TotalAmount(); ok {
		_spec.SetField(inventory.FieldTotalAmount, field.TypeOther, value)
		_node.TotalAmount = value
	}
	if value, ok := ic.mutation.OperatorID(); ok {
		_spec.SetField(inventory.FieldOperatorID, field.TypeString, value)
		_node.OperatorID = value
	}
	if value, ok := ic.mutation.Remark(); ok {
		_spec.SetField(inventory.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := ic.mutation.OperationTime(); ok {
		_spec.SetField(inventory.FieldOperationTime, field.TypeInt64, value)
		_node.OperationTime = value
	}
	if value, ok := ic.mutation.BeforeStock(); ok {
		_spec.SetField(inventory.FieldBeforeStock, field.TypeInt, value)
		_node.BeforeStock = value
	}
	if value, ok := ic.mutation.AfterStock(); ok {
		_spec.SetField(inventory.FieldAfterStock, field.TypeInt, value)
		_node.AfterStock = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Inventory.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InventoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ic *InventoryCreate) OnConflict(opts ...sql.ConflictOption) *InventoryUpsertOne {
	ic.conflict = opts
	return &InventoryUpsertOne{
		create: ic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Inventory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ic *InventoryCreate) OnConflictColumns(columns ...string) *InventoryUpsertOne {
	ic.conflict = append(ic.conflict, sql.ConflictColumns(columns...))
	return &InventoryUpsertOne{
		create: ic,
	}
}

type (
	// InventoryUpsertOne is the builder for "upsert"-ing
	//  one Inventory node.
	InventoryUpsertOne struct {
		create *InventoryCreate
	}

	// InventoryUpsert is the "OnConflict" setter.
	InventoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *InventoryUpsert) SetUpdatedAt(v int64) *InventoryUpsert {
	u.Set(inventory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateUpdatedAt() *InventoryUpsert {
	u.SetExcluded(inventory.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *InventoryUpsert) AddUpdatedAt(v int64) *InventoryUpsert {
	u.Add(inventory.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *InventoryUpsert) SetDeletedAt(v int64) *InventoryUpsert {
	u.Set(inventory.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateDeletedAt() *InventoryUpsert {
	u.SetExcluded(inventory.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *InventoryUpsert) AddDeletedAt(v int64) *InventoryUpsert {
	u.Add(inventory.FieldDeletedAt, v)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *InventoryUpsert) ClearDeletedAt() *InventoryUpsert {
	u.SetNull(inventory.FieldDeletedAt)
	return u
}

// SetTenantCode sets the "tenant_code" field.
func (u *InventoryUpsert) SetTenantCode(v string) *InventoryUpsert {
	u.Set(inventory.FieldTenantCode, v)
	return u
}

// UpdateTenantCode sets the "tenant_code" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateTenantCode() *InventoryUpsert {
	u.SetExcluded(inventory.FieldTenantCode)
	return u
}

// SetInventoryID sets the "inventory_id" field.
func (u *InventoryUpsert) SetInventoryID(v string) *InventoryUpsert {
	u.Set(inventory.FieldInventoryID, v)
	return u
}

// UpdateInventoryID sets the "inventory_id" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateInventoryID() *InventoryUpsert {
	u.SetExcluded(inventory.FieldInventoryID)
	return u
}

// SetProductID sets the "product_id" field.
func (u *InventoryUpsert) SetProductID(v string) *InventoryUpsert {
	u.Set(inventory.FieldProductID, v)
	return u
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateProductID() *InventoryUpsert {
	u.SetExcluded(inventory.FieldProductID)
	return u
}

// SetOperationType sets the "operation_type" field.
func (u *InventoryUpsert) SetOperationType(v string) *InventoryUpsert {
	u.Set(inventory.FieldOperationType, v)
	return u
}

// UpdateOperationType sets the "operation_type" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateOperationType() *InventoryUpsert {
	u.SetExcluded(inventory.FieldOperationType)
	return u
}

// SetQuantity sets the "quantity" field.
func (u *InventoryUpsert) SetQuantity(v int) *InventoryUpsert {
	u.Set(inventory.FieldQuantity, v)
	return u
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateQuantity() *InventoryUpsert {
	u.SetExcluded(inventory.FieldQuantity)
	return u
}

// AddQuantity adds v to the "quantity" field.
func (u *InventoryUpsert) AddQuantity(v int) *InventoryUpsert {
	u.Add(inventory.FieldQuantity, v)
	return u
}

// SetUnitPrice sets the "unit_price" field.
func (u *InventoryUpsert) SetUnitPrice(v decimal.Decimal) *InventoryUpsert {
	u.Set(inventory.FieldUnitPrice, v)
	return u
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateUnitPrice() *InventoryUpsert {
	u.SetExcluded(inventory.FieldUnitPrice)
	return u
}

// SetTotalAmount sets the "total_amount" field.
func (u *InventoryUpsert) SetTotalAmount(v decimal.Decimal) *InventoryUpsert {
	u.Set(inventory.FieldTotalAmount, v)
	return u
}

// UpdateTotalAmount sets the "total_amount" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateTotalAmount() *InventoryUpsert {
	u.SetExcluded(inventory.FieldTotalAmount)
	return u
}

// SetOperatorID sets the "operator_id" field.
func (u *InventoryUpsert) SetOperatorID(v string) *InventoryUpsert {
	u.Set(inventory.FieldOperatorID, v)
	return u
}

// UpdateOperatorID sets the "operator_id" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateOperatorID() *InventoryUpsert {
	u.SetExcluded(inventory.FieldOperatorID)
	return u
}

// SetRemark sets the "remark" field.
func (u *InventoryUpsert) SetRemark(v string) *InventoryUpsert {
	u.Set(inventory.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateRemark() *InventoryUpsert {
	u.SetExcluded(inventory.FieldRemark)
	return u
}

// SetOperationTime sets the "operation_time" field.
func (u *InventoryUpsert) SetOperationTime(v int64) *InventoryUpsert {
	u.Set(inventory.FieldOperationTime, v)
	return u
}

// UpdateOperationTime sets the "operation_time" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateOperationTime() *InventoryUpsert {
	u.SetExcluded(inventory.FieldOperationTime)
	return u
}

// AddOperationTime adds v to the "operation_time" field.
func (u *InventoryUpsert) AddOperationTime(v int64) *InventoryUpsert {
	u.Add(inventory.FieldOperationTime, v)
	return u
}

// SetBeforeStock sets the "before_stock" field.
func (u *InventoryUpsert) SetBeforeStock(v int) *InventoryUpsert {
	u.Set(inventory.FieldBeforeStock, v)
	return u
}

// UpdateBeforeStock sets the "before_stock" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateBeforeStock() *InventoryUpsert {
	u.SetExcluded(inventory.FieldBeforeStock)
	return u
}

// AddBeforeStock adds v to the "before_stock" field.
func (u *InventoryUpsert) AddBeforeStock(v int) *InventoryUpsert {
	u.Add(inventory.FieldBeforeStock, v)
	return u
}

// SetAfterStock sets the "after_stock" field.
func (u *InventoryUpsert) SetAfterStock(v int) *InventoryUpsert {
	u.Set(inventory.FieldAfterStock, v)
	return u
}

// UpdateAfterStock sets the "after_stock" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateAfterStock() *InventoryUpsert {
	u.SetExcluded(inventory.FieldAfterStock)
	return u
}

// AddAfterStock adds v to the "after_stock" field.
func (u *InventoryUpsert) AddAfterStock(v int) *InventoryUpsert {
	u.Add(inventory.FieldAfterStock, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Inventory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *InventoryUpsertOne) UpdateNewValues() *InventoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(inventory.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Inventory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *InventoryUpsertOne) Ignore() *InventoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InventoryUpsertOne) DoNothing() *InventoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InventoryCreate.OnConflict
// documentation for more info.
func (u *InventoryUpsertOne) Update(set func(*InventoryUpsert)) *InventoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InventoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InventoryUpsertOne) SetUpdatedAt(v int64) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *InventoryUpsertOne) AddUpdatedAt(v int64) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateUpdatedAt() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *InventoryUpsertOne) SetDeletedAt(v int64) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *InventoryUpsertOne) AddDeletedAt(v int64) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateDeletedAt() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *InventoryUpsertOne) ClearDeletedAt() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTenantCode sets the "tenant_code" field.
func (u *InventoryUpsertOne) SetTenantCode(v string) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetTenantCode(v)
	})
}

// UpdateTenantCode sets the "tenant_code" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateTenantCode() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateTenantCode()
	})
}

// SetInventoryID sets the "inventory_id" field.
func (u *InventoryUpsertOne) SetInventoryID(v string) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetInventoryID(v)
	})
}

// UpdateInventoryID sets the "inventory_id" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateInventoryID() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateInventoryID()
	})
}

// SetProductID sets the "product_id" field.
func (u *InventoryUpsertOne) SetProductID(v string) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetProductID(v)
	})
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateProductID() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateProductID()
	})
}

// SetOperationType sets the "operation_type" field.
func (u *InventoryUpsertOne) SetOperationType(v string) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetOperationType(v)
	})
}

// UpdateOperationType sets the "operation_type" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateOperationType() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateOperationType()
	})
}

// SetQuantity sets the "quantity" field.
func (u *InventoryUpsertOne) SetQuantity(v int) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetQuantity(v)
	})
}

// AddQuantity adds v to the "quantity" field.
func (u *InventoryUpsertOne) AddQuantity(v int) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.AddQuantity(v)
	})
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateQuantity() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateQuantity()
	})
}

// SetUnitPrice sets the "unit_price" field.
func (u *InventoryUpsertOne) SetUnitPrice(v decimal.Decimal) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetUnitPrice(v)
	})
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateUnitPrice() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateUnitPrice()
	})
}

// SetTotalAmount sets the "total_amount" field.
func (u *InventoryUpsertOne) SetTotalAmount(v decimal.Decimal) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetTotalAmount(v)
	})
}

// UpdateTotalAmount sets the "total_amount" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateTotalAmount() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateTotalAmount()
	})
}

// SetOperatorID sets the "operator_id" field.
func (u *InventoryUpsertOne) SetOperatorID(v string) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetOperatorID(v)
	})
}

// UpdateOperatorID sets the "operator_id" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateOperatorID() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateOperatorID()
	})
}

// SetRemark sets the "remark" field.
func (u *InventoryUpsertOne) SetRemark(v string) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateRemark() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateRemark()
	})
}

// SetOperationTime sets the "operation_time" field.
func (u *InventoryUpsertOne) SetOperationTime(v int64) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetOperationTime(v)
	})
}

// AddOperationTime adds v to the "operation_time" field.
func (u *InventoryUpsertOne) AddOperationTime(v int64) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.AddOperationTime(v)
	})
}

// UpdateOperationTime sets the "operation_time" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateOperationTime() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateOperationTime()
	})
}

// SetBeforeStock sets the "before_stock" field.
func (u *InventoryUpsertOne) SetBeforeStock(v int) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetBeforeStock(v)
	})
}

// AddBeforeStock adds v to the "before_stock" field.
func (u *InventoryUpsertOne) AddBeforeStock(v int) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.AddBeforeStock(v)
	})
}

// UpdateBeforeStock sets the "before_stock" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateBeforeStock() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateBeforeStock()
	})
}

// SetAfterStock sets the "after_stock" field.
func (u *InventoryUpsertOne) SetAfterStock(v int) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetAfterStock(v)
	})
}

// AddAfterStock adds v to the "after_stock" field.
func (u *InventoryUpsertOne) AddAfterStock(v int) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.AddAfterStock(v)
	})
}

// UpdateAfterStock sets the "after_stock" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateAfterStock() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateAfterStock()
	})
}

// Exec executes the query.
func (u *InventoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for InventoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InventoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InventoryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InventoryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InventoryCreateBulk is the builder for creating many Inventory entities in bulk.
type InventoryCreateBulk struct {
	config
	err      error
	builders []*InventoryCreate
	conflict []sql.ConflictOption
}

// Save creates the Inventory entities in the database.
func (icb *InventoryCreateBulk) Save(ctx context.Context) ([]*Inventory, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Inventory, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InventoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = icb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InventoryCreateBulk) SaveX(ctx context.Context) []*Inventory {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InventoryCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InventoryCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Inventory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InventoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (icb *InventoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *InventoryUpsertBulk {
	icb.conflict = opts
	return &InventoryUpsertBulk{
		create: icb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Inventory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (icb *InventoryCreateBulk) OnConflictColumns(columns ...string) *InventoryUpsertBulk {
	icb.conflict = append(icb.conflict, sql.ConflictColumns(columns...))
	return &InventoryUpsertBulk{
		create: icb,
	}
}

// InventoryUpsertBulk is the builder for "upsert"-ing
// a bulk of Inventory nodes.
type InventoryUpsertBulk struct {
	create *InventoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Inventory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *InventoryUpsertBulk) UpdateNewValues() *InventoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(inventory.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Inventory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *InventoryUpsertBulk) Ignore() *InventoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InventoryUpsertBulk) DoNothing() *InventoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InventoryCreateBulk.OnConflict
// documentation for more info.
func (u *InventoryUpsertBulk) Update(set func(*InventoryUpsert)) *InventoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InventoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InventoryUpsertBulk) SetUpdatedAt(v int64) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *InventoryUpsertBulk) AddUpdatedAt(v int64) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateUpdatedAt() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *InventoryUpsertBulk) SetDeletedAt(v int64) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *InventoryUpsertBulk) AddDeletedAt(v int64) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateDeletedAt() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *InventoryUpsertBulk) ClearDeletedAt() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTenantCode sets the "tenant_code" field.
func (u *InventoryUpsertBulk) SetTenantCode(v string) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetTenantCode(v)
	})
}

// UpdateTenantCode sets the "tenant_code" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateTenantCode() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateTenantCode()
	})
}

// SetInventoryID sets the "inventory_id" field.
func (u *InventoryUpsertBulk) SetInventoryID(v string) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetInventoryID(v)
	})
}

// UpdateInventoryID sets the "inventory_id" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateInventoryID() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateInventoryID()
	})
}

// SetProductID sets the "product_id" field.
func (u *InventoryUpsertBulk) SetProductID(v string) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetProductID(v)
	})
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateProductID() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateProductID()
	})
}

// SetOperationType sets the "operation_type" field.
func (u *InventoryUpsertBulk) SetOperationType(v string) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetOperationType(v)
	})
}

// UpdateOperationType sets the "operation_type" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateOperationType() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateOperationType()
	})
}

// SetQuantity sets the "quantity" field.
func (u *InventoryUpsertBulk) SetQuantity(v int) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetQuantity(v)
	})
}

// AddQuantity adds v to the "quantity" field.
func (u *InventoryUpsertBulk) AddQuantity(v int) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.AddQuantity(v)
	})
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateQuantity() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateQuantity()
	})
}

// SetUnitPrice sets the "unit_price" field.
func (u *InventoryUpsertBulk) SetUnitPrice(v decimal.Decimal) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetUnitPrice(v)
	})
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateUnitPrice() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateUnitPrice()
	})
}

// SetTotalAmount sets the "total_amount" field.
func (u *InventoryUpsertBulk) SetTotalAmount(v decimal.Decimal) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetTotalAmount(v)
	})
}

// UpdateTotalAmount sets the "total_amount" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateTotalAmount() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateTotalAmount()
	})
}

// SetOperatorID sets the "operator_id" field.
func (u *InventoryUpsertBulk) SetOperatorID(v string) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetOperatorID(v)
	})
}

// UpdateOperatorID sets the "operator_id" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateOperatorID() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateOperatorID()
	})
}

// SetRemark sets the "remark" field.
func (u *InventoryUpsertBulk) SetRemark(v string) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateRemark() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateRemark()
	})
}

// SetOperationTime sets the "operation_time" field.
func (u *InventoryUpsertBulk) SetOperationTime(v int64) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetOperationTime(v)
	})
}

// AddOperationTime adds v to the "operation_time" field.
func (u *InventoryUpsertBulk) AddOperationTime(v int64) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.AddOperationTime(v)
	})
}

// UpdateOperationTime sets the "operation_time" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateOperationTime() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateOperationTime()
	})
}

// SetBeforeStock sets the "before_stock" field.
func (u *InventoryUpsertBulk) SetBeforeStock(v int) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetBeforeStock(v)
	})
}

// AddBeforeStock adds v to the "before_stock" field.
func (u *InventoryUpsertBulk) AddBeforeStock(v int) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.AddBeforeStock(v)
	})
}

// UpdateBeforeStock sets the "before_stock" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateBeforeStock() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateBeforeStock()
	})
}

// SetAfterStock sets the "after_stock" field.
func (u *InventoryUpsertBulk) SetAfterStock(v int) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetAfterStock(v)
	})
}

// AddAfterStock adds v to the "after_stock" field.
func (u *InventoryUpsertBulk) AddAfterStock(v int) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.AddAfterStock(v)
	})
}

// UpdateAfterStock sets the "after_stock" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateAfterStock() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateAfterStock()
	})
}

// Exec executes the query.
func (u *InventoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("generated: OnConflict was set for builder %d. Set it on the InventoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("generated: missing options for InventoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InventoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
