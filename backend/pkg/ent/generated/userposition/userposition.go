// Code generated by ent, DO NOT EDIT.

package userposition

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the userposition type in the database.
	Label = "user_position"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldPositionID holds the string denoting the position_id field in the database.
	FieldPositionID = "position_id"
	// Table holds the table name of the userposition in the database.
	Table = "sys_user_positions_relation"
)

// Columns holds all SQL columns for userposition fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldPositionID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	UserIDValidator func(string) error
	// PositionIDValidator is a validator for the "position_id" field. It is called by the builders before save.
	PositionIDValidator func(string) error
)

// OrderOption defines the ordering options for the UserPosition queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByPositionID orders the results by the position_id field.
func ByPositionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPositionID, opts...).ToFunc()
}
