// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/sysuser"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 用户
type SysUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// 修改时间
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt *int64 `json:"deleted_at,omitempty"`
	// 租户code
	TenantCode string `json:"tenant_code,omitempty"`
	// 用户ID
	UserID string `json:"user_id,omitempty"`
	// 用户名
	UserName string `json:"user_name,omitempty"`
	// hash后的密码
	PwdHashed string `json:"pwd_hashed,omitempty"`
	// 密码加盐
	PwdSalt string `json:"pwd_salt,omitempty"`
	// 登录后的token信息
	Token string `json:"token,omitempty"`
	// 用户昵称
	Name string `json:"name,omitempty"`
	// 头像
	Avatar string `json:"avatar,omitempty"`
	// 电话
	Phone string `json:"phone,omitempty"`
	// 邮箱
	Email string `json:"email,omitempty"`
	// 性别: 1：男 2：女
	Sex int `json:"sex,omitempty"`
	// 状态: 1:启用, 2:禁用
	Status       int `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysuser.FieldID, sysuser.FieldCreatedAt, sysuser.FieldUpdatedAt, sysuser.FieldDeletedAt, sysuser.FieldSex, sysuser.FieldStatus:
			values[i] = new(sql.NullInt64)
		case sysuser.FieldTenantCode, sysuser.FieldUserID, sysuser.FieldUserName, sysuser.FieldPwdHashed, sysuser.FieldPwdSalt, sysuser.FieldToken, sysuser.FieldName, sysuser.FieldAvatar, sysuser.FieldPhone, sysuser.FieldEmail:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysUser fields.
func (su *SysUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			su.ID = int(value.Int64)
		case sysuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				su.CreatedAt = value.Int64
			}
		case sysuser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				su.UpdatedAt = value.Int64
			}
		case sysuser.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				su.DeletedAt = new(int64)
				*su.DeletedAt = value.Int64
			}
		case sysuser.FieldTenantCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_code", values[i])
			} else if value.Valid {
				su.TenantCode = value.String
			}
		case sysuser.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				su.UserID = value.String
			}
		case sysuser.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_name", values[i])
			} else if value.Valid {
				su.UserName = value.String
			}
		case sysuser.FieldPwdHashed:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pwd_hashed", values[i])
			} else if value.Valid {
				su.PwdHashed = value.String
			}
		case sysuser.FieldPwdSalt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pwd_salt", values[i])
			} else if value.Valid {
				su.PwdSalt = value.String
			}
		case sysuser.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				su.Token = value.String
			}
		case sysuser.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				su.Name = value.String
			}
		case sysuser.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				su.Avatar = value.String
			}
		case sysuser.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				su.Phone = value.String
			}
		case sysuser.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				su.Email = value.String
			}
		case sysuser.FieldSex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sex", values[i])
			} else if value.Valid {
				su.Sex = int(value.Int64)
			}
		case sysuser.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				su.Status = int(value.Int64)
			}
		default:
			su.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SysUser.
// This includes values selected through modifiers, order, etc.
func (su *SysUser) Value(name string) (ent.Value, error) {
	return su.selectValues.Get(name)
}

// Update returns a builder for updating this SysUser.
// Note that you need to call SysUser.Unwrap() before calling this method if this SysUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (su *SysUser) Update() *SysUserUpdateOne {
	return NewSysUserClient(su.config).UpdateOne(su)
}

// Unwrap unwraps the SysUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (su *SysUser) Unwrap() *SysUser {
	_tx, ok := su.config.driver.(*txDriver)
	if !ok {
		panic("generated: SysUser is not a transactional entity")
	}
	su.config.driver = _tx.drv
	return su
}

// String implements the fmt.Stringer.
func (su *SysUser) String() string {
	var builder strings.Builder
	builder.WriteString("SysUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", su.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", su.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", su.UpdatedAt))
	builder.WriteString(", ")
	if v := su.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("tenant_code=")
	builder.WriteString(su.TenantCode)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(su.UserID)
	builder.WriteString(", ")
	builder.WriteString("user_name=")
	builder.WriteString(su.UserName)
	builder.WriteString(", ")
	builder.WriteString("pwd_hashed=")
	builder.WriteString(su.PwdHashed)
	builder.WriteString(", ")
	builder.WriteString("pwd_salt=")
	builder.WriteString(su.PwdSalt)
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(su.Token)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(su.Name)
	builder.WriteString(", ")
	builder.WriteString("avatar=")
	builder.WriteString(su.Avatar)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(su.Phone)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(su.Email)
	builder.WriteString(", ")
	builder.WriteString("sex=")
	builder.WriteString(fmt.Sprintf("%v", su.Sex))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", su.Status))
	builder.WriteByte(')')
	return builder.String()
}

// SysUsers is a parsable slice of SysUser.
type SysUsers []*SysUser
