// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/userposition"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 用户岗位关联
type UserPosition struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 用户ID
	UserID string `json:"user_id,omitempty"`
	// 岗位ID
	PositionID   string `json:"position_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserPosition) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userposition.FieldID:
			values[i] = new(sql.NullInt64)
		case userposition.FieldUserID, userposition.FieldPositionID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserPosition fields.
func (up *UserPosition) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userposition.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			up.ID = int(value.Int64)
		case userposition.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				up.UserID = value.String
			}
		case userposition.FieldPositionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position_id", values[i])
			} else if value.Valid {
				up.PositionID = value.String
			}
		default:
			up.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserPosition.
// This includes values selected through modifiers, order, etc.
func (up *UserPosition) Value(name string) (ent.Value, error) {
	return up.selectValues.Get(name)
}

// Update returns a builder for updating this UserPosition.
// Note that you need to call UserPosition.Unwrap() before calling this method if this UserPosition
// was returned from a transaction, and the transaction was committed or rolled back.
func (up *UserPosition) Update() *UserPositionUpdateOne {
	return NewUserPositionClient(up.config).UpdateOne(up)
}

// Unwrap unwraps the UserPosition entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (up *UserPosition) Unwrap() *UserPosition {
	_tx, ok := up.config.driver.(*txDriver)
	if !ok {
		panic("generated: UserPosition is not a transactional entity")
	}
	up.config.driver = _tx.drv
	return up
}

// String implements the fmt.Stringer.
func (up *UserPosition) String() string {
	var builder strings.Builder
	builder.WriteString("UserPosition(")
	builder.WriteString(fmt.Sprintf("id=%v, ", up.ID))
	builder.WriteString("user_id=")
	builder.WriteString(up.UserID)
	builder.WriteString(", ")
	builder.WriteString("position_id=")
	builder.WriteString(up.PositionID)
	builder.WriteByte(')')
	return builder.String()
}

// UserPositions is a parsable slice of UserPosition.
type UserPositions []*UserPosition
