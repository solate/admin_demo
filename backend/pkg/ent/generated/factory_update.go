// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/factory"
	"admin_backend/pkg/ent/generated/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FactoryUpdate is the builder for updating Factory entities.
type FactoryUpdate struct {
	config
	hooks     []Hook
	mutation  *FactoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FactoryUpdate builder.
func (fu *FactoryUpdate) Where(ps ...predicate.Factory) *FactoryUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FactoryUpdate) SetUpdatedAt(i int64) *FactoryUpdate {
	fu.mutation.ResetUpdatedAt()
	fu.mutation.SetUpdatedAt(i)
	return fu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fu *FactoryUpdate) SetNillableUpdatedAt(i *int64) *FactoryUpdate {
	if i != nil {
		fu.SetUpdatedAt(*i)
	}
	return fu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (fu *FactoryUpdate) AddUpdatedAt(i int64) *FactoryUpdate {
	fu.mutation.AddUpdatedAt(i)
	return fu
}

// SetDeletedAt sets the "deleted_at" field.
func (fu *FactoryUpdate) SetDeletedAt(i int64) *FactoryUpdate {
	fu.mutation.ResetDeletedAt()
	fu.mutation.SetDeletedAt(i)
	return fu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fu *FactoryUpdate) SetNillableDeletedAt(i *int64) *FactoryUpdate {
	if i != nil {
		fu.SetDeletedAt(*i)
	}
	return fu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (fu *FactoryUpdate) AddDeletedAt(i int64) *FactoryUpdate {
	fu.mutation.AddDeletedAt(i)
	return fu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fu *FactoryUpdate) ClearDeletedAt() *FactoryUpdate {
	fu.mutation.ClearDeletedAt()
	return fu
}

// SetTenantCode sets the "tenant_code" field.
func (fu *FactoryUpdate) SetTenantCode(s string) *FactoryUpdate {
	fu.mutation.SetTenantCode(s)
	return fu
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (fu *FactoryUpdate) SetNillableTenantCode(s *string) *FactoryUpdate {
	if s != nil {
		fu.SetTenantCode(*s)
	}
	return fu
}

// SetFactoryID sets the "factory_id" field.
func (fu *FactoryUpdate) SetFactoryID(s string) *FactoryUpdate {
	fu.mutation.SetFactoryID(s)
	return fu
}

// SetNillableFactoryID sets the "factory_id" field if the given value is not nil.
func (fu *FactoryUpdate) SetNillableFactoryID(s *string) *FactoryUpdate {
	if s != nil {
		fu.SetFactoryID(*s)
	}
	return fu
}

// SetFactoryName sets the "factory_name" field.
func (fu *FactoryUpdate) SetFactoryName(s string) *FactoryUpdate {
	fu.mutation.SetFactoryName(s)
	return fu
}

// SetNillableFactoryName sets the "factory_name" field if the given value is not nil.
func (fu *FactoryUpdate) SetNillableFactoryName(s *string) *FactoryUpdate {
	if s != nil {
		fu.SetFactoryName(*s)
	}
	return fu
}

// SetAddress sets the "address" field.
func (fu *FactoryUpdate) SetAddress(s string) *FactoryUpdate {
	fu.mutation.SetAddress(s)
	return fu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (fu *FactoryUpdate) SetNillableAddress(s *string) *FactoryUpdate {
	if s != nil {
		fu.SetAddress(*s)
	}
	return fu
}

// SetContactPhone sets the "contact_phone" field.
func (fu *FactoryUpdate) SetContactPhone(s string) *FactoryUpdate {
	fu.mutation.SetContactPhone(s)
	return fu
}

// SetNillableContactPhone sets the "contact_phone" field if the given value is not nil.
func (fu *FactoryUpdate) SetNillableContactPhone(s *string) *FactoryUpdate {
	if s != nil {
		fu.SetContactPhone(*s)
	}
	return fu
}

// SetStatus sets the "status" field.
func (fu *FactoryUpdate) SetStatus(i int) *FactoryUpdate {
	fu.mutation.ResetStatus()
	fu.mutation.SetStatus(i)
	return fu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fu *FactoryUpdate) SetNillableStatus(i *int) *FactoryUpdate {
	if i != nil {
		fu.SetStatus(*i)
	}
	return fu
}

// AddStatus adds i to the "status" field.
func (fu *FactoryUpdate) AddStatus(i int) *FactoryUpdate {
	fu.mutation.AddStatus(i)
	return fu
}

// Mutation returns the FactoryMutation object of the builder.
func (fu *FactoryUpdate) Mutation() *FactoryMutation {
	return fu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FactoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FactoryUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FactoryUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FactoryUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FactoryUpdate) check() error {
	if v, ok := fu.mutation.FactoryName(); ok {
		if err := factory.FactoryNameValidator(v); err != nil {
			return &ValidationError{Name: "factory_name", err: fmt.Errorf(`generated: validator failed for field "Factory.factory_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fu *FactoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FactoryUpdate {
	fu.modifiers = append(fu.modifiers, modifiers...)
	return fu
}

func (fu *FactoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(factory.Table, factory.Columns, sqlgraph.NewFieldSpec(factory.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(factory.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := fu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(factory.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := fu.mutation.DeletedAt(); ok {
		_spec.SetField(factory.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := fu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(factory.FieldDeletedAt, field.TypeInt64, value)
	}
	if fu.mutation.DeletedAtCleared() {
		_spec.ClearField(factory.FieldDeletedAt, field.TypeInt64)
	}
	if value, ok := fu.mutation.TenantCode(); ok {
		_spec.SetField(factory.FieldTenantCode, field.TypeString, value)
	}
	if value, ok := fu.mutation.FactoryID(); ok {
		_spec.SetField(factory.FieldFactoryID, field.TypeString, value)
	}
	if value, ok := fu.mutation.FactoryName(); ok {
		_spec.SetField(factory.FieldFactoryName, field.TypeString, value)
	}
	if value, ok := fu.mutation.Address(); ok {
		_spec.SetField(factory.FieldAddress, field.TypeString, value)
	}
	if value, ok := fu.mutation.ContactPhone(); ok {
		_spec.SetField(factory.FieldContactPhone, field.TypeString, value)
	}
	if value, ok := fu.mutation.Status(); ok {
		_spec.SetField(factory.FieldStatus, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedStatus(); ok {
		_spec.AddField(factory.FieldStatus, field.TypeInt, value)
	}
	_spec.AddModifiers(fu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{factory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FactoryUpdateOne is the builder for updating a single Factory entity.
type FactoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FactoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FactoryUpdateOne) SetUpdatedAt(i int64) *FactoryUpdateOne {
	fuo.mutation.ResetUpdatedAt()
	fuo.mutation.SetUpdatedAt(i)
	return fuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fuo *FactoryUpdateOne) SetNillableUpdatedAt(i *int64) *FactoryUpdateOne {
	if i != nil {
		fuo.SetUpdatedAt(*i)
	}
	return fuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (fuo *FactoryUpdateOne) AddUpdatedAt(i int64) *FactoryUpdateOne {
	fuo.mutation.AddUpdatedAt(i)
	return fuo
}

// SetDeletedAt sets the "deleted_at" field.
func (fuo *FactoryUpdateOne) SetDeletedAt(i int64) *FactoryUpdateOne {
	fuo.mutation.ResetDeletedAt()
	fuo.mutation.SetDeletedAt(i)
	return fuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fuo *FactoryUpdateOne) SetNillableDeletedAt(i *int64) *FactoryUpdateOne {
	if i != nil {
		fuo.SetDeletedAt(*i)
	}
	return fuo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (fuo *FactoryUpdateOne) AddDeletedAt(i int64) *FactoryUpdateOne {
	fuo.mutation.AddDeletedAt(i)
	return fuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fuo *FactoryUpdateOne) ClearDeletedAt() *FactoryUpdateOne {
	fuo.mutation.ClearDeletedAt()
	return fuo
}

// SetTenantCode sets the "tenant_code" field.
func (fuo *FactoryUpdateOne) SetTenantCode(s string) *FactoryUpdateOne {
	fuo.mutation.SetTenantCode(s)
	return fuo
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (fuo *FactoryUpdateOne) SetNillableTenantCode(s *string) *FactoryUpdateOne {
	if s != nil {
		fuo.SetTenantCode(*s)
	}
	return fuo
}

// SetFactoryID sets the "factory_id" field.
func (fuo *FactoryUpdateOne) SetFactoryID(s string) *FactoryUpdateOne {
	fuo.mutation.SetFactoryID(s)
	return fuo
}

// SetNillableFactoryID sets the "factory_id" field if the given value is not nil.
func (fuo *FactoryUpdateOne) SetNillableFactoryID(s *string) *FactoryUpdateOne {
	if s != nil {
		fuo.SetFactoryID(*s)
	}
	return fuo
}

// SetFactoryName sets the "factory_name" field.
func (fuo *FactoryUpdateOne) SetFactoryName(s string) *FactoryUpdateOne {
	fuo.mutation.SetFactoryName(s)
	return fuo
}

// SetNillableFactoryName sets the "factory_name" field if the given value is not nil.
func (fuo *FactoryUpdateOne) SetNillableFactoryName(s *string) *FactoryUpdateOne {
	if s != nil {
		fuo.SetFactoryName(*s)
	}
	return fuo
}

// SetAddress sets the "address" field.
func (fuo *FactoryUpdateOne) SetAddress(s string) *FactoryUpdateOne {
	fuo.mutation.SetAddress(s)
	return fuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (fuo *FactoryUpdateOne) SetNillableAddress(s *string) *FactoryUpdateOne {
	if s != nil {
		fuo.SetAddress(*s)
	}
	return fuo
}

// SetContactPhone sets the "contact_phone" field.
func (fuo *FactoryUpdateOne) SetContactPhone(s string) *FactoryUpdateOne {
	fuo.mutation.SetContactPhone(s)
	return fuo
}

// SetNillableContactPhone sets the "contact_phone" field if the given value is not nil.
func (fuo *FactoryUpdateOne) SetNillableContactPhone(s *string) *FactoryUpdateOne {
	if s != nil {
		fuo.SetContactPhone(*s)
	}
	return fuo
}

// SetStatus sets the "status" field.
func (fuo *FactoryUpdateOne) SetStatus(i int) *FactoryUpdateOne {
	fuo.mutation.ResetStatus()
	fuo.mutation.SetStatus(i)
	return fuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fuo *FactoryUpdateOne) SetNillableStatus(i *int) *FactoryUpdateOne {
	if i != nil {
		fuo.SetStatus(*i)
	}
	return fuo
}

// AddStatus adds i to the "status" field.
func (fuo *FactoryUpdateOne) AddStatus(i int) *FactoryUpdateOne {
	fuo.mutation.AddStatus(i)
	return fuo
}

// Mutation returns the FactoryMutation object of the builder.
func (fuo *FactoryUpdateOne) Mutation() *FactoryMutation {
	return fuo.mutation
}

// Where appends a list predicates to the FactoryUpdate builder.
func (fuo *FactoryUpdateOne) Where(ps ...predicate.Factory) *FactoryUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FactoryUpdateOne) Select(field string, fields ...string) *FactoryUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Factory entity.
func (fuo *FactoryUpdateOne) Save(ctx context.Context) (*Factory, error) {
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FactoryUpdateOne) SaveX(ctx context.Context) *Factory {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FactoryUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FactoryUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FactoryUpdateOne) check() error {
	if v, ok := fuo.mutation.FactoryName(); ok {
		if err := factory.FactoryNameValidator(v); err != nil {
			return &ValidationError{Name: "factory_name", err: fmt.Errorf(`generated: validator failed for field "Factory.factory_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fuo *FactoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FactoryUpdateOne {
	fuo.modifiers = append(fuo.modifiers, modifiers...)
	return fuo
}

func (fuo *FactoryUpdateOne) sqlSave(ctx context.Context) (_node *Factory, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(factory.Table, factory.Columns, sqlgraph.NewFieldSpec(factory.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Factory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, factory.FieldID)
		for _, f := range fields {
			if !factory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != factory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(factory.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := fuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(factory.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := fuo.mutation.DeletedAt(); ok {
		_spec.SetField(factory.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := fuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(factory.FieldDeletedAt, field.TypeInt64, value)
	}
	if fuo.mutation.DeletedAtCleared() {
		_spec.ClearField(factory.FieldDeletedAt, field.TypeInt64)
	}
	if value, ok := fuo.mutation.TenantCode(); ok {
		_spec.SetField(factory.FieldTenantCode, field.TypeString, value)
	}
	if value, ok := fuo.mutation.FactoryID(); ok {
		_spec.SetField(factory.FieldFactoryID, field.TypeString, value)
	}
	if value, ok := fuo.mutation.FactoryName(); ok {
		_spec.SetField(factory.FieldFactoryName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Address(); ok {
		_spec.SetField(factory.FieldAddress, field.TypeString, value)
	}
	if value, ok := fuo.mutation.ContactPhone(); ok {
		_spec.SetField(factory.FieldContactPhone, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Status(); ok {
		_spec.SetField(factory.FieldStatus, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedStatus(); ok {
		_spec.AddField(factory.FieldStatus, field.TypeInt, value)
	}
	_spec.AddModifiers(fuo.modifiers...)
	_node = &Factory{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{factory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
