// Code generated by ent, DO NOT EDIT.

package generated

import (
	"admin_backend/pkg/ent/generated/product"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
)

// 商品
type Product struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// 修改时间
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt *int64 `json:"deleted_at,omitempty"`
	// 租户code
	TenantCode string `json:"tenant_code,omitempty"`
	// 商品ID
	ProductID string `json:"product_id,omitempty"`
	// 商品名称
	ProductName string `json:"product_name,omitempty"`
	// 单位
	Unit string `json:"unit,omitempty"`
	// 采购价格
	PurchasePrice decimal.Decimal `json:"purchase_price,omitempty"`
	// 销售价格
	SalePrice decimal.Decimal `json:"sale_price,omitempty"`
	// 当前库存
	CurrentStock int `json:"current_stock,omitempty"`
	// 最小库存预警
	MinStock int `json:"min_stock,omitempty"`
	// 状态: 1:启用, 2:禁用
	Status int `json:"status,omitempty"`
	// 所属工厂ID
	FactoryID    string `json:"factory_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Product) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case product.FieldPurchasePrice, product.FieldSalePrice:
			values[i] = new(decimal.Decimal)
		case product.FieldID, product.FieldCreatedAt, product.FieldUpdatedAt, product.FieldDeletedAt, product.FieldCurrentStock, product.FieldMinStock, product.FieldStatus:
			values[i] = new(sql.NullInt64)
		case product.FieldTenantCode, product.FieldProductID, product.FieldProductName, product.FieldUnit, product.FieldFactoryID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Product fields.
func (pr *Product) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case product.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case product.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Int64
			}
		case product.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Int64
			}
		case product.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pr.DeletedAt = new(int64)
				*pr.DeletedAt = value.Int64
			}
		case product.FieldTenantCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_code", values[i])
			} else if value.Valid {
				pr.TenantCode = value.String
			}
		case product.FieldProductID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				pr.ProductID = value.String
			}
		case product.FieldProductName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_name", values[i])
			} else if value.Valid {
				pr.ProductName = value.String
			}
		case product.FieldUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit", values[i])
			} else if value.Valid {
				pr.Unit = value.String
			}
		case product.FieldPurchasePrice:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field purchase_price", values[i])
			} else if value != nil {
				pr.PurchasePrice = *value
			}
		case product.FieldSalePrice:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field sale_price", values[i])
			} else if value != nil {
				pr.SalePrice = *value
			}
		case product.FieldCurrentStock:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field current_stock", values[i])
			} else if value.Valid {
				pr.CurrentStock = int(value.Int64)
			}
		case product.FieldMinStock:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field min_stock", values[i])
			} else if value.Valid {
				pr.MinStock = int(value.Int64)
			}
		case product.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pr.Status = int(value.Int64)
			}
		case product.FieldFactoryID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field factory_id", values[i])
			} else if value.Valid {
				pr.FactoryID = value.String
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Product.
// This includes values selected through modifiers, order, etc.
func (pr *Product) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// Update returns a builder for updating this Product.
// Note that you need to call Product.Unwrap() before calling this method if this Product
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Product) Update() *ProductUpdateOne {
	return NewProductClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Product entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Product) Unwrap() *Product {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("generated: Product is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Product) String() string {
	var builder strings.Builder
	builder.WriteString("Product(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", pr.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", pr.UpdatedAt))
	builder.WriteString(", ")
	if v := pr.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("tenant_code=")
	builder.WriteString(pr.TenantCode)
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(pr.ProductID)
	builder.WriteString(", ")
	builder.WriteString("product_name=")
	builder.WriteString(pr.ProductName)
	builder.WriteString(", ")
	builder.WriteString("unit=")
	builder.WriteString(pr.Unit)
	builder.WriteString(", ")
	builder.WriteString("purchase_price=")
	builder.WriteString(fmt.Sprintf("%v", pr.PurchasePrice))
	builder.WriteString(", ")
	builder.WriteString("sale_price=")
	builder.WriteString(fmt.Sprintf("%v", pr.SalePrice))
	builder.WriteString(", ")
	builder.WriteString("current_stock=")
	builder.WriteString(fmt.Sprintf("%v", pr.CurrentStock))
	builder.WriteString(", ")
	builder.WriteString("min_stock=")
	builder.WriteString(fmt.Sprintf("%v", pr.MinStock))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pr.Status))
	builder.WriteString(", ")
	builder.WriteString("factory_id=")
	builder.WriteString(pr.FactoryID)
	builder.WriteByte(')')
	return builder.String()
}

// Products is a parsable slice of Product.
type Products []*Product
